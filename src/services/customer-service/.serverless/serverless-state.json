{
  "service": {
    "service": "customer-service",
    "serviceObject": {
      "name": "customer-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "ap-south-1",
      "httpApi": {
        "id": "fxh1zg6455"
      },
      "environment": {
        "DATABASE_URL": "postgresql://backendapp:backend123@salonapp.cheme8w42ux8.ap-south-1.rds.amazonaws.com/salondb",
        "FIREBASE_SECRET_NAME": "FirebaseSDK",
        "FIREBASE_WEB_API_KEY": "/firebase/firebase-web/api/key",
        "CUSTOM_AWS_REGION": "ap-south-1",
        "IDEMPOTENCY_TABLE": "IdempotencyTable"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParameter",
                "ssm:GetParameters"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/FirebaseSDK"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:Query",
                "dynamodb:Scan"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/IdempotencyTable"
                }
              ]
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/customer-service-dev-createCustomer"
            }
          },
          "UpsertCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/customer-service-dev-upsertCustomer"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "customer-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/customer-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/customer-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "customer-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/customer-service/dev/1757487002623-2025-09-10T06:50:02.623Z/createCustomer.zip"
              },
              "Handler": "src/handlers/createCustomerHandler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "customer-service-dev-createCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_URL": "postgresql://backendapp:backend123@salonapp.cheme8w42ux8.ap-south-1.rds.amazonaws.com/salondb",
                  "FIREBASE_SECRET_NAME": "FirebaseSDK",
                  "FIREBASE_WEB_API_KEY": "/firebase/firebase-web/api/key",
                  "CUSTOM_AWS_REGION": "ap-south-1",
                  "IDEMPOTENCY_TABLE": "IdempotencyTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCustomerLogGroup"
            ]
          },
          "UpsertCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/customer-service/dev/1757487002623-2025-09-10T06:50:02.623Z/upsertCustomer.zip"
              },
              "Handler": "src/handlers/upsertCustomerHandler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "customer-service-dev-upsertCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DATABASE_URL": "postgresql://backendapp:backend123@salonapp.cheme8w42ux8.ap-south-1.rds.amazonaws.com/salondb",
                  "FIREBASE_SECRET_NAME": "FirebaseSDK",
                  "FIREBASE_WEB_API_KEY": "/firebase/firebase-web/api/key",
                  "CUSTOM_AWS_REGION": "ap-south-1",
                  "IDEMPOTENCY_TABLE": "IdempotencyTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpsertCustomerLogGroup"
            ]
          },
          "CreateCustomerLambdaVersionAQ1r2Vyp7BoRKO8XviG8RyGqCI9Y57viKBo2Cmtts9Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCustomerLambdaFunction"
              },
              "CodeSha256": "isgdlJU9vW6QE2QfMvM7MyZQ601I1MlljjtDUeFxYwQ="
            }
          },
          "UpsertCustomerLambdaVersionlLUNVn1AFwC6Glb1CY08bfArQyB6T9YrvkFZuH40E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpsertCustomerLambdaFunction"
              },
              "CodeSha256": "N/hB6/bnkgQBhIU2yMhWfTrp9KOxumMM/mLmbt8ry4s="
            }
          },
          "CreateCustomerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    "fxh1zg6455",
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCustomer": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": "fxh1zg6455",
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCustomerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCustomers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": "fxh1zg6455",
              "RouteKey": "POST /customers",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCustomer"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCustomer"
          },
          "UpsertCustomerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpsertCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    "fxh1zg6455",
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpsertCustomer": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": "fxh1zg6455",
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpsertCustomerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCustomersUpsert": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": "fxh1zg6455",
              "RouteKey": "POST /customers/upsert",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpsertCustomer"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpsertCustomer"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-customer-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCustomerLambdaVersionAQ1r2Vyp7BoRKO8XviG8RyGqCI9Y57viKBo2Cmtts9Q"
            },
            "Export": {
              "Name": "sls-customer-service-dev-CreateCustomerLambdaFunctionQualifiedArn"
            }
          },
          "UpsertCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpsertCustomerLambdaVersionlLUNVn1AFwC6Glb1CY08bfArQyB6T9YrvkFZuH40E"
            },
            "Export": {
              "Name": "sls-customer-service-dev-UpsertCustomerLambdaFunctionQualifiedArn"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "webpack": {
        "webpackConfig": "webpack.config.js",
        "includeModules": true,
        "packager": "yarn",
        "keepOutputDirectory": true
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-offline",
      "serverless-dotenv-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "createCustomer": {
        "handler": "src/handlers/createCustomerHandler.handler",
        "events": [
          {
            "httpApi": {
              "path": "/customers",
              "method": "post",
              "cors": true
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/customers"
          }
        ],
        "name": "customer-service-dev-createCustomer",
        "package": {
          "artifact": ".serverless\\createCustomer.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateCustomerLambdaVersionAQ1r2Vyp7BoRKO8XviG8RyGqCI9Y57viKBo2Cmtts9Q"
      },
      "upsertCustomer": {
        "handler": "src/handlers/upsertCustomerHandler.handler",
        "events": [
          {
            "httpApi": {
              "path": "/customers/upsert",
              "method": "post",
              "cors": true
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/customers/upsert"
          }
        ],
        "name": "customer-service-dev-upsertCustomer",
        "package": {
          "artifact": ".serverless\\upsertCustomer.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpsertCustomerLambdaVersionlLUNVn1AFwC6Glb1CY08bfArQyB6T9YrvkFZuH40E"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "customer-service",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "useDotenv": true,
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!../../../node_modules/**",
          "../../../libs/generated/client/**",
          "../../../node_modules/@prisma/client/**",
          "../../../node_modules/.prisma/client/**"
        ],
        "artifactsS3KeyDirname": "serverless/customer-service/dev/code-artifacts",
        "artifactDirectoryName": "serverless/customer-service/dev/1757487002623-2025-09-10T06:50:02.623Z"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/customer-service/dev/1757487002623-2025-09-10T06:50:02.623Z",
    "artifact": ""
  }
}