// @bun
var Q8=Object.create;var{getPrototypeOf:Y8,defineProperty:Z1,getOwnPropertyNames:X8}=Object;var Z8=Object.prototype.hasOwnProperty;var Dw=(w,f,W)=>{W=w!=null?Q8(Y8(w)):{};let Q=f||!w||!w.__esModule?Z1(W,"default",{value:w,enumerable:!0}):W;for(let Y of X8(w))if(!Z8.call(Q,Y))Z1(Q,Y,{get:()=>w[Y],enumerable:!0});return Q};var L=(w,f)=>()=>(f||w((f={exports:{}}).exports,f),f.exports);var $f=L(($1)=>{Object.defineProperty($1,"__esModule",{value:!0});$1.serialize=void 0;function q8(w){let f=$8(w),W;try{W=new URL(f.startUrl)}catch(Y){if(Y.message)console.error(Y.message+" "+f.startUrl);return""}if(w.scheme!==void 0&&!f.temporarySchemeAndHostUsed&&!f.temporarySchemeUsed)W.protocol=w.scheme.toLowerCase();else W.protocol="";if(w.host!==void 0&&!f.temporarySchemeAndHostUsed&&!f.temporaryHostUsed)W.host=w.host;else W.host="";if(w.port)W.port=String(w.port);if(w.path)W.pathname=w.path;if(w.userinfo){let Y=w.userinfo.split(":");if(Y[0])W.username=Y[0];if(Y[1])W.password=Y[1]}if(w.query)W.search=w.query;if(w.fragment)W.hash=w.fragment;let Q=W.toString();if(!w.path&&Q.endsWith("/"))Q=Q.slice(0,-1);if(f.temporarySchemeAndHostUsed){if(Q=Q.replace(q1,""),Q.startsWith("/"))Q=Q.slice(1)}if(f.temporaryHostUsed)Q=Q.replace(q0,"");if(f.temporarySchemeUsed)Q=Q.replace(Z0,"");return Q}$1.serialize=q8;var Z0="https:",q0="_remove_me_host_",q1=Z0+"//"+q0;function $8(w){let f={startUrl:"",temporaryHostUsed:!1,temporarySchemeUsed:!1,temporarySchemeAndHostUsed:!1};if(w.scheme&&w.host)return f.startUrl=w.scheme+"://"+w.host,f;if(w.host)return f.temporarySchemeUsed=!0,f.startUrl=Z0+w.host,f;if(w.scheme){if(w.path)return f.startUrl=w.scheme+":"+w.path,f;return f.temporaryHostUsed=!0,f.startUrl=w.scheme+":"+q0,f}return f.temporarySchemeAndHostUsed=!0,f.startUrl=q1,f}});var Gf=L((J1)=>{Object.defineProperty(J1,"__esModule",{value:!0});J1.parse=void 0;function G8(w){let f={path:"",fragment:void 0,host:void 0,port:void 0,query:void 0,reference:void 0,scheme:void 0,userinfo:void 0};if(w.includes("#"))f.fragment="";let{parsed:W,addedDefaultScheme:Q,addedTemporaryHost:Y,error:X}=z8(w);if(X||W===void 0)return f.error=X,f;if(typeof W.protocol!==void 0&&W.protocol!==""&&!Q)f.scheme=String(W.protocol).replace(":","");if(typeof W.username!==void 0&&W.username!==""){let Z=W.username;if(W.password)Z+=":"+W.password;f.userinfo=Z}if(typeof W.hostname!==void 0&&W.hostname!==""&&!Y){if(f.host=W.hostname,f.host.startsWith("["))f.host=f.host.substring(1),f.host=f.host.slice(0,-1)}if(typeof W.port!==void 0&&W.port!=="")f.port=Number(W.port);if(typeof W.pathname!==void 0&&W.pathname!=="/"){if(f.path=W.pathname,Y&&f.path.startsWith("/"))f.path=f.path.substring(1)}if(typeof W.search!==void 0&&W.search!=="")f.query=W.search.replace("?","");if(typeof W.hash!==void 0&&W.hash!=="")f.fragment=W.hash.replace("#","");if(f.scheme===void 0&&f.userinfo===void 0&&f.host===void 0&&f.port===void 0&&!f.path&&f.query===void 0)f.reference="same-document";else if(f.scheme===void 0)f.reference="relative";else if(f.fragment===void 0)f.reference="absolute";else f.reference="uri";return f}J1.parse=G8;var J8="_remove_me_host/";function z8(w){let f={parsed:void 0,addedDefaultScheme:!1,addedTemporaryHost:!1,error:void 0},W;try{return f.parsed=new URL(w),f}catch(Q){W=Q}if(w.startsWith("//"))try{return f.parsed=new URL("https:"+w),f.addedDefaultScheme=!0,f}catch(Q){return f.error=W.message,f}try{return f.parsed=new URL("https://"+J8+w),f.addedDefaultScheme=!0,f.addedTemporaryHost=!0,f}catch(Q){}return f.error=W.message,f}});var K1=L((F1)=>{Object.defineProperty(F1,"__esModule",{value:!0});F1.resolveComponents=F1.resolve=void 0;var zf=Gf(),$0=$f();function H8(w,f,W){let Q=Object.assign({scheme:"null"},W),Y=H1(zf.parse(w),zf.parse(f),Q,!0);return $0.serialize(Y)}F1.resolve=H8;function H1(w,f,W,Q){let Y={};if(!Q)w=zf.parse($0.serialize(w)),f=zf.parse($0.serialize(f));if(W=W||{},!W.tolerant&&f.scheme)Y.scheme=f.scheme,Y.userinfo=f.userinfo,Y.host=f.host,Y.port=f.port,Y.path=Jf(f.path||""),Y.query=f.query;else{if(f.userinfo!==void 0||f.host!==void 0||f.port!==void 0)Y.userinfo=f.userinfo,Y.host=f.host,Y.port=f.port,Y.path=Jf(f.path||""),Y.query=f.query;else{if(!f.path)if(Y.path=w.path,f.query!==void 0)Y.query=f.query;else Y.query=w.query;else{if(f.path.charAt(0)==="/")Y.path=Jf(f.path);else{if((w.userinfo!==void 0||w.host!==void 0||w.port!==void 0)&&!w.path)Y.path="/"+f.path;else if(!w.path)Y.path=f.path;else Y.path=w.path.slice(0,w.path.lastIndexOf("/")+1)+f.path;Y.path=Jf(Y.path)}Y.query=f.query}Y.userinfo=w.userinfo,Y.host=w.host,Y.port=w.port}Y.scheme=w.scheme}return Y.fragment=f.fragment,Y}F1.resolveComponents=H1;function Jf(w){let f=/^\.\.?\//u,W=/^\/\.(?:\/|$)/u,Q=/^\/\.\.(?:\/|$)/u,Y=/^\/?(?:.|\n)*?(?=\/|$)/u,X=[];while(w.length)if(w.match(f))w=w.replace(f,"");else if(w.match(W))w=w.replace(W,"/");else if(w.match(Q))w=w.replace(Q,"/"),X.pop();else if(w==="."||w==="..")w="";else{let Z=w.match(Y);if(Z){let $=Z[0];w=w.slice($.length),X.push($)}else throw new Error("Unexpected dot segment condition")}return X.join("")}});var J0=L((c)=>{var U8=c&&c.__createBinding||(Object.create?function(w,f,W,Q){if(Q===void 0)Q=W;var Y=Object.getOwnPropertyDescriptor(f,W);if(!Y||("get"in Y?!f.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return f[W]}};Object.defineProperty(w,Q,Y)}:function(w,f,W,Q){if(Q===void 0)Q=W;w[Q]=f[W]}),G0=c&&c.__exportStar||function(w,f){for(var W in w)if(W!=="default"&&!Object.prototype.hasOwnProperty.call(f,W))U8(f,w,W)};Object.defineProperty(c,"__esModule",{value:!0});c.normalize=c.equal=void 0;var Nw=$f(),Hf=Gf();G0(K1(),c);G0($f(),c);G0(Gf(),c);function K8(w,f){let W,Q;if(typeof w==="string")W=Nw.serialize(Hf.parse(w));else W=Nw.serialize(w);if(typeof f==="string")Q=Nw.serialize(Hf.parse(f));else Q=Nw.serialize(f);return W.toLowerCase()===Q.toLowerCase()}c.equal=K8;function B8(w){if(typeof w==="string")return Nw.serialize(Hf.parse(w));else return Hf.parse(Nw.serialize(w))}c.normalize=B8});var M1=L((B1,Ff)=>{(function(w,f){if(typeof Ff==="object"&&Ff.exports)Ff.exports=f();else w.nearley=f()})(B1,function(){function w(q,G,J){return this.id=++w.highestId,this.name=q,this.symbols=G,this.postprocess=J,this}w.highestId=0,w.prototype.toString=function(q){var G=typeof q==="undefined"?this.symbols.map($).join(" "):this.symbols.slice(0,q).map($).join(" ")+" \u25CF "+this.symbols.slice(q).map($).join(" ");return this.name+" \u2192 "+G};function f(q,G,J,z){this.rule=q,this.dot=G,this.reference=J,this.data=[],this.wantedBy=z,this.isComplete=this.dot===q.symbols.length}f.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},f.prototype.nextState=function(q){var G=new f(this.rule,this.dot+1,this.reference,this.wantedBy);if(G.left=this,G.right=q,G.isComplete)G.data=G.build(),G.right=void 0;return G},f.prototype.build=function(){var q=[],G=this;do q.push(G.right.data),G=G.left;while(G.left);return q.reverse(),q},f.prototype.finish=function(){if(this.rule.postprocess)this.data=this.rule.postprocess(this.data,this.reference,X.fail)};function W(q,G){this.grammar=q,this.index=G,this.states=[],this.wants={},this.scannable=[],this.completed={}}W.prototype.process=function(q){var G=this.states,J=this.wants,z=this.completed;for(var K=0;K<G.length;K++){var F=G[K];if(F.isComplete){if(F.finish(),F.data!==X.fail){var U=F.wantedBy;for(var H=U.length;H--;){var B=U[H];this.complete(B,F)}if(F.reference===this.index){var M=F.rule.name;(this.completed[M]=this.completed[M]||[]).push(F)}}}else{var M=F.rule.symbols[F.dot];if(typeof M!=="string"){this.scannable.push(F);continue}if(J[M]){if(J[M].push(F),z.hasOwnProperty(M)){var I=z[M];for(var H=0;H<I.length;H++){var N=I[H];this.complete(F,N)}}}else J[M]=[F],this.predict(M)}}},W.prototype.predict=function(q){var G=this.grammar.byName[q]||[];for(var J=0;J<G.length;J++){var z=G[J],K=this.wants[q],F=new f(z,0,this.index,K);this.states.push(F)}},W.prototype.complete=function(q,G){var J=q.nextState(G);this.states.push(J)};function Q(q,G){this.rules=q,this.start=G||this.rules[0].name;var J=this.byName={};this.rules.forEach(function(z){if(!J.hasOwnProperty(z.name))J[z.name]=[];J[z.name].push(z)})}Q.fromCompiled=function(z,G){var J=z.Lexer;if(z.ParserStart)G=z.ParserStart,z=z.ParserRules;var z=z.map(function(F){return new w(F.name,F.symbols,F.postprocess)}),K=new Q(z,G);return K.lexer=J,K};function Y(){this.reset("")}Y.prototype.reset=function(q,G){this.buffer=q,this.index=0,this.line=G?G.line:1,this.lastLineBreak=G?-G.col:0},Y.prototype.next=function(){if(this.index<this.buffer.length){var q=this.buffer[this.index++];if(q===`
`)this.line+=1,this.lastLineBreak=this.index;return{value:q}}},Y.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},Y.prototype.formatError=function(q,G){var J=this.buffer;if(typeof J==="string"){var z=J.split(`
`).slice(Math.max(0,this.line-5),this.line),K=J.indexOf(`
`,this.index);if(K===-1)K=J.length;var F=this.index-this.lastLineBreak,U=String(this.line).length;return G+=" at line "+this.line+" col "+F+`:

`,G+=z.map(function(B,M){return H(this.line-z.length+M+1,U)+" "+B},this).join(`
`),G+=`
`+H("",U+F)+`^
`,G}else return G+" at index "+(this.index-1);function H(B,M){var I=String(B);return Array(M-I.length+1).join(" ")+I}};function X(q,G,J){if(q instanceof Q)var z=q,J=G;else var z=Q.fromCompiled(q,G);this.grammar=z,this.options={keepHistory:!1,lexer:z.lexer||new Y};for(var K in J||{})this.options[K]=J[K];this.lexer=this.options.lexer,this.lexerState=void 0;var F=new W(z,0),U=this.table=[F];F.wants[z.start]=[],F.predict(z.start),F.process(),this.current=0}X.fail={},X.prototype.feed=function(q){var G=this.lexer;G.reset(q,this.lexerState);var J;while(!0){try{if(J=G.next(),!J)break}catch(n){var U=new W(this.grammar,this.current+1);this.table.push(U);var z=new Error(this.reportLexerError(n));throw z.offset=this.current,z.token=n.token,z}var K=this.table[this.current];if(!this.options.keepHistory)delete this.table[this.current-1];var F=this.current+1,U=new W(this.grammar,F);this.table.push(U);var H=J.text!==void 0?J.text:J.value,B=G.constructor===Y?J.value:J,M=K.scannable;for(var I=M.length;I--;){var N=M[I],b=N.rule.symbols[N.dot];if(b.test?b.test(B):b.type?b.type===J.type:b.literal===H){var D=N.nextState({data:B,token:J,isToken:!0,reference:F-1});U.states.push(D)}}if(U.process(),U.states.length===0){var z=new Error(this.reportError(J));throw z.offset=this.current,z.token=J,z}if(this.options.keepHistory)K.lexerState=G.save();this.current++}if(K)this.lexerState=G.save();return this.results=this.finish(),this},X.prototype.reportLexerError=function(q){var G,J,z=q.token;if(z)G="input "+JSON.stringify(z.text[0])+" (lexer error)",J=this.lexer.formatError(z,"Syntax error");else G="input (lexer error)",J=q.message;return this.reportErrorCommon(J,G)},X.prototype.reportError=function(q){var G=(q.type?q.type+" token: ":"")+JSON.stringify(q.value!==void 0?q.value:q),J=this.lexer.formatError(q,"Syntax error");return this.reportErrorCommon(J,G)},X.prototype.reportErrorCommon=function(q,G){var J=[];J.push(q);var z=this.table.length-2,K=this.table[z],F=K.states.filter(function(H){var B=H.rule.symbols[H.dot];return B&&typeof B!=="string"});if(F.length===0)J.push("Unexpected "+G+`. I did not expect any more input. Here is the state of my parse table:
`),this.displayStateStack(K.states,J);else{J.push("Unexpected "+G+`. Instead, I was expecting to see one of the following:
`);var U=F.map(function(H){return this.buildFirstStateStack(H,[])||[H]},this);U.forEach(function(H){var B=H[0],M=B.rule.symbols[B.dot],I=this.getSymbolDisplay(M);J.push("A "+I+" based on:"),this.displayStateStack(H,J)},this)}return J.push(""),J.join(`
`)},X.prototype.displayStateStack=function(q,G){var J,z=0;for(var K=0;K<q.length;K++){var F=q[K],U=F.rule.toString(F.dot);if(U===J)z++;else{if(z>0)G.push("    ^ "+z+" more lines identical to this");z=0,G.push("    "+U)}J=U}},X.prototype.getSymbolDisplay=function(q){return Z(q)},X.prototype.buildFirstStateStack=function(q,G){if(G.indexOf(q)!==-1)return null;if(q.wantedBy.length===0)return[q];var J=q.wantedBy[0],z=[q].concat(G),K=this.buildFirstStateStack(J,z);if(K===null)return null;return[q].concat(K)},X.prototype.save=function(){var q=this.table[this.current];return q.lexerState=this.lexerState,q},X.prototype.restore=function(q){var G=q.index;this.current=G,this.table[G]=q,this.table.splice(G+1),this.lexerState=q.lexerState,this.results=this.finish()},X.prototype.rewind=function(q){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[q])},X.prototype.finish=function(){var q=[],G=this.grammar.start,J=this.table[this.table.length-1];return J.states.forEach(function(z){if(z.rule.name===G&&z.dot===z.rule.symbols.length&&z.reference===0&&z.data!==X.fail)q.push(z)}),q.map(function(z){return z.data})};function Z(q){var G=typeof q;if(G==="string")return q;else if(G==="object")if(q.literal)return JSON.stringify(q.literal);else if(q instanceof RegExp)return"character matching "+q;else if(q.type)return q.type+" token";else if(q.test)return"token matching "+String(q.test);else throw new Error("Unknown symbol type: "+q)}function $(q){var G=typeof q;if(G==="string")return q;else if(G==="object")if(q.literal)return JSON.stringify(q.literal);else if(q instanceof RegExp)return q.toString();else if(q.type)return"%"+q.type;else if(q.test)return"<"+String(q.test)+">";else throw new Error("Unknown symbol type: "+q)}return{Parser:X,Grammar:Q,Rule:w}})});var A1=L((L1)=>{Object.defineProperty(L1,"__esModule",{value:!0});function k(w){return w[0]}var V1=(w)=>[].concat(...w.map((f)=>Array.isArray(f)?V1(f):f));function jw(w){if(w){if(Array.isArray(w))return V1(w).join("");return w}return""}var M8={Lexer:void 0,ParserRules:[{name:"Reverse_path",symbols:["Path"]},{name:"Reverse_path$string$1",symbols:[{literal:"<"},{literal:">"}],postprocess:(w)=>w.join("")},{name:"Reverse_path",symbols:["Reverse_path$string$1"]},{name:"Forward_path$subexpression$1$subexpression$1",symbols:[{literal:"<"},/[pP]/,/[oO]/,/[sS]/,/[tT]/,/[mM]/,/[aA]/,/[sS]/,/[tT]/,/[eE]/,/[rR]/,{literal:"@"}],postprocess:function(w){return w.join("")}},{name:"Forward_path$subexpression$1",symbols:["Forward_path$subexpression$1$subexpression$1","Domain",{literal:">"}]},{name:"Forward_path",symbols:["Forward_path$subexpression$1"]},{name:"Forward_path$subexpression$2",symbols:[{literal:"<"},/[pP]/,/[oO]/,/[sS]/,/[tT]/,/[mM]/,/[aA]/,/[sS]/,/[tT]/,/[eE]/,/[rR]/,{literal:">"}],postprocess:function(w){return w.join("")}},{name:"Forward_path",symbols:["Forward_path$subexpression$2"]},{name:"Forward_path",symbols:["Path"]},{name:"Path$ebnf$1$subexpression$1",symbols:["A_d_l",{literal:":"}]},{name:"Path$ebnf$1",symbols:["Path$ebnf$1$subexpression$1"],postprocess:k},{name:"Path$ebnf$1",symbols:[],postprocess:()=>null},{name:"Path",symbols:[{literal:"<"},"Path$ebnf$1","Mailbox",{literal:">"}]},{name:"A_d_l$ebnf$1",symbols:[]},{name:"A_d_l$ebnf$1$subexpression$1",symbols:[{literal:","},"At_domain"]},{name:"A_d_l$ebnf$1",symbols:["A_d_l$ebnf$1","A_d_l$ebnf$1$subexpression$1"],postprocess:(w)=>w[0].concat([w[1]])},{name:"A_d_l",symbols:["At_domain","A_d_l$ebnf$1"]},{name:"At_domain",symbols:[{literal:"@"},"Domain"]},{name:"Domain$ebnf$1",symbols:[]},{name:"Domain$ebnf$1$subexpression$1",symbols:[{literal:"."},"sub_domain"]},{name:"Domain$ebnf$1",symbols:["Domain$ebnf$1","Domain$ebnf$1$subexpression$1"],postprocess:(w)=>w[0].concat([w[1]])},{name:"Domain",symbols:["sub_domain","Domain$ebnf$1"]},{name:"sub_domain",symbols:["U_label"]},{name:"Let_dig",symbols:["ALPHA_DIGIT"],postprocess:k},{name:"Ldh_str$ebnf$1",symbols:[]},{name:"Ldh_str$ebnf$1",symbols:["Ldh_str$ebnf$1","ALPHA_DIG_DASH"],postprocess:(w)=>w[0].concat([w[1]])},{name:"Ldh_str",symbols:["Ldh_str$ebnf$1","Let_dig"]},{name:"U_Let_dig",symbols:["ALPHA_DIGIT_U"],postprocess:k},{name:"U_Ldh_str$ebnf$1",symbols:[]},{name:"U_Ldh_str$ebnf$1",symbols:["U_Ldh_str$ebnf$1","ALPHA_DIG_DASH_U"],postprocess:(w)=>w[0].concat([w[1]])},{name:"U_Ldh_str",symbols:["U_Ldh_str$ebnf$1","U_Let_dig"]},{name:"U_label$ebnf$1$subexpression$1",symbols:["U_Ldh_str"]},{name:"U_label$ebnf$1",symbols:["U_label$ebnf$1$subexpression$1"],postprocess:k},{name:"U_label$ebnf$1",symbols:[],postprocess:()=>null},{name:"U_label",symbols:["U_Let_dig","U_label$ebnf$1"]},{name:"address_literal$subexpression$1",symbols:["IPv4_address_literal"]},{name:"address_literal$subexpression$1",symbols:["IPv6_address_literal"]},{name:"address_literal$subexpression$1",symbols:["General_address_literal"]},{name:"address_literal",symbols:[{literal:"["},"address_literal$subexpression$1",{literal:"]"}]},{name:"non_local_part",symbols:["Domain"],postprocess:function(w){return{DomainName:jw(w[0])}}},{name:"non_local_part",symbols:["address_literal"],postprocess:function(w){return{AddressLiteral:jw(w[0])}}},{name:"Mailbox",symbols:["Local_part",{literal:"@"},"non_local_part"],postprocess:function(w){return{localPart:jw(w[0]),domainPart:jw(w[2])}}},{name:"Local_part",symbols:["Dot_string"],postprocess:function(w){return{DotString:jw(w[0])}}},{name:"Local_part",symbols:["Quoted_string"],postprocess:function(w){return{QuotedString:jw(w[0])}}},{name:"Dot_string$ebnf$1",symbols:[]},{name:"Dot_string$ebnf$1$subexpression$1",symbols:[{literal:"."},"Atom"]},{name:"Dot_string$ebnf$1",symbols:["Dot_string$ebnf$1","Dot_string$ebnf$1$subexpression$1"],postprocess:(w)=>w[0].concat([w[1]])},{name:"Dot_string",symbols:["Atom","Dot_string$ebnf$1"]},{name:"Atom$ebnf$1",symbols:[/[0-9A-Za-z!#$%&'*+\-/=?^_`{|}~\u0080-\uFFFF/]/]},{name:"Atom$ebnf$1",symbols:["Atom$ebnf$1",/[0-9A-Za-z!#$%&'*+\-/=?^_`{|}~\u0080-\uFFFF/]/],postprocess:(w)=>w[0].concat([w[1]])},{name:"Atom",symbols:["Atom$ebnf$1"]},{name:"Quoted_string$ebnf$1",symbols:[]},{name:"Quoted_string$ebnf$1",symbols:["Quoted_string$ebnf$1","QcontentSMTP"],postprocess:(w)=>w[0].concat([w[1]])},{name:"Quoted_string",symbols:["DQUOTE","Quoted_string$ebnf$1","DQUOTE"]},{name:"QcontentSMTP",symbols:["qtextSMTP"]},{name:"QcontentSMTP",symbols:["quoted_pairSMTP"]},{name:"quoted_pairSMTP",symbols:[{literal:"\\"},/[\x20-\x7e]/]},{name:"qtextSMTP",symbols:[/[\x20-\x21\x23-\x5b\x5d-\x7e\u0080-\uFFFF]/],postprocess:k},{name:"IPv4_address_literal$macrocall$2",symbols:[{literal:"."},"Snum"]},{name:"IPv4_address_literal$macrocall$1",symbols:["IPv4_address_literal$macrocall$2","IPv4_address_literal$macrocall$2","IPv4_address_literal$macrocall$2"]},{name:"IPv4_address_literal",symbols:["Snum","IPv4_address_literal$macrocall$1"]},{name:"IPv6_address_literal$subexpression$1",symbols:[/[iI]/,/[pP]/,/[vV]/,{literal:"6"},{literal:":"}],postprocess:function(w){return w.join("")}},{name:"IPv6_address_literal",symbols:["IPv6_address_literal$subexpression$1","IPv6_addr"]},{name:"General_address_literal$ebnf$1",symbols:["dcontent"]},{name:"General_address_literal$ebnf$1",symbols:["General_address_literal$ebnf$1","dcontent"],postprocess:(w)=>w[0].concat([w[1]])},{name:"General_address_literal",symbols:["Standardized_tag",{literal:":"},"General_address_literal$ebnf$1"]},{name:"Standardized_tag",symbols:["Ldh_str"]},{name:"dcontent",symbols:[/[\x21-\x5a\x5e-\x7e]/],postprocess:k},{name:"Snum",symbols:["DIGIT"]},{name:"Snum$subexpression$1",symbols:[/[1-9]/,"DIGIT"]},{name:"Snum",symbols:["Snum$subexpression$1"]},{name:"Snum$subexpression$2",symbols:[{literal:"1"},"DIGIT","DIGIT"]},{name:"Snum",symbols:["Snum$subexpression$2"]},{name:"Snum$subexpression$3",symbols:[{literal:"2"},/[0-4]/,"DIGIT"]},{name:"Snum",symbols:["Snum$subexpression$3"]},{name:"Snum$subexpression$4",symbols:[{literal:"2"},{literal:"5"},/[0-5]/]},{name:"Snum",symbols:["Snum$subexpression$4"]},{name:"IPv6_addr",symbols:["IPv6_full"]},{name:"IPv6_addr",symbols:["IPv6_comp"]},{name:"IPv6_addr",symbols:["IPv6v4_full"]},{name:"IPv6_addr",symbols:["IPv6v4_comp"]},{name:"IPv6_hex",symbols:["HEXDIG"]},{name:"IPv6_hex$subexpression$1",symbols:["HEXDIG","HEXDIG"]},{name:"IPv6_hex",symbols:["IPv6_hex$subexpression$1"]},{name:"IPv6_hex$subexpression$2",symbols:["HEXDIG","HEXDIG","HEXDIG"]},{name:"IPv6_hex",symbols:["IPv6_hex$subexpression$2"]},{name:"IPv6_hex$subexpression$3",symbols:["HEXDIG","HEXDIG","HEXDIG","HEXDIG"]},{name:"IPv6_hex",symbols:["IPv6_hex$subexpression$3"]},{name:"IPv6_full$macrocall$2",symbols:[{literal:":"},"IPv6_hex"]},{name:"IPv6_full$macrocall$1",symbols:["IPv6_full$macrocall$2","IPv6_full$macrocall$2","IPv6_full$macrocall$2","IPv6_full$macrocall$2","IPv6_full$macrocall$2","IPv6_full$macrocall$2","IPv6_full$macrocall$2"]},{name:"IPv6_full",symbols:["IPv6_hex","IPv6_full$macrocall$1"]},{name:"IPv6_comp$ebnf$1$subexpression$1$macrocall$2",symbols:[{literal:":"},"IPv6_hex"]},{name:"IPv6_comp$ebnf$1$subexpression$1$macrocall$1",symbols:["IPv6_comp$ebnf$1$subexpression$1$macrocall$2","IPv6_comp$ebnf$1$subexpression$1$macrocall$2","IPv6_comp$ebnf$1$subexpression$1$macrocall$2","IPv6_comp$ebnf$1$subexpression$1$macrocall$2","IPv6_comp$ebnf$1$subexpression$1$macrocall$2"]},{name:"IPv6_comp$ebnf$1$subexpression$1",symbols:["IPv6_hex","IPv6_comp$ebnf$1$subexpression$1$macrocall$1"]},{name:"IPv6_comp$ebnf$1",symbols:["IPv6_comp$ebnf$1$subexpression$1"],postprocess:k},{name:"IPv6_comp$ebnf$1",symbols:[],postprocess:()=>null},{name:"IPv6_comp$string$1",symbols:[{literal:":"},{literal:":"}],postprocess:(w)=>w.join("")},{name:"IPv6_comp$ebnf$2$subexpression$1$macrocall$2",symbols:[{literal:":"},"IPv6_hex"]},{name:"IPv6_comp$ebnf$2$subexpression$1$macrocall$1",symbols:["IPv6_comp$ebnf$2$subexpression$1$macrocall$2","IPv6_comp$ebnf$2$subexpression$1$macrocall$2","IPv6_comp$ebnf$2$subexpression$1$macrocall$2","IPv6_comp$ebnf$2$subexpression$1$macrocall$2","IPv6_comp$ebnf$2$subexpression$1$macrocall$2"]},{name:"IPv6_comp$ebnf$2$subexpression$1",symbols:["IPv6_hex","IPv6_comp$ebnf$2$subexpression$1$macrocall$1"]},{name:"IPv6_comp$ebnf$2",symbols:["IPv6_comp$ebnf$2$subexpression$1"],postprocess:k},{name:"IPv6_comp$ebnf$2",symbols:[],postprocess:()=>null},{name:"IPv6_comp",symbols:["IPv6_comp$ebnf$1","IPv6_comp$string$1","IPv6_comp$ebnf$2"]},{name:"IPv6v4_full$macrocall$2",symbols:[{literal:":"},"IPv6_hex"]},{name:"IPv6v4_full$macrocall$1",symbols:["IPv6v4_full$macrocall$2","IPv6v4_full$macrocall$2","IPv6v4_full$macrocall$2","IPv6v4_full$macrocall$2","IPv6v4_full$macrocall$2"]},{name:"IPv6v4_full",symbols:["IPv6_hex","IPv6v4_full$macrocall$1",{literal:":"},"IPv4_address_literal"]},{name:"IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2",symbols:[{literal:":"},"IPv6_hex"]},{name:"IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1",symbols:["IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2","IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2","IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2"]},{name:"IPv6v4_comp$ebnf$1$subexpression$1",symbols:["IPv6_hex","IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1"]},{name:"IPv6v4_comp$ebnf$1",symbols:["IPv6v4_comp$ebnf$1$subexpression$1"],postprocess:k},{name:"IPv6v4_comp$ebnf$1",symbols:[],postprocess:()=>null},{name:"IPv6v4_comp$string$1",symbols:[{literal:":"},{literal:":"}],postprocess:(w)=>w.join("")},{name:"IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2",symbols:[{literal:":"},"IPv6_hex"]},{name:"IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1",symbols:["IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2","IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2","IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2"]},{name:"IPv6v4_comp$ebnf$2$subexpression$1",symbols:["IPv6_hex","IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1",{literal:":"}]},{name:"IPv6v4_comp$ebnf$2",symbols:["IPv6v4_comp$ebnf$2$subexpression$1"],postprocess:k},{name:"IPv6v4_comp$ebnf$2",symbols:[],postprocess:()=>null},{name:"IPv6v4_comp",symbols:["IPv6v4_comp$ebnf$1","IPv6v4_comp$string$1","IPv6v4_comp$ebnf$2","IPv4_address_literal"]},{name:"DIGIT",symbols:[/[0-9]/],postprocess:k},{name:"ALPHA_DIGIT_U",symbols:[/[0-9A-Za-z\u0080-\uFFFF]/],postprocess:k},{name:"ALPHA_DIGIT",symbols:[/[0-9A-Za-z]/],postprocess:k},{name:"ALPHA_DIG_DASH",symbols:[/[-0-9A-Za-z]/],postprocess:k},{name:"ALPHA_DIG_DASH_U",symbols:[/[-0-9A-Za-z\u0080-\uFFFF]/],postprocess:k},{name:"HEXDIG",symbols:[/[0-9A-Fa-f]/],postprocess:k},{name:"DQUOTE",symbols:[{literal:'"'}],postprocess:k}],ParserStart:"Reverse_path"};L1.default=M8});var Uf=L((x)=>{var L8=x&&x.__importDefault||function(w){return w&&w.__esModule?w:{default:w}};Object.defineProperty(x,"__esModule",{value:!0});x.canonicalize=x.canonicalize_quoted_string=x.normalize=x.normalize_dot_string=x.parse=void 0;var O1=M1(),I1=L8(A1());I1.default.ParserStart="Mailbox";var A8=O1.Grammar.fromCompiled(I1.default);function z0(w){if(w.length>986)throw new Error("address too long");let W=new O1.Parser(A8);if(W.feed(w),W.results.length!==1)throw new Error("address parsing failed: ambiguous grammar");let Q=w.lastIndexOf("@"),Y=w.substring(Q+1);if(Y[0]!=="["){if(Y.length>253)throw new Error("domain too long");let X=Y.split(".");if(X.length<2)throw new Error("domain not fully qualified");if(X[X.length-1].length<2)throw new Error("top level domain label too short");if(X.sort(function(Z,$){return $.length-Z.length}),X[0].length>63)throw new Error("domain label too long")}return W.results[0]}x.parse=z0;function D1(w){return function(){let Q=w.indexOf("+");if(Q===-1)return w;return w.substr(0,Q)}().replace(/\./g,"").toLowerCase()}x.normalize_dot_string=D1;function O8(w){var f,W;let Q=z0(w),Y=(f=Q.domainPart.AddressLiteral)!==null&&f!==void 0?f:Q.domainPart.DomainName.toLowerCase();return`${(W=Q.localPart.QuotedString)!==null&&W!==void 0?W:D1(Q.localPart.DotString)}@${Y}`}x.normalize=O8;function N1(w){return`"${w.substr(1).substr(0,w.length-2).replace(/(?:\\(.))/g,"$1").replace(/(?:(["\\]))/g,"\\$1")}"`}x.canonicalize_quoted_string=N1;function I8(w){var f;let W=z0(w),Q=(f=W.domainPart.AddressLiteral)!==null&&f!==void 0?f:W.domainPart.DomainName.toLowerCase();return`${W.localPart.QuotedString?N1(W.localPart.QuotedString):W.localPart.DotString}@${Q}`}x.canonicalize=I8});var xw=L((u1)=>{Object.defineProperty(u1,"__esModule",{value:!0});u1.regexpCode=u1.getEsmExportName=u1.getProperty=u1.safeStringify=u1.stringify=u1.strConcat=u1.addCodeArg=u1.str=u1._=u1.nil=u1._Code=u1.Name=u1.IDENTIFIER=u1._CodeOrName=void 0;class Af{}u1._CodeOrName=Af;u1.IDENTIFIER=/^[a-z$_][a-z$_0-9]*$/i;class Rw extends Af{constructor(w){super();if(!u1.IDENTIFIER.test(w))throw new Error("CodeGen: name must be a valid identifier");this.str=w}toString(){return this.str}emptyStr(){return!1}get names(){return{[this.str]:1}}}u1.Name=Rw;class o extends Af{constructor(w){super();this._items=typeof w==="string"?[w]:w}toString(){return this.str}emptyStr(){if(this._items.length>1)return!1;let w=this._items[0];return w===""||w==='""'}get str(){var w;return(w=this._str)!==null&&w!==void 0?w:this._str=this._items.reduce((f,W)=>`${f}${W}`,"")}get names(){var w;return(w=this._names)!==null&&w!==void 0?w:this._names=this._items.reduce((f,W)=>{if(W instanceof Rw)f[W.str]=(f[W.str]||0)+1;return f},{})}}u1._Code=o;u1.nil=new o("");function v1(w,...f){let W=[w[0]],Q=0;while(Q<f.length)F0(W,f[Q]),W.push(w[++Q]);return new o(W)}u1._=v1;var H0=new o("+");function y1(w,...f){let W=[rw(w[0])],Q=0;while(Q<f.length)W.push(H0),F0(W,f[Q]),W.push(H0,rw(w[++Q]));return b8(W),new o(W)}u1.str=y1;function F0(w,f){if(f instanceof o)w.push(...f._items);else if(f instanceof Rw)w.push(f);else w.push(C8(f))}u1.addCodeArg=F0;function b8(w){let f=1;while(f<w.length-1){if(w[f]===H0){let W=S8(w[f-1],w[f+1]);if(W!==void 0){w.splice(f-1,3,W);continue}w[f++]="+"}f++}}function S8(w,f){if(f==='""')return w;if(w==='""')return f;if(typeof w=="string"){if(f instanceof Rw||w[w.length-1]!=='"')return;if(typeof f!="string")return`${w.slice(0,-1)}${f}"`;if(f[0]==='"')return w.slice(0,-1)+f.slice(1);return}if(typeof f=="string"&&f[0]==='"'&&!(w instanceof Rw))return`"${w}${f.slice(1)}`;return}function h8(w,f){return f.emptyStr()?w:w.emptyStr()?f:y1`${w}${f}`}u1.strConcat=h8;function C8(w){return typeof w=="number"||typeof w=="boolean"||w===null?w:rw(Array.isArray(w)?w.join(","):w)}function k8(w){return new o(rw(w))}u1.stringify=k8;function rw(w){return JSON.stringify(w).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}u1.safeStringify=rw;function v8(w){return typeof w=="string"&&u1.IDENTIFIER.test(w)?new o(`.${w}`):v1`[${w}]`}u1.getProperty=v8;function y8(w){if(typeof w=="string"&&u1.IDENTIFIER.test(w))return new o(`${w}`);throw new Error(`CodeGen: invalid export name: ${w}, use explicit $id name mapping`)}u1.getEsmExportName=y8;function u8(w){return new o(w.toString())}u1.regexpCode=u8});var M0=L((x1)=>{Object.defineProperty(x1,"__esModule",{value:!0});x1.ValueScope=x1.ValueScopeName=x1.Scope=x1.varKinds=x1.UsedValueState=void 0;var m=xw();class i1 extends Error{constructor(w){super(`CodeGen: "code" for ${w} not defined`);this.value=w.value}}var If;(function(w){w[w.Started=0]="Started",w[w.Completed=1]="Completed"})(If||(x1.UsedValueState=If={}));x1.varKinds={const:new m.Name("const"),let:new m.Name("let"),var:new m.Name("var")};class K0{constructor({prefixes:w,parent:f}={}){this._names={},this._prefixes=w,this._parent=f}toName(w){return w instanceof m.Name?w:this.name(w)}name(w){return new m.Name(this._newName(w))}_newName(w){let f=this._names[w]||this._nameGroup(w);return`${w}${f.index++}`}_nameGroup(w){var f,W;if(((W=(f=this._parent)===null||f===void 0?void 0:f._prefixes)===null||W===void 0?void 0:W.has(w))||this._prefixes&&!this._prefixes.has(w))throw new Error(`CodeGen: prefix "${w}" is not allowed in this scope`);return this._names[w]={prefix:w,index:0}}}x1.Scope=K0;class B0 extends m.Name{constructor(w,f){super(f);this.prefix=w}setValue(w,{property:f,itemIndex:W}){this.value=w,this.scopePath=m._`.${new m.Name(f)}[${W}]`}}x1.ValueScopeName=B0;var t8=m._`\n`;class r1 extends K0{constructor(w){super(w);this._values={},this._scope=w.scope,this.opts={...w,_n:w.lines?t8:m.nil}}get(){return this._scope}name(w){return new B0(w,this._newName(w))}value(w,f){var W;if(f.ref===void 0)throw new Error("CodeGen: ref must be passed in value");let Q=this.toName(w),{prefix:Y}=Q,X=(W=f.key)!==null&&W!==void 0?W:f.ref,Z=this._values[Y];if(Z){let G=Z.get(X);if(G)return G}else Z=this._values[Y]=new Map;Z.set(X,Q);let $=this._scope[Y]||(this._scope[Y]=[]),q=$.length;return $[q]=f.ref,Q.setValue(f,{property:Y,itemIndex:q}),Q}getValue(w,f){let W=this._values[w];if(!W)return;return W.get(f)}scopeRefs(w,f=this._values){return this._reduceValues(f,(W)=>{if(W.scopePath===void 0)throw new Error(`CodeGen: name "${W}" has no value`);return m._`${w}${W.scopePath}`})}scopeCode(w=this._values,f,W){return this._reduceValues(w,(Q)=>{if(Q.value===void 0)throw new Error(`CodeGen: name "${Q}" has no value`);return Q.value.code},f,W)}_reduceValues(w,f,W={},Q){let Y=m.nil;for(let X in w){let Z=w[X];if(!Z)continue;let $=W[X]=W[X]||new Map;Z.forEach((q)=>{if($.has(q))return;$.set(q,If.Started);let G=f(q);if(G){let J=this.opts.es5?x1.varKinds.var:x1.varKinds.const;Y=m._`${Y}${J} ${q} = ${G};${this.opts._n}`}else if(G=Q===null||Q===void 0?void 0:Q(q))Y=m._`${Y}${G}${this.opts._n}`;else throw new i1(q);$.set(q,If.Completed)})}return Y}}x1.ValueScope=r1});var T=L((l)=>{Object.defineProperty(l,"__esModule",{value:!0});l.or=l.and=l.not=l.CodeGen=l.operators=l.varKinds=l.ValueScopeName=l.ValueScope=l.Scope=l.Name=l.regexpCode=l.stringify=l.getProperty=l.nil=l.strConcat=l.str=l._=void 0;var E=xw(),a=M0(),Jw=xw();Object.defineProperty(l,"_",{enumerable:!0,get:function(){return Jw._}});Object.defineProperty(l,"str",{enumerable:!0,get:function(){return Jw.str}});Object.defineProperty(l,"strConcat",{enumerable:!0,get:function(){return Jw.strConcat}});Object.defineProperty(l,"nil",{enumerable:!0,get:function(){return Jw.nil}});Object.defineProperty(l,"getProperty",{enumerable:!0,get:function(){return Jw.getProperty}});Object.defineProperty(l,"stringify",{enumerable:!0,get:function(){return Jw.stringify}});Object.defineProperty(l,"regexpCode",{enumerable:!0,get:function(){return Jw.regexpCode}});Object.defineProperty(l,"Name",{enumerable:!0,get:function(){return Jw.Name}});var Rf=M0();Object.defineProperty(l,"Scope",{enumerable:!0,get:function(){return Rf.Scope}});Object.defineProperty(l,"ValueScope",{enumerable:!0,get:function(){return Rf.ValueScope}});Object.defineProperty(l,"ValueScopeName",{enumerable:!0,get:function(){return Rf.ValueScopeName}});Object.defineProperty(l,"varKinds",{enumerable:!0,get:function(){return Rf.varKinds}});l.operators={GT:new E._Code(">"),GTE:new E._Code(">="),LT:new E._Code("<"),LTE:new E._Code("<="),EQ:new E._Code("==="),NEQ:new E._Code("!=="),NOT:new E._Code("!"),OR:new E._Code("||"),AND:new E._Code("&&"),ADD:new E._Code("+")};class zw{optimizeNodes(){return this}optimizeNames(w,f){return this}}class l1 extends zw{constructor(w,f,W){super();this.varKind=w,this.name=f,this.rhs=W}render({es5:w,_n:f}){let W=w?a.varKinds.var:this.varKind,Q=this.rhs===void 0?"":` = ${this.rhs}`;return`${W} ${this.name}${Q};`+f}optimizeNames(w,f){if(!w[this.name.str])return;if(this.rhs)this.rhs=bw(this.rhs,w,f);return this}get names(){return this.rhs instanceof E._CodeOrName?this.rhs.names:{}}}class A0 extends zw{constructor(w,f,W){super();this.lhs=w,this.rhs=f,this.sideEffects=W}render({_n:w}){return`${this.lhs} = ${this.rhs};`+w}optimizeNames(w,f){if(this.lhs instanceof E.Name&&!w[this.lhs.str]&&!this.sideEffects)return;return this.rhs=bw(this.rhs,w,f),this}get names(){let w=this.lhs instanceof E.Name?{}:{...this.lhs.names};return Ef(w,this.rhs)}}class _1 extends A0{constructor(w,f,W,Q){super(w,W,Q);this.op=f}render({_n:w}){return`${this.lhs} ${this.op}= ${this.rhs};`+w}}class p1 extends zw{constructor(w){super();this.label=w,this.names={}}render({_n:w}){return`${this.label}:`+w}}class n1 extends zw{constructor(w){super();this.label=w,this.names={}}render({_n:w}){return`break${this.label?` ${this.label}`:""};`+w}}class c1 extends zw{constructor(w){super();this.error=w}render({_n:w}){return`throw ${this.error};`+w}get names(){return this.error.names}}class s1 extends zw{constructor(w){super();this.code=w}render({_n:w}){return`${this.code};`+w}optimizeNodes(){return`${this.code}`?this:void 0}optimizeNames(w,f){return this.code=bw(this.code,w,f),this}get names(){return this.code instanceof E._CodeOrName?this.code.names:{}}}class Pf extends zw{constructor(w=[]){super();this.nodes=w}render(w){return this.nodes.reduce((f,W)=>f+W.render(w),"")}optimizeNodes(){let{nodes:w}=this,f=w.length;while(f--){let W=w[f].optimizeNodes();if(Array.isArray(W))w.splice(f,1,...W);else if(W)w[f]=W;else w.splice(f,1)}return w.length>0?this:void 0}optimizeNames(w,f){let{nodes:W}=this,Q=W.length;while(Q--){let Y=W[Q];if(Y.optimizeNames(w,f))continue;w7(w,Y.names),W.splice(Q,1)}return W.length>0?this:void 0}get names(){return this.nodes.reduce((w,f)=>Mw(w,f.names),{})}}class Hw extends Pf{render(w){return"{"+w._n+super.render(w)+"}"+w._n}}class d1 extends Pf{}class mw extends Hw{}mw.kind="else";class Xw extends Hw{constructor(w,f){super(f);this.condition=w}render(w){let f=`if(${this.condition})`+super.render(w);if(this.else)f+="else "+this.else.render(w);return f}optimizeNodes(){super.optimizeNodes();let w=this.condition;if(w===!0)return this.nodes;let f=this.else;if(f){let W=f.optimizeNodes();f=this.else=Array.isArray(W)?new mw(W):W}if(f){if(w===!1)return f instanceof Xw?f:f.nodes;if(this.nodes.length)return this;return new Xw(w6(w),f instanceof Xw?[f]:f.nodes)}if(w===!1||!this.nodes.length)return;return this}optimizeNames(w,f){var W;if(this.else=(W=this.else)===null||W===void 0?void 0:W.optimizeNames(w,f),!(super.optimizeNames(w,f)||this.else))return;return this.condition=bw(this.condition,w,f),this}get names(){let w=super.names;if(Ef(w,this.condition),this.else)Mw(w,this.else.names);return w}}Xw.kind="if";class Pw extends Hw{}Pw.kind="for";class t1 extends Pw{constructor(w){super();this.iteration=w}render(w){return`for(${this.iteration})`+super.render(w)}optimizeNames(w,f){if(!super.optimizeNames(w,f))return;return this.iteration=bw(this.iteration,w,f),this}get names(){return Mw(super.names,this.iteration.names)}}class o1 extends Pw{constructor(w,f,W,Q){super();this.varKind=w,this.name=f,this.from=W,this.to=Q}render(w){let f=w.es5?a.varKinds.var:this.varKind,{name:W,from:Q,to:Y}=this;return`for(${f} ${W}=${Q}; ${W}<${Y}; ${W}++)`+super.render(w)}get names(){let w=Ef(super.names,this.from);return Ef(w,this.to)}}class V0 extends Pw{constructor(w,f,W,Q){super();this.loop=w,this.varKind=f,this.name=W,this.iterable=Q}render(w){return`for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(w)}optimizeNames(w,f){if(!super.optimizeNames(w,f))return;return this.iterable=bw(this.iterable,w,f),this}get names(){return Mw(super.names,this.iterable.names)}}class Df extends Hw{constructor(w,f,W){super();this.name=w,this.args=f,this.async=W}render(w){return`${this.async?"async ":""}function ${this.name}(${this.args})`+super.render(w)}}Df.kind="func";class Nf extends Pf{render(w){return"return "+super.render(w)}}Nf.kind="return";class a1 extends Hw{render(w){let f="try"+super.render(w);if(this.catch)f+=this.catch.render(w);if(this.finally)f+=this.finally.render(w);return f}optimizeNodes(){var w,f;return super.optimizeNodes(),(w=this.catch)===null||w===void 0||w.optimizeNodes(),(f=this.finally)===null||f===void 0||f.optimizeNodes(),this}optimizeNames(w,f){var W,Q;return super.optimizeNames(w,f),(W=this.catch)===null||W===void 0||W.optimizeNames(w,f),(Q=this.finally)===null||Q===void 0||Q.optimizeNames(w,f),this}get names(){let w=super.names;if(this.catch)Mw(w,this.catch.names);if(this.finally)Mw(w,this.finally.names);return w}}class jf extends Hw{constructor(w){super();this.error=w}render(w){return`catch(${this.error})`+super.render(w)}}jf.kind="catch";class Tf extends Hw{render(w){return"finally"+super.render(w)}}Tf.kind="finally";class e1{constructor(w,f={}){this._values={},this._blockStarts=[],this._constants={},this.opts={...f,_n:f.lines?`
`:""},this._extScope=w,this._scope=new a.Scope({parent:w}),this._nodes=[new d1]}toString(){return this._root.render(this.opts)}name(w){return this._scope.name(w)}scopeName(w){return this._extScope.name(w)}scopeValue(w,f){let W=this._extScope.value(w,f);return(this._values[W.prefix]||(this._values[W.prefix]=new Set)).add(W),W}getScopeValue(w,f){return this._extScope.getValue(w,f)}scopeRefs(w){return this._extScope.scopeRefs(w,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(w,f,W,Q){let Y=this._scope.toName(f);if(W!==void 0&&Q)this._constants[Y.str]=W;return this._leafNode(new l1(w,Y,W)),Y}const(w,f,W){return this._def(a.varKinds.const,w,f,W)}let(w,f,W){return this._def(a.varKinds.let,w,f,W)}var(w,f,W){return this._def(a.varKinds.var,w,f,W)}assign(w,f,W){return this._leafNode(new A0(w,f,W))}add(w,f){return this._leafNode(new _1(w,l.operators.ADD,f))}code(w){if(typeof w=="function")w();else if(w!==E.nil)this._leafNode(new s1(w));return this}object(...w){let f=["{"];for(let[W,Q]of w){if(f.length>1)f.push(",");if(f.push(W),W!==Q||this.opts.es5)f.push(":"),E.addCodeArg(f,Q)}return f.push("}"),new E._Code(f)}if(w,f,W){if(this._blockNode(new Xw(w)),f&&W)this.code(f).else().code(W).endIf();else if(f)this.code(f).endIf();else if(W)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(w){return this._elseNode(new Xw(w))}else(){return this._elseNode(new mw)}endIf(){return this._endBlockNode(Xw,mw)}_for(w,f){if(this._blockNode(w),f)this.code(f).endFor();return this}for(w,f){return this._for(new t1(w),f)}forRange(w,f,W,Q,Y=this.opts.es5?a.varKinds.var:a.varKinds.let){let X=this._scope.toName(w);return this._for(new o1(Y,X,f,W),()=>Q(X))}forOf(w,f,W,Q=a.varKinds.const){let Y=this._scope.toName(w);if(this.opts.es5){let X=f instanceof E.Name?f:this.var("_arr",f);return this.forRange("_i",0,E._`${X}.length`,(Z)=>{this.var(Y,E._`${X}[${Z}]`),W(Y)})}return this._for(new V0("of",Q,Y,f),()=>W(Y))}forIn(w,f,W,Q=this.opts.es5?a.varKinds.var:a.varKinds.const){if(this.opts.ownProperties)return this.forOf(w,E._`Object.keys(${f})`,W);let Y=this._scope.toName(w);return this._for(new V0("in",Q,Y,f),()=>W(Y))}endFor(){return this._endBlockNode(Pw)}label(w){return this._leafNode(new p1(w))}break(w){return this._leafNode(new n1(w))}return(w){let f=new Nf;if(this._blockNode(f),this.code(w),f.nodes.length!==1)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(Nf)}try(w,f,W){if(!f&&!W)throw new Error('CodeGen: "try" without "catch" and "finally"');let Q=new a1;if(this._blockNode(Q),this.code(w),f){let Y=this.name("e");this._currNode=Q.catch=new jf(Y),f(Y)}if(W)this._currNode=Q.finally=new Tf,this.code(W);return this._endBlockNode(jf,Tf)}throw(w){return this._leafNode(new c1(w))}block(w,f){if(this._blockStarts.push(this._nodes.length),w)this.code(w).endBlock(f);return this}endBlock(w){let f=this._blockStarts.pop();if(f===void 0)throw new Error("CodeGen: not in self-balancing block");let W=this._nodes.length-f;if(W<0||w!==void 0&&W!==w)throw new Error(`CodeGen: wrong number of nodes: ${W} vs ${w} expected`);return this._nodes.length=f,this}func(w,f=E.nil,W,Q){if(this._blockNode(new Df(w,f,W)),Q)this.code(Q).endFunc();return this}endFunc(){return this._endBlockNode(Df)}optimize(w=1){while(w-- >0)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants)}_leafNode(w){return this._currNode.nodes.push(w),this}_blockNode(w){this._currNode.nodes.push(w),this._nodes.push(w)}_endBlockNode(w,f){let W=this._currNode;if(W instanceof w||f&&W instanceof f)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${f?`${w.kind}/${f.kind}`:w.kind}"`)}_elseNode(w){let f=this._currNode;if(!(f instanceof Xw))throw new Error('CodeGen: "else" without "if"');return this._currNode=f.else=w,this}get _root(){return this._nodes[0]}get _currNode(){let w=this._nodes;return w[w.length-1]}set _currNode(w){let f=this._nodes;f[f.length-1]=w}}l.CodeGen=e1;function Mw(w,f){for(let W in f)w[W]=(w[W]||0)+(f[W]||0);return w}function Ef(w,f){return f instanceof E._CodeOrName?Mw(w,f.names):w}function bw(w,f,W){if(w instanceof E.Name)return Q(w);if(!Y(w))return w;return new E._Code(w._items.reduce((X,Z)=>{if(Z instanceof E.Name)Z=Q(Z);if(Z instanceof E._Code)X.push(...Z._items);else X.push(Z);return X},[]));function Q(X){let Z=W[X.str];if(Z===void 0||f[X.str]!==1)return X;return delete f[X.str],Z}function Y(X){return X instanceof E._Code&&X._items.some((Z)=>Z instanceof E.Name&&f[Z.str]===1&&W[Z.str]!==void 0)}}function w7(w,f){for(let W in f)w[W]=(w[W]||0)-(f[W]||0)}function w6(w){return typeof w=="boolean"||typeof w=="number"||w===null?!w:E._`!${L0(w)}`}l.not=w6;var f7=f6(l.operators.AND);function W7(...w){return w.reduce(f7)}l.and=W7;var Q7=f6(l.operators.OR);function Y7(...w){return w.reduce(Q7)}l.or=Y7;function f6(w){return(f,W)=>f===E.nil?W:W===E.nil?f:E._`${L0(f)} ${w} ${L0(W)}`}function L0(w){return w instanceof E.Name?w:E._`(${w})`}});var P=L((J6)=>{Object.defineProperty(J6,"__esModule",{value:!0});J6.checkStrictMode=J6.getErrorPath=J6.Type=J6.useFunc=J6.setEvaluated=J6.evaluatedPropsToName=J6.mergeEvaluated=J6.eachItem=J6.unescapeJsonPointer=J6.escapeJsonPointer=J6.escapeFragment=J6.unescapeFragment=J6.schemaRefOrVal=J6.schemaHasRulesButRef=J6.schemaHasRules=J6.checkUnknownRules=J6.alwaysValidSchema=J6.toHash=void 0;var S=T(),$7=xw();function G7(w){let f={};for(let W of w)f[W]=!0;return f}J6.toHash=G7;function J7(w,f){if(typeof f=="boolean")return f;if(Object.keys(f).length===0)return!0;return X6(w,f),!Z6(f,w.self.RULES.all)}J6.alwaysValidSchema=J7;function X6(w,f=w.schema){let{opts:W,self:Q}=w;if(!W.strictSchema)return;if(typeof f==="boolean")return;let Y=Q.RULES.keywords;for(let X in f)if(!Y[X])G6(w,`unknown keyword: "${X}"`)}J6.checkUnknownRules=X6;function Z6(w,f){if(typeof w=="boolean")return!w;for(let W in w)if(f[W])return!0;return!1}J6.schemaHasRules=Z6;function z7(w,f){if(typeof w=="boolean")return!w;for(let W in w)if(W!=="$ref"&&f.all[W])return!0;return!1}J6.schemaHasRulesButRef=z7;function H7({topSchemaRef:w,schemaPath:f},W,Q,Y){if(!Y){if(typeof W=="number"||typeof W=="boolean")return W;if(typeof W=="string")return S._`${W}`}return S._`${w}${f}${S.getProperty(Q)}`}J6.schemaRefOrVal=H7;function F7(w){return q6(decodeURIComponent(w))}J6.unescapeFragment=F7;function U7(w){return encodeURIComponent(I0(w))}J6.escapeFragment=U7;function I0(w){if(typeof w=="number")return`${w}`;return w.replace(/~/g,"~0").replace(/\//g,"~1")}J6.escapeJsonPointer=I0;function q6(w){return w.replace(/~1/g,"/").replace(/~0/g,"~")}J6.unescapeJsonPointer=q6;function K7(w,f){if(Array.isArray(w))for(let W of w)f(W);else f(w)}J6.eachItem=K7;function Q6({mergeNames:w,mergeToName:f,mergeValues:W,resultToName:Q}){return(Y,X,Z,$)=>{let q=Z===void 0?X:Z instanceof S.Name?(X instanceof S.Name?w(Y,X,Z):f(Y,X,Z),Z):X instanceof S.Name?(f(Y,Z,X),X):W(X,Z);return $===S.Name&&!(q instanceof S.Name)?Q(Y,q):q}}J6.mergeEvaluated={props:Q6({mergeNames:(w,f,W)=>w.if(S._`${W} !== true && ${f} !== undefined`,()=>{w.if(S._`${f} === true`,()=>w.assign(W,!0),()=>w.assign(W,S._`${W} || {}`).code(S._`Object.assign(${W}, ${f})`))}),mergeToName:(w,f,W)=>w.if(S._`${W} !== true`,()=>{if(f===!0)w.assign(W,!0);else w.assign(W,S._`${W} || {}`),D0(w,W,f)}),mergeValues:(w,f)=>w===!0?!0:{...w,...f},resultToName:$6}),items:Q6({mergeNames:(w,f,W)=>w.if(S._`${W} !== true && ${f} !== undefined`,()=>w.assign(W,S._`${f} === true ? true : ${W} > ${f} ? ${W} : ${f}`)),mergeToName:(w,f,W)=>w.if(S._`${W} !== true`,()=>w.assign(W,f===!0?!0:S._`${W} > ${f} ? ${W} : ${f}`)),mergeValues:(w,f)=>w===!0?!0:Math.max(w,f),resultToName:(w,f)=>w.var("items",f)})};function $6(w,f){if(f===!0)return w.var("props",!0);let W=w.var("props",S._`{}`);if(f!==void 0)D0(w,W,f);return W}J6.evaluatedPropsToName=$6;function D0(w,f,W){Object.keys(W).forEach((Q)=>w.assign(S._`${f}${S.getProperty(Q)}`,!0))}J6.setEvaluated=D0;var Y6={};function B7(w,f){return w.scopeValue("func",{ref:f,code:Y6[f.code]||(Y6[f.code]=new $7._Code(f.code))})}J6.useFunc=B7;var O0;(function(w){w[w.Num=0]="Num",w[w.Str=1]="Str"})(O0||(J6.Type=O0={}));function M7(w,f,W){if(w instanceof S.Name){let Q=f===O0.Num;return W?Q?S._`"[" + ${w} + "]"`:S._`"['" + ${w} + "']"`:Q?S._`"/" + ${w}`:S._`"/" + ${w}.replace(/~/g, "~0").replace(/\\//g, "~1")`}return W?S.getProperty(w).toString():"/"+I0(w)}J6.getErrorPath=M7;function G6(w,f,W=w.opts.strictSchema){if(!W)return;if(f=`strict mode: ${f}`,W===!0)throw new Error(f);w.self.logger.warn(f)}J6.checkStrictMode=G6});var Zw=L((H6)=>{Object.defineProperty(H6,"__esModule",{value:!0});var y=T(),v7={data:new y.Name("data"),valCxt:new y.Name("valCxt"),instancePath:new y.Name("instancePath"),parentData:new y.Name("parentData"),parentDataProperty:new y.Name("parentDataProperty"),rootData:new y.Name("rootData"),dynamicAnchors:new y.Name("dynamicAnchors"),vErrors:new y.Name("vErrors"),errors:new y.Name("errors"),this:new y.Name("this"),self:new y.Name("self"),scope:new y.Name("scope"),json:new y.Name("json"),jsonPos:new y.Name("jsonPos"),jsonLen:new y.Name("jsonLen"),jsonPart:new y.Name("jsonPart")};H6.default=v7});var lw=L((B6)=>{Object.defineProperty(B6,"__esModule",{value:!0});B6.extendErrors=B6.resetErrorsCount=B6.reportExtraError=B6.reportError=B6.keyword$DataError=B6.keywordError=void 0;var R=T(),Sf=P(),i=Zw();B6.keywordError={message:({keyword:w})=>R.str`must pass "${w}" keyword validation`};B6.keyword$DataError={message:({keyword:w,schemaType:f})=>f?R.str`"${w}" keyword must be ${f} ($data)`:R.str`"${w}" keyword is invalid ($data)`};function u7(w,f=B6.keywordError,W,Q){let{it:Y}=w,{gen:X,compositeRule:Z,allErrors:$}=Y,q=K6(w,f,W);if(Q!==null&&Q!==void 0?Q:Z||$)F6(X,q);else U6(Y,R._`[${q}]`)}B6.reportError=u7;function g7(w,f=B6.keywordError,W){let{it:Q}=w,{gen:Y,compositeRule:X,allErrors:Z}=Q,$=K6(w,f,W);if(F6(Y,$),!(X||Z))U6(Q,i.default.vErrors)}B6.reportExtraError=g7;function i7(w,f){w.assign(i.default.errors,f),w.if(R._`${i.default.vErrors} !== null`,()=>w.if(f,()=>w.assign(R._`${i.default.vErrors}.length`,f),()=>w.assign(i.default.vErrors,null)))}B6.resetErrorsCount=i7;function r7({gen:w,keyword:f,schemaValue:W,data:Q,errsCount:Y,it:X}){if(Y===void 0)throw new Error("ajv implementation error");let Z=w.name("err");w.forRange("i",Y,i.default.errors,($)=>{if(w.const(Z,R._`${i.default.vErrors}[${$}]`),w.if(R._`${Z}.instancePath === undefined`,()=>w.assign(R._`${Z}.instancePath`,R.strConcat(i.default.instancePath,X.errorPath))),w.assign(R._`${Z}.schemaPath`,R.str`${X.errSchemaPath}/${f}`),X.opts.verbose)w.assign(R._`${Z}.schema`,W),w.assign(R._`${Z}.data`,Q)})}B6.extendErrors=r7;function F6(w,f){let W=w.const("err",f);w.if(R._`${i.default.vErrors} === null`,()=>w.assign(i.default.vErrors,R._`[${W}]`),R._`${i.default.vErrors}.push(${W})`),w.code(R._`${i.default.errors}++`)}function U6(w,f){let{gen:W,validateName:Q,schemaEnv:Y}=w;if(Y.$async)W.throw(R._`new ${w.ValidationError}(${f})`);else W.assign(R._`${Q}.errors`,f),W.return(!1)}var Vw={keyword:new R.Name("keyword"),schemaPath:new R.Name("schemaPath"),params:new R.Name("params"),propertyName:new R.Name("propertyName"),message:new R.Name("message"),schema:new R.Name("schema"),parentSchema:new R.Name("parentSchema")};function K6(w,f,W){let{createErrors:Q}=w.it;if(Q===!1)return R._`{}`;return x7(w,f,W)}function x7(w,f,W={}){let{gen:Q,it:Y}=w,X=[m7(Y,W),l7(w,W)];return _7(w,f,X),Q.object(...X)}function m7({errorPath:w},{instancePath:f}){let W=f?R.str`${w}${Sf.getErrorPath(f,Sf.Type.Str)}`:w;return[i.default.instancePath,R.strConcat(i.default.instancePath,W)]}function l7({keyword:w,it:{errSchemaPath:f}},{schemaPath:W,parentSchema:Q}){let Y=Q?f:R.str`${f}/${w}`;if(W)Y=R.str`${Y}${Sf.getErrorPath(W,Sf.Type.Str)}`;return[Vw.schemaPath,Y]}function _7(w,{params:f,message:W},Q){let{keyword:Y,data:X,schemaValue:Z,it:$}=w,{opts:q,propertyName:G,topSchemaRef:J,schemaPath:z}=$;if(Q.push([Vw.keyword,Y],[Vw.params,typeof f=="function"?f(w):f||R._`{}`]),q.messages)Q.push([Vw.message,typeof W=="function"?W(w):W]);if(q.verbose)Q.push([Vw.schema,Z],[Vw.parentSchema,R._`${J}${z}`],[i.default.data,X]);if(G)Q.push([Vw.propertyName,G])}});var O6=L((L6)=>{Object.defineProperty(L6,"__esModule",{value:!0});L6.boolOrEmptySchema=L6.topBoolOrEmptySchema=void 0;var d7=lw(),t7=T(),o7=Zw(),a7={message:"boolean schema is false"};function e7(w){let{gen:f,schema:W,validateName:Q}=w;if(W===!1)V6(w,!1);else if(typeof W=="object"&&W.$async===!0)f.return(o7.default.data);else f.assign(t7._`${Q}.errors`,null),f.return(!0)}L6.topBoolOrEmptySchema=e7;function wW(w,f){let{gen:W,schema:Q}=w;if(Q===!1)W.var(f,!1),V6(w);else W.var(f,!0)}L6.boolOrEmptySchema=wW;function V6(w,f){let{gen:W,data:Q}=w,Y={gen:W,keyword:"false schema",data:Q,schema:!1,schemaCode:!1,schemaValue:!1,params:{},it:w};d7.reportError(Y,a7,void 0,f)}});var j0=L((I6)=>{Object.defineProperty(I6,"__esModule",{value:!0});I6.getRules=I6.isJSONType=void 0;var WW=["string","number","integer","boolean","null","object","array"],QW=new Set(WW);function YW(w){return typeof w=="string"&&QW.has(w)}I6.isJSONType=YW;function XW(){let w={number:{type:"number",rules:[]},string:{type:"string",rules:[]},array:{type:"array",rules:[]},object:{type:"object",rules:[]}};return{types:{...w,integer:!0,boolean:!0,null:!0},rules:[{rules:[]},w.number,w.string,w.array,w.object],post:{rules:[]},all:{},keywords:{}}}I6.getRules=XW});var T0=L((T6)=>{Object.defineProperty(T6,"__esModule",{value:!0});T6.shouldUseRule=T6.shouldUseGroup=T6.schemaHasRulesForType=void 0;function qW({schema:w,self:f},W){let Q=f.RULES.types[W];return Q&&Q!==!0&&N6(w,Q)}T6.schemaHasRulesForType=qW;function N6(w,f){return f.rules.some((W)=>j6(w,W))}T6.shouldUseGroup=N6;function j6(w,f){var W;return w[f.keyword]!==void 0||((W=f.definition.implements)===null||W===void 0?void 0:W.some((Q)=>w[Q]!==void 0))}T6.shouldUseRule=j6});var _w=L((S6)=>{Object.defineProperty(S6,"__esModule",{value:!0});S6.reportTypeError=S6.checkDataTypes=S6.checkDataType=S6.coerceAndCheckDataType=S6.getJSONTypes=S6.getSchemaTypes=S6.DataType=void 0;var JW=j0(),zW=T0(),HW=lw(),j=T(),R6=P(),Sw;(function(w){w[w.Correct=0]="Correct",w[w.Wrong=1]="Wrong"})(Sw||(S6.DataType=Sw={}));function FW(w){let f=P6(w.type);if(f.includes("null")){if(w.nullable===!1)throw new Error("type: null contradicts nullable: false")}else{if(!f.length&&w.nullable!==void 0)throw new Error('"nullable" cannot be used without "type"');if(w.nullable===!0)f.push("null")}return f}S6.getSchemaTypes=FW;function P6(w){let f=Array.isArray(w)?w:w?[w]:[];if(f.every(JW.isJSONType))return f;throw new Error("type must be JSONType or JSONType[]: "+f.join(","))}S6.getJSONTypes=P6;function UW(w,f){let{gen:W,data:Q,opts:Y}=w,X=KW(f,Y.coerceTypes),Z=f.length>0&&!(X.length===0&&f.length===1&&zW.schemaHasRulesForType(w,f[0]));if(Z){let $=R0(f,Q,Y.strictNumbers,Sw.Wrong);W.if($,()=>{if(X.length)BW(w,f,X);else P0(w)})}return Z}S6.coerceAndCheckDataType=UW;var b6=new Set(["string","number","integer","boolean","null"]);function KW(w,f){return f?w.filter((W)=>b6.has(W)||f==="array"&&W==="array"):[]}function BW(w,f,W){let{gen:Q,data:Y,opts:X}=w,Z=Q.let("dataType",j._`typeof ${Y}`),$=Q.let("coerced",j._`undefined`);if(X.coerceTypes==="array")Q.if(j._`${Z} == 'object' && Array.isArray(${Y}) && ${Y}.length == 1`,()=>Q.assign(Y,j._`${Y}[0]`).assign(Z,j._`typeof ${Y}`).if(R0(f,Y,X.strictNumbers),()=>Q.assign($,Y)));Q.if(j._`${$} !== undefined`);for(let G of W)if(b6.has(G)||G==="array"&&X.coerceTypes==="array")q(G);Q.else(),P0(w),Q.endIf(),Q.if(j._`${$} !== undefined`,()=>{Q.assign(Y,$),MW(w,$)});function q(G){switch(G){case"string":Q.elseIf(j._`${Z} == "number" || ${Z} == "boolean"`).assign($,j._`"" + ${Y}`).elseIf(j._`${Y} === null`).assign($,j._`""`);return;case"number":Q.elseIf(j._`${Z} == "boolean" || ${Y} === null
              || (${Z} == "string" && ${Y} && ${Y} == +${Y})`).assign($,j._`+${Y}`);return;case"integer":Q.elseIf(j._`${Z} === "boolean" || ${Y} === null
              || (${Z} === "string" && ${Y} && ${Y} == +${Y} && !(${Y} % 1))`).assign($,j._`+${Y}`);return;case"boolean":Q.elseIf(j._`${Y} === "false" || ${Y} === 0 || ${Y} === null`).assign($,!1).elseIf(j._`${Y} === "true" || ${Y} === 1`).assign($,!0);return;case"null":Q.elseIf(j._`${Y} === "" || ${Y} === 0 || ${Y} === false`),Q.assign($,null);return;case"array":Q.elseIf(j._`${Z} === "string" || ${Z} === "number"
              || ${Z} === "boolean" || ${Y} === null`).assign($,j._`[${Y}]`)}}}function MW({gen:w,parentData:f,parentDataProperty:W},Q){w.if(j._`${f} !== undefined`,()=>w.assign(j._`${f}[${W}]`,Q))}function E0(w,f,W,Q=Sw.Correct){let Y=Q===Sw.Correct?j.operators.EQ:j.operators.NEQ,X;switch(w){case"null":return j._`${f} ${Y} null`;case"array":X=j._`Array.isArray(${f})`;break;case"object":X=j._`${f} && typeof ${f} == "object" && !Array.isArray(${f})`;break;case"integer":X=Z(j._`!(${f} % 1) && !isNaN(${f})`);break;case"number":X=Z();break;default:return j._`typeof ${f} ${Y} ${w}`}return Q===Sw.Correct?X:j.not(X);function Z($=j.nil){return j.and(j._`typeof ${f} == "number"`,$,W?j._`isFinite(${f})`:j.nil)}}S6.checkDataType=E0;function R0(w,f,W,Q){if(w.length===1)return E0(w[0],f,W,Q);let Y,X=R6.toHash(w);if(X.array&&X.object){let Z=j._`typeof ${f} != "object"`;Y=X.null?Z:j._`!${f} || ${Z}`,delete X.null,delete X.array,delete X.object}else Y=j.nil;if(X.number)delete X.integer;for(let Z in X)Y=j.and(Y,E0(Z,f,W,Q));return Y}S6.checkDataTypes=R0;var VW={message:({schema:w})=>`must be ${w}`,params:({schema:w,schemaValue:f})=>typeof w=="string"?j._`{type: ${w}}`:j._`{type: ${f}}`};function P0(w){let f=LW(w);HW.reportError(f,VW)}S6.reportTypeError=P0;function LW(w){let{gen:f,data:W,schema:Q}=w,Y=R6.schemaRefOrVal(w,Q,"type");return{gen:f,keyword:"type",data:W,schema:Q.type,schemaCode:Y,schemaValue:Y,parentSchema:Q,params:{},it:w}}});var y6=L((k6)=>{Object.defineProperty(k6,"__esModule",{value:!0});k6.assignDefaults=void 0;var hw=T(),TW=P();function EW(w,f){let{properties:W,items:Q}=w.schema;if(f==="object"&&W)for(let Y in W)C6(w,Y,W[Y].default);else if(f==="array"&&Array.isArray(Q))Q.forEach((Y,X)=>C6(w,X,Y.default))}k6.assignDefaults=EW;function C6(w,f,W){let{gen:Q,compositeRule:Y,data:X,opts:Z}=w;if(W===void 0)return;let $=hw._`${X}${hw.getProperty(f)}`;if(Y){TW.checkStrictMode(w,`default is ignored for: ${$}`);return}let q=hw._`${$} === undefined`;if(Z.useDefaults==="empty")q=hw._`${q} || ${$} === null || ${$} === ""`;Q.if(q,hw._`${$} = ${hw.stringify(W)}`)}});var d=L((i6)=>{Object.defineProperty(i6,"__esModule",{value:!0});i6.validateUnion=i6.validateArray=i6.usePattern=i6.callValidateCode=i6.schemaProperties=i6.allSchemaProperties=i6.noPropertyInData=i6.propertyInData=i6.isOwnProperty=i6.hasPropFunc=i6.reportMissingProp=i6.checkMissingProp=i6.checkReportMissingProp=void 0;var h=T(),b0=P(),Fw=Zw(),RW=P();function PW(w,f){let{gen:W,data:Q,it:Y}=w;W.if(h0(W,Q,f,Y.opts.ownProperties),()=>{w.setParams({missingProperty:h._`${f}`},!0),w.error()})}i6.checkReportMissingProp=PW;function bW({gen:w,data:f,it:{opts:W}},Q,Y){return h.or(...Q.map((X)=>h.and(h0(w,f,X,W.ownProperties),h._`${Y} = ${X}`)))}i6.checkMissingProp=bW;function SW(w,f){w.setParams({missingProperty:f},!0),w.error()}i6.reportMissingProp=SW;function u6(w){return w.scopeValue("func",{ref:Object.prototype.hasOwnProperty,code:h._`Object.prototype.hasOwnProperty`})}i6.hasPropFunc=u6;function S0(w,f,W){return h._`${u6(w)}.call(${f}, ${W})`}i6.isOwnProperty=S0;function hW(w,f,W,Q){let Y=h._`${f}${h.getProperty(W)} !== undefined`;return Q?h._`${Y} && ${S0(w,f,W)}`:Y}i6.propertyInData=hW;function h0(w,f,W,Q){let Y=h._`${f}${h.getProperty(W)} === undefined`;return Q?h.or(Y,h.not(S0(w,f,W))):Y}i6.noPropertyInData=h0;function g6(w){return w?Object.keys(w).filter((f)=>f!=="__proto__"):[]}i6.allSchemaProperties=g6;function CW(w,f){return g6(f).filter((W)=>!b0.alwaysValidSchema(w,f[W]))}i6.schemaProperties=CW;function kW({schemaCode:w,data:f,it:{gen:W,topSchemaRef:Q,schemaPath:Y,errorPath:X},it:Z},$,q,G){let J=G?h._`${w}, ${f}, ${Q}${Y}`:f,z=[[Fw.default.instancePath,h.strConcat(Fw.default.instancePath,X)],[Fw.default.parentData,Z.parentData],[Fw.default.parentDataProperty,Z.parentDataProperty],[Fw.default.rootData,Fw.default.rootData]];if(Z.opts.dynamicRef)z.push([Fw.default.dynamicAnchors,Fw.default.dynamicAnchors]);let K=h._`${J}, ${W.object(...z)}`;return q!==h.nil?h._`${$}.call(${q}, ${K})`:h._`${$}(${K})`}i6.callValidateCode=kW;var vW=h._`new RegExp`;function yW({gen:w,it:{opts:f}},W){let Q=f.unicodeRegExp?"u":"",{regExp:Y}=f.code,X=Y(W,Q);return w.scopeValue("pattern",{key:X.toString(),ref:X,code:h._`${Y.code==="new RegExp"?vW:RW.useFunc(w,Y)}(${W}, ${Q})`})}i6.usePattern=yW;function uW(w){let{gen:f,data:W,keyword:Q,it:Y}=w,X=f.name("valid");if(Y.allErrors){let $=f.let("valid",!0);return Z(()=>f.assign($,!1)),$}return f.var(X,!0),Z(()=>f.break()),X;function Z($){let q=f.const("len",h._`${W}.length`);f.forRange("i",0,q,(G)=>{w.subschema({keyword:Q,dataProp:G,dataPropType:b0.Type.Num},X),f.if(h.not(X),$)})}}i6.validateArray=uW;function gW(w){let{gen:f,schema:W,keyword:Q,it:Y}=w;if(!Array.isArray(W))throw new Error("ajv implementation error");if(W.some((q)=>b0.alwaysValidSchema(Y,q))&&!Y.opts.unevaluated)return;let Z=f.let("valid",!1),$=f.name("_valid");f.block(()=>W.forEach((q,G)=>{let J=w.subschema({keyword:Q,schemaProp:G,compositeRule:!0},$);if(f.assign(Z,h._`${Z} || ${$}`),!w.mergeValidEvaluated(J,$))f.if(h.not(Z))})),w.result(Z,()=>w.reset(),()=>w.error(!0))}i6.validateUnion=gW});var p6=L((l6)=>{Object.defineProperty(l6,"__esModule",{value:!0});l6.validateKeywordUsage=l6.validSchemaType=l6.funcKeywordCode=l6.macroKeywordCode=void 0;var r=T(),Lw=Zw(),oW=d(),aW=lw();function eW(w,f){let{gen:W,keyword:Q,schema:Y,parentSchema:X,it:Z}=w,$=f.macro.call(Z.self,Y,X,Z),q=m6(W,Q,$);if(Z.opts.validateSchema!==!1)Z.self.validateSchema($,!0);let G=W.name("valid");w.subschema({schema:$,schemaPath:r.nil,errSchemaPath:`${Z.errSchemaPath}/${Q}`,topSchemaRef:q,compositeRule:!0},G),w.pass(G,()=>w.error(!0))}l6.macroKeywordCode=eW;function wQ(w,f){var W;let{gen:Q,keyword:Y,schema:X,parentSchema:Z,$data:$,it:q}=w;WQ(q,f);let G=!$&&f.compile?f.compile.call(q.self,X,Z,q):f.validate,J=m6(Q,Y,G),z=Q.let("valid");w.block$data(z,K),w.ok((W=f.valid)!==null&&W!==void 0?W:z);function K(){if(f.errors===!1){if(H(),f.modifying)x6(w);B(()=>w.error())}else{let M=f.async?F():U();if(f.modifying)x6(w);B(()=>fQ(w,M))}}function F(){let M=Q.let("ruleErrs",null);return Q.try(()=>H(r._`await `),(I)=>Q.assign(z,!1).if(r._`${I} instanceof ${q.ValidationError}`,()=>Q.assign(M,r._`${I}.errors`),()=>Q.throw(I))),M}function U(){let M=r._`${J}.errors`;return Q.assign(M,null),H(r.nil),M}function H(M=f.async?r._`await `:r.nil){let I=q.opts.passContext?Lw.default.this:Lw.default.self,N=!(("compile"in f)&&!$||f.schema===!1);Q.assign(z,r._`${M}${oW.callValidateCode(w,J,I,N)}`,f.modifying)}function B(M){var I;Q.if(r.not((I=f.valid)!==null&&I!==void 0?I:z),M)}}l6.funcKeywordCode=wQ;function x6(w){let{gen:f,data:W,it:Q}=w;f.if(Q.parentData,()=>f.assign(W,r._`${Q.parentData}[${Q.parentDataProperty}]`))}function fQ(w,f){let{gen:W}=w;W.if(r._`Array.isArray(${f})`,()=>{W.assign(Lw.default.vErrors,r._`${Lw.default.vErrors} === null ? ${f} : ${Lw.default.vErrors}.concat(${f})`).assign(Lw.default.errors,r._`${Lw.default.vErrors}.length`),aW.extendErrors(w)},()=>w.error())}function WQ({schemaEnv:w},f){if(f.async&&!w.$async)throw new Error("async keyword in sync schema")}function m6(w,f,W){if(W===void 0)throw new Error(`keyword "${f}" failed to compile`);return w.scopeValue("keyword",typeof W=="function"?{ref:W}:{ref:W,code:r.stringify(W)})}function QQ(w,f,W=!1){return!f.length||f.some((Q)=>Q==="array"?Array.isArray(w):Q==="object"?w&&typeof w=="object"&&!Array.isArray(w):typeof w==Q||W&&typeof w=="undefined")}l6.validSchemaType=QQ;function YQ({schema:w,opts:f,self:W,errSchemaPath:Q},Y,X){if(Array.isArray(Y.keyword)?!Y.keyword.includes(X):Y.keyword!==X)throw new Error("ajv implementation error");let Z=Y.dependencies;if(Z===null||Z===void 0?void 0:Z.some(($)=>!Object.prototype.hasOwnProperty.call(w,$)))throw new Error(`parent schema must have dependencies of ${X}: ${Z.join(",")}`);if(Y.validateSchema){if(!Y.validateSchema(w[X])){let q=`keyword "${X}" value is invalid at path "${Q}": `+W.errorsText(Y.validateSchema.errors);if(f.validateSchema==="log")W.logger.error(q);else throw new Error(q)}}}l6.validateKeywordUsage=YQ});var d6=L((c6)=>{Object.defineProperty(c6,"__esModule",{value:!0});c6.extendSubschemaMode=c6.extendSubschemaData=c6.getSubschema=void 0;var Ww=T(),n6=P();function $Q(w,{keyword:f,schemaProp:W,schema:Q,schemaPath:Y,errSchemaPath:X,topSchemaRef:Z}){if(f!==void 0&&Q!==void 0)throw new Error('both "keyword" and "schema" passed, only one allowed');if(f!==void 0){let $=w.schema[f];return W===void 0?{schema:$,schemaPath:Ww._`${w.schemaPath}${Ww.getProperty(f)}`,errSchemaPath:`${w.errSchemaPath}/${f}`}:{schema:$[W],schemaPath:Ww._`${w.schemaPath}${Ww.getProperty(f)}${Ww.getProperty(W)}`,errSchemaPath:`${w.errSchemaPath}/${f}/${n6.escapeFragment(W)}`}}if(Q!==void 0){if(Y===void 0||X===void 0||Z===void 0)throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');return{schema:Q,schemaPath:Y,topSchemaRef:Z,errSchemaPath:X}}throw new Error('either "keyword" or "schema" must be passed')}c6.getSubschema=$Q;function GQ(w,f,{dataProp:W,dataPropType:Q,data:Y,dataTypes:X,propertyName:Z}){if(Y!==void 0&&W!==void 0)throw new Error('both "data" and "dataProp" passed, only one allowed');let{gen:$}=f;if(W!==void 0){let{errorPath:G,dataPathArr:J,opts:z}=f,K=$.let("data",Ww._`${f.data}${Ww.getProperty(W)}`,!0);q(K),w.errorPath=Ww.str`${G}${n6.getErrorPath(W,Q,z.jsPropertySyntax)}`,w.parentDataProperty=Ww._`${W}`,w.dataPathArr=[...J,w.parentDataProperty]}if(Y!==void 0){let G=Y instanceof Ww.Name?Y:$.let("data",Y,!0);if(q(G),Z!==void 0)w.propertyName=Z}if(X)w.dataTypes=X;function q(G){w.data=G,w.dataLevel=f.dataLevel+1,w.dataTypes=[],f.definedProperties=new Set,w.parentData=f.data,w.dataNames=[...f.dataNames,G]}}c6.extendSubschemaData=GQ;function JQ(w,{jtdDiscriminator:f,jtdMetadata:W,compositeRule:Q,createErrors:Y,allErrors:X}){if(Q!==void 0)w.compositeRule=Q;if(Y!==void 0)w.createErrors=Y;if(X!==void 0)w.allErrors=X;w.jtdDiscriminator=f,w.jtdMetadata=W}c6.extendSubschemaMode=JQ});var C0=L((T$,t6)=>{t6.exports=function w(f,W){if(f===W)return!0;if(f&&W&&typeof f=="object"&&typeof W=="object"){if(f.constructor!==W.constructor)return!1;var Q,Y,X;if(Array.isArray(f)){if(Q=f.length,Q!=W.length)return!1;for(Y=Q;Y--!==0;)if(!w(f[Y],W[Y]))return!1;return!0}if(f.constructor===RegExp)return f.source===W.source&&f.flags===W.flags;if(f.valueOf!==Object.prototype.valueOf)return f.valueOf()===W.valueOf();if(f.toString!==Object.prototype.toString)return f.toString()===W.toString();if(X=Object.keys(f),Q=X.length,Q!==Object.keys(W).length)return!1;for(Y=Q;Y--!==0;)if(!Object.prototype.hasOwnProperty.call(W,X[Y]))return!1;for(Y=Q;Y--!==0;){var Z=X[Y];if(!w(f[Z],W[Z]))return!1}return!0}return f!==f&&W!==W}});var a6=L((E$,o6)=>{var Uw=o6.exports=function(w,f,W){if(typeof f=="function")W=f,f={};W=f.cb||W;var Q=typeof W=="function"?W:W.pre||function(){},Y=W.post||function(){};hf(f,Q,Y,w,"",w)};Uw.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0};Uw.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0};Uw.propsKeywords={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0};Uw.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0};function hf(w,f,W,Q,Y,X,Z,$,q,G){if(Q&&typeof Q=="object"&&!Array.isArray(Q)){f(Q,Y,X,Z,$,q,G);for(var J in Q){var z=Q[J];if(Array.isArray(z)){if(J in Uw.arrayKeywords)for(var K=0;K<z.length;K++)hf(w,f,W,z[K],Y+"/"+J+"/"+K,X,Y,J,Q,K)}else if(J in Uw.propsKeywords){if(z&&typeof z=="object")for(var F in z)hf(w,f,W,z[F],Y+"/"+J+"/"+FQ(F),X,Y,J,Q,F)}else if(J in Uw.keywords||w.allKeys&&!(J in Uw.skipKeywords))hf(w,f,W,z,Y+"/"+J,X,Y,J,Q)}W(Q,Y,X,Z,$,q,G)}}function FQ(w){return w.replace(/~/g,"~0").replace(/\//g,"~1")}});var pw=L((W5)=>{Object.defineProperty(W5,"__esModule",{value:!0});W5.getSchemaRefs=W5.resolveUrl=W5.normalizeId=W5._getFullPath=W5.getFullPath=W5.inlineRef=void 0;var UQ=P(),KQ=C0(),BQ=a6(),MQ=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]);function VQ(w,f=!0){if(typeof w=="boolean")return!0;if(f===!0)return!k0(w);if(!f)return!1;return e6(w)<=f}W5.inlineRef=VQ;var LQ=new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"]);function k0(w){for(let f in w){if(LQ.has(f))return!0;let W=w[f];if(Array.isArray(W)&&W.some(k0))return!0;if(typeof W=="object"&&k0(W))return!0}return!1}function e6(w){let f=0;for(let W in w){if(W==="$ref")return 1/0;if(f++,MQ.has(W))continue;if(typeof w[W]=="object")UQ.eachItem(w[W],(Q)=>f+=e6(Q));if(f===1/0)return 1/0}return f}function w5(w,f="",W){if(W!==!1)f=Cw(f);let Q=w.parse(f);return f5(w,Q)}W5.getFullPath=w5;function f5(w,f){return w.serialize(f).split("#")[0]+"#"}W5._getFullPath=f5;var AQ=/#\/?$/;function Cw(w){return w?w.replace(AQ,""):""}W5.normalizeId=Cw;function OQ(w,f,W){return W=Cw(W),w.resolve(f,W)}W5.resolveUrl=OQ;var IQ=/^[a-z_][-a-z0-9._]*$/i;function DQ(w,f){if(typeof w=="boolean")return{};let{schemaId:W,uriResolver:Q}=this.opts,Y=Cw(w[W]||f),X={"":Y},Z=w5(Q,Y,!1),$={},q=new Set;return BQ(w,{allKeys:!0},(z,K,F,U)=>{if(U===void 0)return;let H=Z+K,B=X[U];if(typeof z[W]=="string")B=M.call(this,z[W]);I.call(this,z.$anchor),I.call(this,z.$dynamicAnchor),X[K]=B;function M(N){let b=this.opts.uriResolver.resolve;if(N=Cw(B?b(B,N):N),q.has(N))throw J(N);q.add(N);let D=this.refs[N];if(typeof D=="string")D=this.refs[D];if(typeof D=="object")G(z,D.schema,N);else if(N!==Cw(H))if(N[0]==="#")G(z,$[N],N),$[N]=z;else this.refs[N]=H;return N}function I(N){if(typeof N=="string"){if(!IQ.test(N))throw new Error(`invalid anchor "${N}"`);M.call(this,`#${N}`)}}}),$;function G(z,K,F){if(K!==void 0&&!KQ(z,K))throw J(F)}function J(z){return new Error(`reference "${z}" resolves to more than one schema`)}}W5.getSchemaRefs=DQ});var sw=L((V5)=>{Object.defineProperty(V5,"__esModule",{value:!0});V5.getData=V5.KeywordCxt=V5.validateFunctionCode=void 0;var $5=O6(),Y5=_w(),y0=T0(),Cf=_w(),PQ=y6(),cw=p6(),v0=d6(),A=T(),O=Zw(),bQ=pw(),qw=P(),nw=lw();function SQ(w){if(z5(w)){if(H5(w),J5(w)){kQ(w);return}}G5(w,()=>$5.topBoolOrEmptySchema(w))}V5.validateFunctionCode=SQ;function G5({gen:w,validateName:f,schema:W,schemaEnv:Q,opts:Y},X){if(Y.code.es5)w.func(f,A._`${O.default.data}, ${O.default.valCxt}`,Q.$async,()=>{w.code(A._`"use strict"; ${X5(W,Y)}`),CQ(w,Y),w.code(X)});else w.func(f,A._`${O.default.data}, ${hQ(Y)}`,Q.$async,()=>w.code(X5(W,Y)).code(X))}function hQ(w){return A._`{${O.default.instancePath}="", ${O.default.parentData}, ${O.default.parentDataProperty}, ${O.default.rootData}=${O.default.data}${w.dynamicRef?A._`, ${O.default.dynamicAnchors}={}`:A.nil}}={}`}function CQ(w,f){w.if(O.default.valCxt,()=>{if(w.var(O.default.instancePath,A._`${O.default.valCxt}.${O.default.instancePath}`),w.var(O.default.parentData,A._`${O.default.valCxt}.${O.default.parentData}`),w.var(O.default.parentDataProperty,A._`${O.default.valCxt}.${O.default.parentDataProperty}`),w.var(O.default.rootData,A._`${O.default.valCxt}.${O.default.rootData}`),f.dynamicRef)w.var(O.default.dynamicAnchors,A._`${O.default.valCxt}.${O.default.dynamicAnchors}`)},()=>{if(w.var(O.default.instancePath,A._`""`),w.var(O.default.parentData,A._`undefined`),w.var(O.default.parentDataProperty,A._`undefined`),w.var(O.default.rootData,O.default.data),f.dynamicRef)w.var(O.default.dynamicAnchors,A._`{}`)})}function kQ(w){let{schema:f,opts:W,gen:Q}=w;G5(w,()=>{if(W.$comment&&f.$comment)U5(w);if(iQ(w),Q.let(O.default.vErrors,null),Q.let(O.default.errors,0),W.unevaluated)vQ(w);F5(w),mQ(w)});return}function vQ(w){let{gen:f,validateName:W}=w;w.evaluated=f.const("evaluated",A._`${W}.evaluated`),f.if(A._`${w.evaluated}.dynamicProps`,()=>f.assign(A._`${w.evaluated}.props`,A._`undefined`)),f.if(A._`${w.evaluated}.dynamicItems`,()=>f.assign(A._`${w.evaluated}.items`,A._`undefined`))}function X5(w,f){let W=typeof w=="object"&&w[f.schemaId];return W&&(f.code.source||f.code.process)?A._`/*# sourceURL=${W} */`:A.nil}function yQ(w,f){if(z5(w)){if(H5(w),J5(w)){uQ(w,f);return}}$5.boolOrEmptySchema(w,f)}function J5({schema:w,self:f}){if(typeof w=="boolean")return!w;for(let W in w)if(f.RULES.all[W])return!0;return!1}function z5(w){return typeof w.schema!="boolean"}function uQ(w,f){let{schema:W,gen:Q,opts:Y}=w;if(Y.$comment&&W.$comment)U5(w);rQ(w),xQ(w);let X=Q.const("_errs",O.default.errors);F5(w,X),Q.var(f,A._`${X} === ${O.default.errors}`)}function H5(w){qw.checkUnknownRules(w),gQ(w)}function F5(w,f){if(w.opts.jtd)return Z5(w,[],!1,f);let W=Y5.getSchemaTypes(w.schema),Q=Y5.coerceAndCheckDataType(w,W);Z5(w,W,!Q,f)}function gQ(w){let{schema:f,errSchemaPath:W,opts:Q,self:Y}=w;if(f.$ref&&Q.ignoreKeywordsWithRef&&qw.schemaHasRulesButRef(f,Y.RULES))Y.logger.warn(`$ref: keywords ignored in schema at path "${W}"`)}function iQ(w){let{schema:f,opts:W}=w;if(f.default!==void 0&&W.useDefaults&&W.strictSchema)qw.checkStrictMode(w,"default is ignored in the schema root")}function rQ(w){let f=w.schema[w.opts.schemaId];if(f)w.baseId=bQ.resolveUrl(w.opts.uriResolver,w.baseId,f)}function xQ(w){if(w.schema.$async&&!w.schemaEnv.$async)throw new Error("async schema in sync schema")}function U5({gen:w,schemaEnv:f,schema:W,errSchemaPath:Q,opts:Y}){let X=W.$comment;if(Y.$comment===!0)w.code(A._`${O.default.self}.logger.log(${X})`);else if(typeof Y.$comment=="function"){let Z=A.str`${Q}/$comment`,$=w.scopeValue("root",{ref:f.root});w.code(A._`${O.default.self}.opts.$comment(${X}, ${Z}, ${$}.schema)`)}}function mQ(w){let{gen:f,schemaEnv:W,validateName:Q,ValidationError:Y,opts:X}=w;if(W.$async)f.if(A._`${O.default.errors} === 0`,()=>f.return(O.default.data),()=>f.throw(A._`new ${Y}(${O.default.vErrors})`));else{if(f.assign(A._`${Q}.errors`,O.default.vErrors),X.unevaluated)lQ(w);f.return(A._`${O.default.errors} === 0`)}}function lQ({gen:w,evaluated:f,props:W,items:Q}){if(W instanceof A.Name)w.assign(A._`${f}.props`,W);if(Q instanceof A.Name)w.assign(A._`${f}.items`,Q)}function Z5(w,f,W,Q){let{gen:Y,schema:X,data:Z,allErrors:$,opts:q,self:G}=w,{RULES:J}=G;if(X.$ref&&(q.ignoreKeywordsWithRef||!qw.schemaHasRulesButRef(X,J))){Y.block(()=>B5(w,"$ref",J.all.$ref.definition));return}if(!q.jtd)_Q(w,f);Y.block(()=>{for(let K of J.rules)z(K);z(J.post)});function z(K){if(!y0.shouldUseGroup(X,K))return;if(K.type){if(Y.if(Cf.checkDataType(K.type,Z,q.strictNumbers)),q5(w,K),f.length===1&&f[0]===K.type&&W)Y.else(),Cf.reportTypeError(w);Y.endIf()}else q5(w,K);if(!$)Y.if(A._`${O.default.errors} === ${Q||0}`)}}function q5(w,f){let{gen:W,schema:Q,opts:{useDefaults:Y}}=w;if(Y)PQ.assignDefaults(w,f.type);W.block(()=>{for(let X of f.rules)if(y0.shouldUseRule(Q,X))B5(w,X.keyword,X.definition,f.type)})}function _Q(w,f){if(w.schemaEnv.meta||!w.opts.strictTypes)return;if(pQ(w,f),!w.opts.allowUnionTypes)nQ(w,f);cQ(w,w.dataTypes)}function pQ(w,f){if(!f.length)return;if(!w.dataTypes.length){w.dataTypes=f;return}f.forEach((W)=>{if(!K5(w.dataTypes,W))u0(w,`type "${W}" not allowed by context "${w.dataTypes.join(",")}"`)}),dQ(w,f)}function nQ(w,f){if(f.length>1&&!(f.length===2&&f.includes("null")))u0(w,"use allowUnionTypes to allow union type keyword")}function cQ(w,f){let W=w.self.RULES.all;for(let Q in W){let Y=W[Q];if(typeof Y=="object"&&y0.shouldUseRule(w.schema,Y)){let{type:X}=Y.definition;if(X.length&&!X.some((Z)=>sQ(f,Z)))u0(w,`missing type "${X.join(",")}" for keyword "${Q}"`)}}}function sQ(w,f){return w.includes(f)||f==="number"&&w.includes("integer")}function K5(w,f){return w.includes(f)||f==="integer"&&w.includes("number")}function dQ(w,f){let W=[];for(let Q of w.dataTypes)if(K5(f,Q))W.push(Q);else if(f.includes("integer")&&Q==="number")W.push("integer");w.dataTypes=W}function u0(w,f){let W=w.schemaEnv.baseId+w.errSchemaPath;f+=` at "${W}" (strictTypes)`,qw.checkStrictMode(w,f,w.opts.strictTypes)}class g0{constructor(w,f,W){if(cw.validateKeywordUsage(w,f,W),this.gen=w.gen,this.allErrors=w.allErrors,this.keyword=W,this.data=w.data,this.schema=w.schema[W],this.$data=f.$data&&w.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=qw.schemaRefOrVal(w,this.schema,W,this.$data),this.schemaType=f.schemaType,this.parentSchema=w.schema,this.params={},this.it=w,this.def=f,this.$data)this.schemaCode=w.gen.const("vSchema",M5(this.$data,w));else if(this.schemaCode=this.schemaValue,!cw.validSchemaType(this.schema,f.schemaType,f.allowUndefined))throw new Error(`${W} value must be ${JSON.stringify(f.schemaType)}`);if("code"in f?f.trackErrors:f.errors!==!1)this.errsCount=w.gen.const("_errs",O.default.errors)}result(w,f,W){this.failResult(A.not(w),f,W)}failResult(w,f,W){if(this.gen.if(w),W)W();else this.error();if(f){if(this.gen.else(),f(),this.allErrors)this.gen.endIf()}else if(this.allErrors)this.gen.endIf();else this.gen.else()}pass(w,f){this.failResult(A.not(w),void 0,f)}fail(w){if(w===void 0){if(this.error(),!this.allErrors)this.gen.if(!1);return}if(this.gen.if(w),this.error(),this.allErrors)this.gen.endIf();else this.gen.else()}fail$data(w){if(!this.$data)return this.fail(w);let{schemaCode:f}=this;this.fail(A._`${f} !== undefined && (${A.or(this.invalid$data(),w)})`)}error(w,f,W){if(f){this.setParams(f),this._error(w,W),this.setParams({});return}this._error(w,W)}_error(w,f){(w?nw.reportExtraError:nw.reportError)(this,this.def.error,f)}$dataError(){nw.reportError(this,this.def.$dataError||nw.keyword$DataError)}reset(){if(this.errsCount===void 0)throw new Error('add "trackErrors" to keyword definition');nw.resetErrorsCount(this.gen,this.errsCount)}ok(w){if(!this.allErrors)this.gen.if(w)}setParams(w,f){if(f)Object.assign(this.params,w);else this.params=w}block$data(w,f,W=A.nil){this.gen.block(()=>{this.check$data(w,W),f()})}check$data(w=A.nil,f=A.nil){if(!this.$data)return;let{gen:W,schemaCode:Q,schemaType:Y,def:X}=this;if(W.if(A.or(A._`${Q} === undefined`,f)),w!==A.nil)W.assign(w,!0);if(Y.length||X.validateSchema){if(W.elseIf(this.invalid$data()),this.$dataError(),w!==A.nil)W.assign(w,!1)}W.else()}invalid$data(){let{gen:w,schemaCode:f,schemaType:W,def:Q,it:Y}=this;return A.or(X(),Z());function X(){if(W.length){if(!(f instanceof A.Name))throw new Error("ajv implementation error");let $=Array.isArray(W)?W:[W];return A._`${Cf.checkDataTypes($,f,Y.opts.strictNumbers,Cf.DataType.Wrong)}`}return A.nil}function Z(){if(Q.validateSchema){let $=w.scopeValue("validate$data",{ref:Q.validateSchema});return A._`!${$}(${f})`}return A.nil}}subschema(w,f){let W=v0.getSubschema(this.it,w);v0.extendSubschemaData(W,this.it,w),v0.extendSubschemaMode(W,w);let Q={...this.it,...W,items:void 0,props:void 0};return yQ(Q,f),Q}mergeEvaluated(w,f){let{it:W,gen:Q}=this;if(!W.opts.unevaluated)return;if(W.props!==!0&&w.props!==void 0)W.props=qw.mergeEvaluated.props(Q,w.props,W.props,f);if(W.items!==!0&&w.items!==void 0)W.items=qw.mergeEvaluated.items(Q,w.items,W.items,f)}mergeValidEvaluated(w,f){let{it:W,gen:Q}=this;if(W.opts.unevaluated&&(W.props!==!0||W.items!==!0))return Q.if(f,()=>this.mergeEvaluated(w,A.Name)),!0}}V5.KeywordCxt=g0;function B5(w,f,W,Q){let Y=new g0(w,W,f);if("code"in W)W.code(Y,Q);else if(Y.$data&&W.validate)cw.funcKeywordCode(Y,W);else if("macro"in W)cw.macroKeywordCode(Y,W);else if(W.compile||W.validate)cw.funcKeywordCode(Y,W)}var tQ=/^\/(?:[^~]|~0|~1)*$/,oQ=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function M5(w,{dataLevel:f,dataNames:W,dataPathArr:Q}){let Y,X;if(w==="")return O.default.rootData;if(w[0]==="/"){if(!tQ.test(w))throw new Error(`Invalid JSON-pointer: ${w}`);Y=w,X=O.default.rootData}else{let G=oQ.exec(w);if(!G)throw new Error(`Invalid JSON-pointer: ${w}`);let J=+G[1];if(Y=G[2],Y==="#"){if(J>=f)throw new Error(q("property/index",J));return Q[f-J]}if(J>f)throw new Error(q("data",J));if(X=W[f-J],!Y)return X}let Z=X,$=Y.split("/");for(let G of $)if(G)X=A._`${X}${A.getProperty(qw.unescapeJsonPointer(G))}`,Z=A._`${Z} && ${X}`;return Z;function q(G,J){return`Cannot access ${G} ${J} levels up, current level is ${f}`}}V5.getData=M5});var kf=L((O5)=>{Object.defineProperty(O5,"__esModule",{value:!0});class A5 extends Error{constructor(w){super("validation failed");this.errors=w,this.ajv=this.validation=!0}}O5.default=A5});var dw=L((D5)=>{Object.defineProperty(D5,"__esModule",{value:!0});var i0=pw();class I5 extends Error{constructor(w,f,W,Q){super(Q||`can't resolve reference ${W} from id ${f}`);this.missingRef=i0.resolveUrl(w,f,W),this.missingSchema=i0.normalizeId(i0.getFullPath(w,this.missingRef))}}D5.default=I5});var yf=L((T5)=>{Object.defineProperty(T5,"__esModule",{value:!0});T5.resolveSchema=T5.getCompilingSchema=T5.resolveRef=T5.compileSchema=T5.SchemaEnv=void 0;var e=T(),WY=kf(),Aw=Zw(),ww=pw(),N5=P(),QY=sw();class tw{constructor(w){var f;this.refs={},this.dynamicAnchors={};let W;if(typeof w.schema=="object")W=w.schema;this.schema=w.schema,this.schemaId=w.schemaId,this.root=w.root||this,this.baseId=(f=w.baseId)!==null&&f!==void 0?f:ww.normalizeId(W===null||W===void 0?void 0:W[w.schemaId||"$id"]),this.schemaPath=w.schemaPath,this.localRefs=w.localRefs,this.meta=w.meta,this.$async=W===null||W===void 0?void 0:W.$async,this.refs={}}}T5.SchemaEnv=tw;function x0(w){let f=j5.call(this,w);if(f)return f;let W=ww.getFullPath(this.opts.uriResolver,w.root.baseId),{es5:Q,lines:Y}=this.opts.code,{ownProperties:X}=this.opts,Z=new e.CodeGen(this.scope,{es5:Q,lines:Y,ownProperties:X}),$;if(w.$async)$=Z.scopeValue("Error",{ref:WY.default,code:e._`require("ajv/dist/runtime/validation_error").default`});let q=Z.scopeName("validate");w.validateName=q;let G={gen:Z,allErrors:this.opts.allErrors,data:Aw.default.data,parentData:Aw.default.parentData,parentDataProperty:Aw.default.parentDataProperty,dataNames:[Aw.default.data],dataPathArr:[e.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:Z.scopeValue("schema",this.opts.code.source===!0?{ref:w.schema,code:e.stringify(w.schema)}:{ref:w.schema}),validateName:q,ValidationError:$,schema:w.schema,schemaEnv:w,rootId:W,baseId:w.baseId||W,schemaPath:e.nil,errSchemaPath:w.schemaPath||(this.opts.jtd?"":"#"),errorPath:e._`""`,opts:this.opts,self:this},J;try{this._compilations.add(w),QY.validateFunctionCode(G),Z.optimize(this.opts.code.optimize);let z=Z.toString();if(J=`${Z.scopeRefs(Aw.default.scope)}return ${z}`,this.opts.code.process)J=this.opts.code.process(J,w);let F=new Function(`${Aw.default.self}`,`${Aw.default.scope}`,J)(this,this.scope.get());if(this.scope.value(q,{ref:F}),F.errors=null,F.schema=w.schema,F.schemaEnv=w,w.$async)F.$async=!0;if(this.opts.code.source===!0)F.source={validateName:q,validateCode:z,scopeValues:Z._values};if(this.opts.unevaluated){let{props:U,items:H}=G;if(F.evaluated={props:U instanceof e.Name?void 0:U,items:H instanceof e.Name?void 0:H,dynamicProps:U instanceof e.Name,dynamicItems:H instanceof e.Name},F.source)F.source.evaluated=e.stringify(F.evaluated)}return w.validate=F,w}catch(z){if(delete w.validate,delete w.validateName,J)this.logger.error("Error compiling schema, function code:",J);throw z}finally{this._compilations.delete(w)}}T5.compileSchema=x0;function YY(w,f,W){var Q;W=ww.resolveUrl(this.opts.uriResolver,f,W);let Y=w.refs[W];if(Y)return Y;let X=qY.call(this,w,W);if(X===void 0){let Z=(Q=w.localRefs)===null||Q===void 0?void 0:Q[W],{schemaId:$}=this.opts;if(Z)X=new tw({schema:Z,schemaId:$,root:w,baseId:f})}if(X===void 0)return;return w.refs[W]=XY.call(this,X)}T5.resolveRef=YY;function XY(w){if(ww.inlineRef(w.schema,this.opts.inlineRefs))return w.schema;return w.validate?w:x0.call(this,w)}function j5(w){for(let f of this._compilations)if(ZY(f,w))return f}T5.getCompilingSchema=j5;function ZY(w,f){return w.schema===f.schema&&w.root===f.root&&w.baseId===f.baseId}function qY(w,f){let W;while(typeof(W=this.refs[f])=="string")f=W;return W||this.schemas[f]||vf.call(this,w,f)}function vf(w,f){let W=this.opts.uriResolver.parse(f),Q=ww._getFullPath(this.opts.uriResolver,W),Y=ww.getFullPath(this.opts.uriResolver,w.baseId,void 0);if(Object.keys(w.schema).length>0&&Q===Y)return r0.call(this,W,w);let X=ww.normalizeId(Q),Z=this.refs[X]||this.schemas[X];if(typeof Z=="string"){let $=vf.call(this,w,Z);if(typeof($===null||$===void 0?void 0:$.schema)!=="object")return;return r0.call(this,W,$)}if(typeof(Z===null||Z===void 0?void 0:Z.schema)!=="object")return;if(!Z.validate)x0.call(this,Z);if(X===ww.normalizeId(f)){let{schema:$}=Z,{schemaId:q}=this.opts,G=$[q];if(G)Y=ww.resolveUrl(this.opts.uriResolver,Y,G);return new tw({schema:$,schemaId:q,root:w,baseId:Y})}return r0.call(this,W,Z)}T5.resolveSchema=vf;var $Y=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function r0(w,{baseId:f,schema:W,root:Q}){var Y;if(((Y=w.fragment)===null||Y===void 0?void 0:Y[0])!=="/")return;for(let $ of w.fragment.slice(1).split("/")){if(typeof W==="boolean")return;let q=W[N5.unescapeFragment($)];if(q===void 0)return;W=q;let G=typeof W==="object"&&W[this.opts.schemaId];if(!$Y.has($)&&G)f=ww.resolveUrl(this.opts.uriResolver,f,G)}let X;if(typeof W!="boolean"&&W.$ref&&!N5.schemaHasRulesButRef(W,this.RULES)){let $=ww.resolveUrl(this.opts.uriResolver,f,W.$ref);X=vf.call(this,Q,$)}let{schemaId:Z}=this.opts;if(X=X||new tw({schema:W,schemaId:Z,root:Q,baseId:f}),X.schema!==X.root.schema)return X;return}});var R5=L((C$,FY)=>{FY.exports={$id:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON AnySchema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1}});var b5=L((k$,P5)=>{var UY={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,A:10,b:11,B:11,c:12,C:12,d:13,D:13,e:14,E:14,f:15,F:15};P5.exports={HEX:UY}});var g5=L((v$,u5)=>{var{HEX:KY}=b5(),BY=/^(?:(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)$/u;function k5(w){if(y5(w,".")<3)return{host:w,isIPV4:!1};let f=w.match(BY)||[],[W]=f;if(W)return{host:VY(W,"."),isIPV4:!0};else return{host:w,isIPV4:!1}}function m0(w,f=!1){let W="",Q=!0;for(let Y of w){if(KY[Y]===void 0)return;if(Y!=="0"&&Q===!0)Q=!1;if(!Q)W+=Y}if(f&&W.length===0)W="0";return W}function MY(w){let f=0,W={error:!1,address:"",zone:""},Q=[],Y=[],X=!1,Z=!1,$=!1;function q(){if(Y.length){if(X===!1){let G=m0(Y);if(G!==void 0)Q.push(G);else return W.error=!0,!1}Y.length=0}return!0}for(let G=0;G<w.length;G++){let J=w[G];if(J==="["||J==="]")continue;if(J===":"){if(Z===!0)$=!0;if(!q())break;if(f++,Q.push(":"),f>7){W.error=!0;break}if(G-1>=0&&w[G-1]===":")Z=!0;continue}else if(J==="%"){if(!q())break;X=!0}else{Y.push(J);continue}}if(Y.length)if(X)W.zone=Y.join("");else if($)Q.push(Y.join(""));else Q.push(m0(Y));return W.address=Q.join(""),W}function v5(w){if(y5(w,":")<2)return{host:w,isIPV6:!1};let f=MY(w);if(!f.error){let{address:W,address:Q}=f;if(f.zone)W+="%"+f.zone,Q+="%25"+f.zone;return{host:W,escapedHost:Q,isIPV6:!0}}else return{host:w,isIPV6:!1}}function VY(w,f){let W="",Q=!0,Y=w.length;for(let X=0;X<Y;X++){let Z=w[X];if(Z==="0"&&Q){if(X+1<=Y&&w[X+1]===f||X+1===Y)W+=Z,Q=!1}else{if(Z===f)Q=!0;else Q=!1;W+=Z}}return W}function y5(w,f){let W=0;for(let Q=0;Q<w.length;Q++)if(w[Q]===f)W++;return W}var S5=/^\.\.?\//u,h5=/^\/\.(?:\/|$)/u,C5=/^\/\.\.(?:\/|$)/u,LY=/^\/?(?:.|\n)*?(?=\/|$)/u;function AY(w){let f=[];while(w.length)if(w.match(S5))w=w.replace(S5,"");else if(w.match(h5))w=w.replace(h5,"/");else if(w.match(C5))w=w.replace(C5,"/"),f.pop();else if(w==="."||w==="..")w="";else{let W=w.match(LY);if(W){let Q=W[0];w=w.slice(Q.length),f.push(Q)}else throw new Error("Unexpected dot segment condition")}return f.join("")}function OY(w,f){let W=f!==!0?escape:unescape;if(w.scheme!==void 0)w.scheme=W(w.scheme);if(w.userinfo!==void 0)w.userinfo=W(w.userinfo);if(w.host!==void 0)w.host=W(w.host);if(w.path!==void 0)w.path=W(w.path);if(w.query!==void 0)w.query=W(w.query);if(w.fragment!==void 0)w.fragment=W(w.fragment);return w}function IY(w){let f=[];if(w.userinfo!==void 0)f.push(w.userinfo),f.push("@");if(w.host!==void 0){let W=unescape(w.host),Q=k5(W);if(Q.isIPV4)W=Q.host;else{let Y=v5(Q.host);if(Y.isIPV6===!0)W=`[${Y.escapedHost}]`;else W=w.host}f.push(W)}if(typeof w.port==="number"||typeof w.port==="string")f.push(":"),f.push(String(w.port));return f.length?f.join(""):void 0}u5.exports={recomposeAuthority:IY,normalizeComponentEncoding:OY,removeDotSegments:AY,normalizeIPv4:k5,normalizeIPv6:v5,stringArrayToHexStripped:m0}});var _5=L((y$,l5)=>{var DY=/^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}$/iu,NY=/([\da-z][\d\-a-z]{0,31}):((?:[\w!$'()*+,\-.:;=@]|%[\da-f]{2})+)/iu;function i5(w){return typeof w.secure==="boolean"?w.secure:String(w.scheme).toLowerCase()==="wss"}function r5(w){if(!w.host)w.error=w.error||"HTTP URIs must have a host.";return w}function x5(w){let f=String(w.scheme).toLowerCase()==="https";if(w.port===(f?443:80)||w.port==="")w.port=void 0;if(!w.path)w.path="/";return w}function jY(w){return w.secure=i5(w),w.resourceName=(w.path||"/")+(w.query?"?"+w.query:""),w.path=void 0,w.query=void 0,w}function TY(w){if(w.port===(i5(w)?443:80)||w.port==="")w.port=void 0;if(typeof w.secure==="boolean")w.scheme=w.secure?"wss":"ws",w.secure=void 0;if(w.resourceName){let[f,W]=w.resourceName.split("?");w.path=f&&f!=="/"?f:void 0,w.query=W,w.resourceName=void 0}return w.fragment=void 0,w}function EY(w,f){if(!w.path)return w.error="URN can not be parsed",w;let W=w.path.match(NY);if(W){let Q=f.scheme||w.scheme||"urn";w.nid=W[1].toLowerCase(),w.nss=W[2];let Y=`${Q}:${f.nid||w.nid}`,X=l0[Y];if(w.path=void 0,X)w=X.parse(w,f)}else w.error=w.error||"URN can not be parsed.";return w}function RY(w,f){let W=f.scheme||w.scheme||"urn",Q=w.nid.toLowerCase(),Y=`${W}:${f.nid||Q}`,X=l0[Y];if(X)w=X.serialize(w,f);let Z=w,$=w.nss;return Z.path=`${Q||f.nid}:${$}`,f.skipEscape=!0,Z}function PY(w,f){let W=w;if(W.uuid=W.nss,W.nss=void 0,!f.tolerant&&(!W.uuid||!DY.test(W.uuid)))W.error=W.error||"UUID is not valid.";return W}function bY(w){let f=w;return f.nss=(w.uuid||"").toLowerCase(),f}var m5={scheme:"http",domainHost:!0,parse:r5,serialize:x5},SY={scheme:"https",domainHost:m5.domainHost,parse:r5,serialize:x5},uf={scheme:"ws",domainHost:!0,parse:jY,serialize:TY},hY={scheme:"wss",domainHost:uf.domainHost,parse:uf.parse,serialize:uf.serialize},CY={scheme:"urn",parse:EY,serialize:RY,skipNormalize:!0},kY={scheme:"urn:uuid",parse:PY,serialize:bY,skipNormalize:!0},l0={http:m5,https:SY,ws:uf,wss:hY,urn:CY,"urn:uuid":kY};l5.exports=l0});var n5=L((u$,rf)=>{var{normalizeIPv6:vY,normalizeIPv4:yY,removeDotSegments:ow,recomposeAuthority:uY,normalizeComponentEncoding:gf}=g5(),_0=_5();function gY(w,f){if(typeof w==="string")w=Qw($w(w,f),f);else if(typeof w==="object")w=$w(Qw(w,f),f);return w}function iY(w,f,W){let Q=Object.assign({scheme:"null"},W),Y=p5($w(w,Q),$w(f,Q),Q,!0);return Qw(Y,{...Q,skipEscape:!0})}function p5(w,f,W,Q){let Y={};if(!Q)w=$w(Qw(w,W),W),f=$w(Qw(f,W),W);if(W=W||{},!W.tolerant&&f.scheme)Y.scheme=f.scheme,Y.userinfo=f.userinfo,Y.host=f.host,Y.port=f.port,Y.path=ow(f.path||""),Y.query=f.query;else{if(f.userinfo!==void 0||f.host!==void 0||f.port!==void 0)Y.userinfo=f.userinfo,Y.host=f.host,Y.port=f.port,Y.path=ow(f.path||""),Y.query=f.query;else{if(!f.path)if(Y.path=w.path,f.query!==void 0)Y.query=f.query;else Y.query=w.query;else{if(f.path.charAt(0)==="/")Y.path=ow(f.path);else{if((w.userinfo!==void 0||w.host!==void 0||w.port!==void 0)&&!w.path)Y.path="/"+f.path;else if(!w.path)Y.path=f.path;else Y.path=w.path.slice(0,w.path.lastIndexOf("/")+1)+f.path;Y.path=ow(Y.path)}Y.query=f.query}Y.userinfo=w.userinfo,Y.host=w.host,Y.port=w.port}Y.scheme=w.scheme}return Y.fragment=f.fragment,Y}function rY(w,f,W){if(typeof w==="string")w=unescape(w),w=Qw(gf($w(w,W),!0),{...W,skipEscape:!0});else if(typeof w==="object")w=Qw(gf(w,!0),{...W,skipEscape:!0});if(typeof f==="string")f=unescape(f),f=Qw(gf($w(f,W),!0),{...W,skipEscape:!0});else if(typeof f==="object")f=Qw(gf(f,!0),{...W,skipEscape:!0});return w.toLowerCase()===f.toLowerCase()}function Qw(w,f){let W={host:w.host,scheme:w.scheme,userinfo:w.userinfo,port:w.port,path:w.path,query:w.query,nid:w.nid,nss:w.nss,uuid:w.uuid,fragment:w.fragment,reference:w.reference,resourceName:w.resourceName,secure:w.secure,error:""},Q=Object.assign({},f),Y=[],X=_0[(Q.scheme||W.scheme||"").toLowerCase()];if(X&&X.serialize)X.serialize(W,Q);if(W.path!==void 0)if(!Q.skipEscape){if(W.path=escape(W.path),W.scheme!==void 0)W.path=W.path.split("%3A").join(":")}else W.path=unescape(W.path);if(Q.reference!=="suffix"&&W.scheme)Y.push(W.scheme,":");let Z=uY(W);if(Z!==void 0){if(Q.reference!=="suffix")Y.push("//");if(Y.push(Z),W.path&&W.path.charAt(0)!=="/")Y.push("/")}if(W.path!==void 0){let $=W.path;if(!Q.absolutePath&&(!X||!X.absolutePath))$=ow($);if(Z===void 0)$=$.replace(/^\/\//u,"/%2F");Y.push($)}if(W.query!==void 0)Y.push("?",W.query);if(W.fragment!==void 0)Y.push("#",W.fragment);return Y.join("")}var xY=Array.from({length:127},(w,f)=>/[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(f)));function mY(w){let f=0;for(let W=0,Q=w.length;W<Q;++W)if(f=w.charCodeAt(W),f>126||xY[f])return!0;return!1}var lY=/^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u;function $w(w,f){let W=Object.assign({},f),Q={scheme:void 0,userinfo:void 0,host:"",port:void 0,path:"",query:void 0,fragment:void 0},Y=w.indexOf("%")!==-1,X=!1;if(W.reference==="suffix")w=(W.scheme?W.scheme+":":"")+"//"+w;let Z=w.match(lY);if(Z){if(Q.scheme=Z[1],Q.userinfo=Z[3],Q.host=Z[4],Q.port=parseInt(Z[5],10),Q.path=Z[6]||"",Q.query=Z[7],Q.fragment=Z[8],isNaN(Q.port))Q.port=Z[5];if(Q.host){let q=yY(Q.host);if(q.isIPV4===!1){let G=vY(q.host);Q.host=G.host.toLowerCase(),X=G.isIPV6}else Q.host=q.host,X=!0}if(Q.scheme===void 0&&Q.userinfo===void 0&&Q.host===void 0&&Q.port===void 0&&Q.query===void 0&&!Q.path)Q.reference="same-document";else if(Q.scheme===void 0)Q.reference="relative";else if(Q.fragment===void 0)Q.reference="absolute";else Q.reference="uri";if(W.reference&&W.reference!=="suffix"&&W.reference!==Q.reference)Q.error=Q.error||"URI is not a "+W.reference+" reference.";let $=_0[(W.scheme||Q.scheme||"").toLowerCase()];if(!W.unicodeSupport&&(!$||!$.unicodeSupport)){if(Q.host&&(W.domainHost||$&&$.domainHost)&&X===!1&&mY(Q.host))try{Q.host=URL.domainToASCII(Q.host.toLowerCase())}catch(q){Q.error=Q.error||"Host's domain name can not be converted to ASCII: "+q}}if(!$||$&&!$.skipNormalize){if(Y&&Q.scheme!==void 0)Q.scheme=unescape(Q.scheme);if(Y&&Q.host!==void 0)Q.host=unescape(Q.host);if(Q.path)Q.path=escape(unescape(Q.path));if(Q.fragment)Q.fragment=encodeURI(decodeURIComponent(Q.fragment))}if($&&$.parse)$.parse(Q,W)}else Q.error=Q.error||"URI can not be parsed.";return Q}var p0={SCHEMES:_0,normalize:gY,resolve:iY,resolveComponents:p5,equal:rY,serialize:Qw,parse:$w};rf.exports=p0;rf.exports.default=p0;rf.exports.fastUri=p0});var d5=L((s5)=>{Object.defineProperty(s5,"__esModule",{value:!0});var c5=n5();c5.code='require("ajv/dist/runtime/uri").default';s5.default=c5});var Q9=L((Gw)=>{Object.defineProperty(Gw,"__esModule",{value:!0});Gw.CodeGen=Gw.Name=Gw.nil=Gw.stringify=Gw.str=Gw._=Gw.KeywordCxt=void 0;var pY=sw();Object.defineProperty(Gw,"KeywordCxt",{enumerable:!0,get:function(){return pY.KeywordCxt}});var kw=T();Object.defineProperty(Gw,"_",{enumerable:!0,get:function(){return kw._}});Object.defineProperty(Gw,"str",{enumerable:!0,get:function(){return kw.str}});Object.defineProperty(Gw,"stringify",{enumerable:!0,get:function(){return kw.stringify}});Object.defineProperty(Gw,"nil",{enumerable:!0,get:function(){return kw.nil}});Object.defineProperty(Gw,"Name",{enumerable:!0,get:function(){return kw.Name}});Object.defineProperty(Gw,"CodeGen",{enumerable:!0,get:function(){return kw.CodeGen}});var nY=kf(),w9=dw(),cY=j0(),aw=yf(),sY=T(),ew=pw(),xf=_w(),c0=P(),t5=R5(),dY=d5(),f9=(w,f)=>new RegExp(w,f);f9.code="new RegExp";var tY=["removeAdditional","useDefaults","coerceTypes"],oY=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),aY={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},eY={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'},o5=200;function w3(w){var f,W,Q,Y,X,Z,$,q,G,J,z,K,F,U,H,B,M,I,N,b,D,n,Yw,Q0,Y0;let gw=w.strict,X0=(f=w.code)===null||f===void 0?void 0:f.optimize,Y1=X0===!0||X0===void 0?1:X0||0,X1=(Q=(W=w.code)===null||W===void 0?void 0:W.regExp)!==null&&Q!==void 0?Q:f9,W8=(Y=w.uriResolver)!==null&&Y!==void 0?Y:dY.default;return{strictSchema:(Z=(X=w.strictSchema)!==null&&X!==void 0?X:gw)!==null&&Z!==void 0?Z:!0,strictNumbers:(q=($=w.strictNumbers)!==null&&$!==void 0?$:gw)!==null&&q!==void 0?q:!0,strictTypes:(J=(G=w.strictTypes)!==null&&G!==void 0?G:gw)!==null&&J!==void 0?J:"log",strictTuples:(K=(z=w.strictTuples)!==null&&z!==void 0?z:gw)!==null&&K!==void 0?K:"log",strictRequired:(U=(F=w.strictRequired)!==null&&F!==void 0?F:gw)!==null&&U!==void 0?U:!1,code:w.code?{...w.code,optimize:Y1,regExp:X1}:{optimize:Y1,regExp:X1},loopRequired:(H=w.loopRequired)!==null&&H!==void 0?H:o5,loopEnum:(B=w.loopEnum)!==null&&B!==void 0?B:o5,meta:(M=w.meta)!==null&&M!==void 0?M:!0,messages:(I=w.messages)!==null&&I!==void 0?I:!0,inlineRefs:(N=w.inlineRefs)!==null&&N!==void 0?N:!0,schemaId:(b=w.schemaId)!==null&&b!==void 0?b:"$id",addUsedSchema:(D=w.addUsedSchema)!==null&&D!==void 0?D:!0,validateSchema:(n=w.validateSchema)!==null&&n!==void 0?n:!0,validateFormats:(Yw=w.validateFormats)!==null&&Yw!==void 0?Yw:!0,unicodeRegExp:(Q0=w.unicodeRegExp)!==null&&Q0!==void 0?Q0:!0,int32range:(Y0=w.int32range)!==null&&Y0!==void 0?Y0:!0,uriResolver:W8}}class mf{constructor(w={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,w=this.opts={...w,...w3(w)};let{es5:f,lines:W}=this.opts.code;this.scope=new sY.ValueScope({scope:{},prefixes:oY,es5:f,lines:W}),this.logger=Z3(w.logger);let Q=w.validateFormats;if(w.validateFormats=!1,this.RULES=cY.getRules(),a5.call(this,aY,w,"NOT SUPPORTED"),a5.call(this,eY,w,"DEPRECATED","warn"),this._metaOpts=Y3.call(this),w.formats)W3.call(this);if(this._addVocabularies(),this._addDefaultMetaSchema(),w.keywords)Q3.call(this,w.keywords);if(typeof w.meta=="object")this.addMetaSchema(w.meta);f3.call(this),w.validateFormats=Q}_addVocabularies(){this.addKeyword("$async")}_addDefaultMetaSchema(){let{$data:w,meta:f,schemaId:W}=this.opts,Q=t5;if(W==="id")Q={...t5},Q.id=Q.$id,delete Q.$id;if(f&&w)this.addMetaSchema(Q,Q[W],!1)}defaultMeta(){let{meta:w,schemaId:f}=this.opts;return this.opts.defaultMeta=typeof w=="object"?w[f]||w:void 0}validate(w,f){let W;if(typeof w=="string"){if(W=this.getSchema(w),!W)throw new Error(`no schema with key or ref "${w}"`)}else W=this.compile(w);let Q=W(f);if(!("$async"in W))this.errors=W.errors;return Q}compile(w,f){let W=this._addSchema(w,f);return W.validate||this._compileSchemaEnv(W)}compileAsync(w,f){if(typeof this.opts.loadSchema!="function")throw new Error("options.loadSchema should be a function");let{loadSchema:W}=this.opts;return Q.call(this,w,f);async function Q(G,J){await Y.call(this,G.$schema);let z=this._addSchema(G,J);return z.validate||X.call(this,z)}async function Y(G){if(G&&!this.getSchema(G))await Q.call(this,{$ref:G},!0)}async function X(G){try{return this._compileSchemaEnv(G)}catch(J){if(!(J instanceof w9.default))throw J;return Z.call(this,J),await $.call(this,J.missingSchema),X.call(this,G)}}function Z({missingSchema:G,missingRef:J}){if(this.refs[G])throw new Error(`AnySchema ${G} is loaded but ${J} cannot be resolved`)}async function $(G){let J=await q.call(this,G);if(!this.refs[G])await Y.call(this,J.$schema);if(!this.refs[G])this.addSchema(J,G,f)}async function q(G){let J=this._loading[G];if(J)return J;try{return await(this._loading[G]=W(G))}finally{delete this._loading[G]}}}addSchema(w,f,W,Q=this.opts.validateSchema){if(Array.isArray(w)){for(let X of w)this.addSchema(X,void 0,W,Q);return this}let Y;if(typeof w==="object"){let{schemaId:X}=this.opts;if(Y=w[X],Y!==void 0&&typeof Y!="string")throw new Error(`schema ${X} must be string`)}return f=ew.normalizeId(f||Y),this._checkUnique(f),this.schemas[f]=this._addSchema(w,W,f,Q,!0),this}addMetaSchema(w,f,W=this.opts.validateSchema){return this.addSchema(w,f,!0,W),this}validateSchema(w,f){if(typeof w=="boolean")return!0;let W;if(W=w.$schema,W!==void 0&&typeof W!="string")throw new Error("$schema must be a string");if(W=W||this.opts.defaultMeta||this.defaultMeta(),!W)return this.logger.warn("meta-schema not available"),this.errors=null,!0;let Q=this.validate(W,w);if(!Q&&f){let Y="schema is invalid: "+this.errorsText();if(this.opts.validateSchema==="log")this.logger.error(Y);else throw new Error(Y)}return Q}getSchema(w){let f;while(typeof(f=e5.call(this,w))=="string")w=f;if(f===void 0){let{schemaId:W}=this.opts,Q=new aw.SchemaEnv({schema:{},schemaId:W});if(f=aw.resolveSchema.call(this,Q,w),!f)return;this.refs[w]=f}return f.validate||this._compileSchemaEnv(f)}removeSchema(w){if(w instanceof RegExp)return this._removeAllSchemas(this.schemas,w),this._removeAllSchemas(this.refs,w),this;switch(typeof w){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":{let f=e5.call(this,w);if(typeof f=="object")this._cache.delete(f.schema);return delete this.schemas[w],delete this.refs[w],this}case"object":{let f=w;this._cache.delete(f);let W=w[this.opts.schemaId];if(W)W=ew.normalizeId(W),delete this.schemas[W],delete this.refs[W];return this}default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(w){for(let f of w)this.addKeyword(f);return this}addKeyword(w,f){let W;if(typeof w=="string"){if(W=w,typeof f=="object")this.logger.warn("these parameters are deprecated, see docs for addKeyword"),f.keyword=W}else if(typeof w=="object"&&f===void 0){if(f=w,W=f.keyword,Array.isArray(W)&&!W.length)throw new Error("addKeywords: keyword must be string or non-empty array")}else throw new Error("invalid addKeywords parameters");if($3.call(this,W,f),!f)return c0.eachItem(W,(Y)=>n0.call(this,Y)),this;J3.call(this,f);let Q={...f,type:xf.getJSONTypes(f.type),schemaType:xf.getJSONTypes(f.schemaType)};return c0.eachItem(W,Q.type.length===0?(Y)=>n0.call(this,Y,Q):(Y)=>Q.type.forEach((X)=>n0.call(this,Y,Q,X))),this}getKeyword(w){let f=this.RULES.all[w];return typeof f=="object"?f.definition:!!f}removeKeyword(w){let{RULES:f}=this;delete f.keywords[w],delete f.all[w];for(let W of f.rules){let Q=W.rules.findIndex((Y)=>Y.keyword===w);if(Q>=0)W.rules.splice(Q,1)}return this}addFormat(w,f){if(typeof f=="string")f=new RegExp(f);return this.formats[w]=f,this}errorsText(w=this.errors,{separator:f=", ",dataVar:W="data"}={}){if(!w||w.length===0)return"No errors";return w.map((Q)=>`${W}${Q.instancePath} ${Q.message}`).reduce((Q,Y)=>Q+f+Y)}$dataMetaSchema(w,f){let W=this.RULES.all;w=JSON.parse(JSON.stringify(w));for(let Q of f){let Y=Q.split("/").slice(1),X=w;for(let Z of Y)X=X[Z];for(let Z in W){let $=W[Z];if(typeof $!="object")continue;let{$data:q}=$.definition,G=X[Z];if(q&&G)X[Z]=W9(G)}}return w}_removeAllSchemas(w,f){for(let W in w){let Q=w[W];if(!f||f.test(W)){if(typeof Q=="string")delete w[W];else if(Q&&!Q.meta)this._cache.delete(Q.schema),delete w[W]}}}_addSchema(w,f,W,Q=this.opts.validateSchema,Y=this.opts.addUsedSchema){let X,{schemaId:Z}=this.opts;if(typeof w=="object")X=w[Z];else if(this.opts.jtd)throw new Error("schema must be object");else if(typeof w!="boolean")throw new Error("schema must be object or boolean");let $=this._cache.get(w);if($!==void 0)return $;W=ew.normalizeId(X||W);let q=ew.getSchemaRefs.call(this,w,W);if($=new aw.SchemaEnv({schema:w,schemaId:Z,meta:f,baseId:W,localRefs:q}),this._cache.set($.schema,$),Y&&!W.startsWith("#")){if(W)this._checkUnique(W);this.refs[W]=$}if(Q)this.validateSchema(w,!0);return $}_checkUnique(w){if(this.schemas[w]||this.refs[w])throw new Error(`schema with key or id "${w}" already exists`)}_compileSchemaEnv(w){if(w.meta)this._compileMetaSchema(w);else aw.compileSchema.call(this,w);if(!w.validate)throw new Error("ajv implementation error");return w.validate}_compileMetaSchema(w){let f=this.opts;this.opts=this._metaOpts;try{aw.compileSchema.call(this,w)}finally{this.opts=f}}}mf.ValidationError=nY.default;mf.MissingRefError=w9.default;Gw.default=mf;function a5(w,f,W,Q="error"){for(let Y in w){let X=Y;if(X in f)this.logger[Q](`${W}: option ${Y}. ${w[X]}`)}}function e5(w){return w=ew.normalizeId(w),this.schemas[w]||this.refs[w]}function f3(){let w=this.opts.schemas;if(!w)return;if(Array.isArray(w))this.addSchema(w);else for(let f in w)this.addSchema(w[f],f)}function W3(){for(let w in this.opts.formats){let f=this.opts.formats[w];if(f)this.addFormat(w,f)}}function Q3(w){if(Array.isArray(w)){this.addVocabulary(w);return}this.logger.warn("keywords option as map is deprecated, pass array");for(let f in w){let W=w[f];if(!W.keyword)W.keyword=f;this.addKeyword(W)}}function Y3(){let w={...this.opts};for(let f of tY)delete w[f];return w}var X3={log(){},warn(){},error(){}};function Z3(w){if(w===!1)return X3;if(w===void 0)return console;if(w.log&&w.warn&&w.error)return w;throw new Error("logger must implement log, warn and error methods")}var q3=/^[a-z_$][a-z0-9_$:-]*$/i;function $3(w,f){let{RULES:W}=this;if(c0.eachItem(w,(Q)=>{if(W.keywords[Q])throw new Error(`Keyword ${Q} is already defined`);if(!q3.test(Q))throw new Error(`Keyword ${Q} has invalid name`)}),!f)return;if(f.$data&&!(("code"in f)||("validate"in f)))throw new Error('$data keyword must have "code" or "validate" function')}function n0(w,f,W){var Q;let Y=f===null||f===void 0?void 0:f.post;if(W&&Y)throw new Error('keyword with "post" flag cannot have "type"');let{RULES:X}=this,Z=Y?X.post:X.rules.find(({type:q})=>q===W);if(!Z)Z={type:W,rules:[]},X.rules.push(Z);if(X.keywords[w]=!0,!f)return;let $={keyword:w,definition:{...f,type:xf.getJSONTypes(f.type),schemaType:xf.getJSONTypes(f.schemaType)}};if(f.before)G3.call(this,Z,$,f.before);else Z.rules.push($);X.all[w]=$,(Q=f.implements)===null||Q===void 0||Q.forEach((q)=>this.addKeyword(q))}function G3(w,f,W){let Q=w.rules.findIndex((Y)=>Y.keyword===W);if(Q>=0)w.rules.splice(Q,0,f);else w.rules.push(f),this.logger.warn(`rule ${W} is not defined`)}function J3(w){let{metaSchema:f}=w;if(f===void 0)return;if(w.$data&&this.opts.$data)f=W9(f);w.validateSchema=this.compile(f,!0)}var z3={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function W9(w){return{anyOf:[w,z3]}}});var X9=L((Y9)=>{Object.defineProperty(Y9,"__esModule",{value:!0});var U3={keyword:"id",code(){throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')}};Y9.default=U3});var z9=L((G9)=>{Object.defineProperty(G9,"__esModule",{value:!0});G9.callRef=G9.getValidate=void 0;var B3=dw(),Z9=d(),_=T(),vw=Zw(),q9=yf(),lf=P(),M3={keyword:"$ref",schemaType:"string",code(w){let{gen:f,schema:W,it:Q}=w,{baseId:Y,schemaEnv:X,validateName:Z,opts:$,self:q}=Q,{root:G}=X;if((W==="#"||W==="#/")&&Y===G.baseId)return z();let J=q9.resolveRef.call(q,G,Y,W);if(J===void 0)throw new B3.default(Q.opts.uriResolver,Y,W);if(J instanceof q9.SchemaEnv)return K(J);return F(J);function z(){if(X===G)return _f(w,Z,X,X.$async);let U=f.scopeValue("root",{ref:G});return _f(w,_._`${U}.validate`,G,G.$async)}function K(U){let H=$9(w,U);_f(w,H,U,U.$async)}function F(U){let H=f.scopeValue("schema",$.code.source===!0?{ref:U,code:_.stringify(U)}:{ref:U}),B=f.name("valid"),M=w.subschema({schema:U,dataTypes:[],schemaPath:_.nil,topSchemaRef:H,errSchemaPath:W},B);w.mergeEvaluated(M),w.ok(B)}}};function $9(w,f){let{gen:W}=w;return f.validate?W.scopeValue("validate",{ref:f.validate}):_._`${W.scopeValue("wrapper",{ref:f})}.validate`}G9.getValidate=$9;function _f(w,f,W,Q){let{gen:Y,it:X}=w,{allErrors:Z,schemaEnv:$,opts:q}=X,G=q.passContext?vw.default.this:_.nil;if(Q)J();else z();function J(){if(!$.$async)throw new Error("async schema referenced by sync schema");let U=Y.let("valid");Y.try(()=>{if(Y.code(_._`await ${Z9.callValidateCode(w,f,G)}`),F(f),!Z)Y.assign(U,!0)},(H)=>{if(Y.if(_._`!(${H} instanceof ${X.ValidationError})`,()=>Y.throw(H)),K(H),!Z)Y.assign(U,!1)}),w.ok(U)}function z(){w.result(Z9.callValidateCode(w,f,G),()=>F(f),()=>K(f))}function K(U){let H=_._`${U}.errors`;Y.assign(vw.default.vErrors,_._`${vw.default.vErrors} === null ? ${H} : ${vw.default.vErrors}.concat(${H})`),Y.assign(vw.default.errors,_._`${vw.default.vErrors}.length`)}function F(U){var H;if(!X.opts.unevaluated)return;let B=(H=W===null||W===void 0?void 0:W.validate)===null||H===void 0?void 0:H.evaluated;if(X.props!==!0)if(B&&!B.dynamicProps){if(B.props!==void 0)X.props=lf.mergeEvaluated.props(Y,B.props,X.props)}else{let M=Y.var("props",_._`${U}.evaluated.props`);X.props=lf.mergeEvaluated.props(Y,M,X.props,_.Name)}if(X.items!==!0)if(B&&!B.dynamicItems){if(B.items!==void 0)X.items=lf.mergeEvaluated.items(Y,B.items,X.items)}else{let M=Y.var("items",_._`${U}.evaluated.items`);X.items=lf.mergeEvaluated.items(Y,M,X.items,_.Name)}}}G9.callRef=_f;G9.default=M3});var F9=L((H9)=>{Object.defineProperty(H9,"__esModule",{value:!0});var A3=X9(),O3=z9(),I3=["$schema","$id","$defs","$vocabulary",{keyword:"$comment"},"definitions",A3.default,O3.default];H9.default=I3});var K9=L((U9)=>{Object.defineProperty(U9,"__esModule",{value:!0});var pf=T(),Kw=pf.operators,nf={maximum:{okStr:"<=",ok:Kw.LTE,fail:Kw.GT},minimum:{okStr:">=",ok:Kw.GTE,fail:Kw.LT},exclusiveMaximum:{okStr:"<",ok:Kw.LT,fail:Kw.GTE},exclusiveMinimum:{okStr:">",ok:Kw.GT,fail:Kw.LTE}},N3={message:({keyword:w,schemaCode:f})=>pf.str`must be ${nf[w].okStr} ${f}`,params:({keyword:w,schemaCode:f})=>pf._`{comparison: ${nf[w].okStr}, limit: ${f}}`},j3={keyword:Object.keys(nf),type:"number",schemaType:"number",$data:!0,error:N3,code(w){let{keyword:f,data:W,schemaCode:Q}=w;w.fail$data(pf._`${W} ${nf[f].fail} ${Q} || isNaN(${W})`)}};U9.default=j3});var M9=L((B9)=>{Object.defineProperty(B9,"__esModule",{value:!0});var wf=T(),E3={message:({schemaCode:w})=>wf.str`must be multiple of ${w}`,params:({schemaCode:w})=>wf._`{multipleOf: ${w}}`},R3={keyword:"multipleOf",type:"number",schemaType:"number",$data:!0,error:E3,code(w){let{gen:f,data:W,schemaCode:Q,it:Y}=w,X=Y.opts.multipleOfPrecision,Z=f.let("res"),$=X?wf._`Math.abs(Math.round(${Z}) - ${Z}) > 1e-${X}`:wf._`${Z} !== parseInt(${Z})`;w.fail$data(wf._`(${Q} === 0 || (${Z} = ${W}/${Q}, ${$}))`)}};B9.default=R3});var A9=L((L9)=>{Object.defineProperty(L9,"__esModule",{value:!0});function V9(w){let f=w.length,W=0,Q=0,Y;while(Q<f)if(W++,Y=w.charCodeAt(Q++),Y>=55296&&Y<=56319&&Q<f){if(Y=w.charCodeAt(Q),(Y&64512)===56320)Q++}return W}L9.default=V9;V9.code='require("ajv/dist/runtime/ucs2length").default'});var I9=L((O9)=>{Object.defineProperty(O9,"__esModule",{value:!0});var Ow=T(),S3=P(),h3=A9(),C3={message({keyword:w,schemaCode:f}){let W=w==="maxLength"?"more":"fewer";return Ow.str`must NOT have ${W} than ${f} characters`},params:({schemaCode:w})=>Ow._`{limit: ${w}}`},k3={keyword:["maxLength","minLength"],type:"string",schemaType:"number",$data:!0,error:C3,code(w){let{keyword:f,data:W,schemaCode:Q,it:Y}=w,X=f==="maxLength"?Ow.operators.GT:Ow.operators.LT,Z=Y.opts.unicode===!1?Ow._`${W}.length`:Ow._`${S3.useFunc(w.gen,h3.default)}(${W})`;w.fail$data(Ow._`${Z} ${X} ${Q}`)}};O9.default=k3});var N9=L((D9)=>{Object.defineProperty(D9,"__esModule",{value:!0});var y3=d(),cf=T(),u3={message:({schemaCode:w})=>cf.str`must match pattern "${w}"`,params:({schemaCode:w})=>cf._`{pattern: ${w}}`},g3={keyword:"pattern",type:"string",schemaType:"string",$data:!0,error:u3,code(w){let{data:f,$data:W,schema:Q,schemaCode:Y,it:X}=w,Z=X.opts.unicodeRegExp?"u":"",$=W?cf._`(new RegExp(${Y}, ${Z}))`:y3.usePattern(w,Q);w.fail$data(cf._`!${$}.test(${f})`)}};D9.default=g3});var T9=L((j9)=>{Object.defineProperty(j9,"__esModule",{value:!0});var ff=T(),r3={message({keyword:w,schemaCode:f}){let W=w==="maxProperties"?"more":"fewer";return ff.str`must NOT have ${W} than ${f} properties`},params:({schemaCode:w})=>ff._`{limit: ${w}}`},x3={keyword:["maxProperties","minProperties"],type:"object",schemaType:"number",$data:!0,error:r3,code(w){let{keyword:f,data:W,schemaCode:Q}=w,Y=f==="maxProperties"?ff.operators.GT:ff.operators.LT;w.fail$data(ff._`Object.keys(${W}).length ${Y} ${Q}`)}};j9.default=x3});var R9=L((E9)=>{Object.defineProperty(E9,"__esModule",{value:!0});var Wf=d(),Qf=T(),l3=P(),_3={message:({params:{missingProperty:w}})=>Qf.str`must have required property '${w}'`,params:({params:{missingProperty:w}})=>Qf._`{missingProperty: ${w}}`},p3={keyword:"required",type:"object",schemaType:"array",$data:!0,error:_3,code(w){let{gen:f,schema:W,schemaCode:Q,data:Y,$data:X,it:Z}=w,{opts:$}=Z;if(!X&&W.length===0)return;let q=W.length>=$.loopRequired;if(Z.allErrors)G();else J();if($.strictRequired){let F=w.parentSchema.properties,{definedProperties:U}=w.it;for(let H of W)if((F===null||F===void 0?void 0:F[H])===void 0&&!U.has(H)){let B=Z.schemaEnv.baseId+Z.errSchemaPath,M=`required property "${H}" is not defined at "${B}" (strictRequired)`;l3.checkStrictMode(Z,M,Z.opts.strictRequired)}}function G(){if(q||X)w.block$data(Qf.nil,z);else for(let F of W)Wf.checkReportMissingProp(w,F)}function J(){let F=f.let("missing");if(q||X){let U=f.let("valid",!0);w.block$data(U,()=>K(F,U)),w.ok(U)}else f.if(Wf.checkMissingProp(w,W,F)),Wf.reportMissingProp(w,F),f.else()}function z(){f.forOf("prop",Q,(F)=>{w.setParams({missingProperty:F}),f.if(Wf.noPropertyInData(f,Y,F,$.ownProperties),()=>w.error())})}function K(F,U){w.setParams({missingProperty:F}),f.forOf(F,Q,()=>{f.assign(U,Wf.propertyInData(f,Y,F,$.ownProperties)),f.if(Qf.not(U),()=>{w.error(),f.break()})},Qf.nil)}}};E9.default=p3});var b9=L((P9)=>{Object.defineProperty(P9,"__esModule",{value:!0});var Yf=T(),c3={message({keyword:w,schemaCode:f}){let W=w==="maxItems"?"more":"fewer";return Yf.str`must NOT have ${W} than ${f} items`},params:({schemaCode:w})=>Yf._`{limit: ${w}}`},s3={keyword:["maxItems","minItems"],type:"array",schemaType:"number",$data:!0,error:c3,code(w){let{keyword:f,data:W,schemaCode:Q}=w,Y=f==="maxItems"?Yf.operators.GT:Yf.operators.LT;w.fail$data(Yf._`${W}.length ${Y} ${Q}`)}};P9.default=s3});var sf=L((h9)=>{Object.defineProperty(h9,"__esModule",{value:!0});var S9=C0();S9.code='require("ajv/dist/runtime/equal").default';h9.default=S9});var k9=L((C9)=>{Object.defineProperty(C9,"__esModule",{value:!0});var s0=_w(),v=T(),o3=P(),a3=sf(),e3={message:({params:{i:w,j:f}})=>v.str`must NOT have duplicate items (items ## ${f} and ${w} are identical)`,params:({params:{i:w,j:f}})=>v._`{i: ${w}, j: ${f}}`},wX={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:e3,code(w){let{gen:f,data:W,$data:Q,schema:Y,parentSchema:X,schemaCode:Z,it:$}=w;if(!Q&&!Y)return;let q=f.let("valid"),G=X.items?s0.getSchemaTypes(X.items):[];w.block$data(q,J,v._`${Z} === false`),w.ok(q);function J(){let U=f.let("i",v._`${W}.length`),H=f.let("j");w.setParams({i:U,j:H}),f.assign(q,!0),f.if(v._`${U} > 1`,()=>(z()?K:F)(U,H))}function z(){return G.length>0&&!G.some((U)=>U==="object"||U==="array")}function K(U,H){let B=f.name("item"),M=s0.checkDataTypes(G,B,$.opts.strictNumbers,s0.DataType.Wrong),I=f.const("indices",v._`{}`);f.for(v._`;${U}--;`,()=>{if(f.let(B,v._`${W}[${U}]`),f.if(M,v._`continue`),G.length>1)f.if(v._`typeof ${B} == "string"`,v._`${B} += "_"`);f.if(v._`typeof ${I}[${B}] == "number"`,()=>{f.assign(H,v._`${I}[${B}]`),w.error(),f.assign(q,!1).break()}).code(v._`${I}[${B}] = ${U}`)})}function F(U,H){let B=o3.useFunc(f,a3.default),M=f.name("outer");f.label(M).for(v._`;${U}--;`,()=>f.for(v._`${H} = ${U}; ${H}--;`,()=>f.if(v._`${B}(${W}[${U}], ${W}[${H}])`,()=>{w.error(),f.assign(q,!1).break(M)})))}}};C9.default=wX});var y9=L((v9)=>{Object.defineProperty(v9,"__esModule",{value:!0});var d0=T(),WX=P(),QX=sf(),YX={message:"must be equal to constant",params:({schemaCode:w})=>d0._`{allowedValue: ${w}}`},XX={keyword:"const",$data:!0,error:YX,code(w){let{gen:f,data:W,$data:Q,schemaCode:Y,schema:X}=w;if(Q||X&&typeof X=="object")w.fail$data(d0._`!${WX.useFunc(f,QX.default)}(${W}, ${Y})`);else w.fail(d0._`${X} !== ${W}`)}};v9.default=XX});var g9=L((u9)=>{Object.defineProperty(u9,"__esModule",{value:!0});var Xf=T(),qX=P(),$X=sf(),GX={message:"must be equal to one of the allowed values",params:({schemaCode:w})=>Xf._`{allowedValues: ${w}}`},JX={keyword:"enum",schemaType:"array",$data:!0,error:GX,code(w){let{gen:f,data:W,$data:Q,schema:Y,schemaCode:X,it:Z}=w;if(!Q&&Y.length===0)throw new Error("enum must have non-empty array");let $=Y.length>=Z.opts.loopEnum,q,G=()=>q!==null&&q!==void 0?q:q=qX.useFunc(f,$X.default),J;if($||Q)J=f.let("valid"),w.block$data(J,z);else{if(!Array.isArray(Y))throw new Error("ajv implementation error");let F=f.const("vSchema",X);J=Xf.or(...Y.map((U,H)=>K(F,H)))}w.pass(J);function z(){f.assign(J,!1),f.forOf("v",X,(F)=>f.if(Xf._`${G()}(${W}, ${F})`,()=>f.assign(J,!0).break()))}function K(F,U){let H=Y[U];return typeof H==="object"&&H!==null?Xf._`${G()}(${W}, ${F}[${U}])`:Xf._`${W} === ${H}`}}};u9.default=JX});var r9=L((i9)=>{Object.defineProperty(i9,"__esModule",{value:!0});var HX=K9(),FX=M9(),UX=I9(),KX=N9(),BX=T9(),MX=R9(),VX=b9(),LX=k9(),AX=y9(),OX=g9(),IX=[HX.default,FX.default,UX.default,KX.default,BX.default,MX.default,VX.default,LX.default,{keyword:"type",schemaType:["string","array"]},{keyword:"nullable",schemaType:"boolean"},AX.default,OX.default];i9.default=IX});var o0=L((m9)=>{Object.defineProperty(m9,"__esModule",{value:!0});m9.validateAdditionalItems=void 0;var Iw=T(),t0=P(),NX={message:({params:{len:w}})=>Iw.str`must NOT have more than ${w} items`,params:({params:{len:w}})=>Iw._`{limit: ${w}}`},jX={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:NX,code(w){let{parentSchema:f,it:W}=w,{items:Q}=f;if(!Array.isArray(Q)){t0.checkStrictMode(W,'"additionalItems" is ignored when "items" is not an array of schemas');return}x9(w,Q)}};function x9(w,f){let{gen:W,schema:Q,data:Y,keyword:X,it:Z}=w;Z.items=!0;let $=W.const("len",Iw._`${Y}.length`);if(Q===!1)w.setParams({len:f.length}),w.pass(Iw._`${$} <= ${f.length}`);else if(typeof Q=="object"&&!t0.alwaysValidSchema(Z,Q)){let G=W.var("valid",Iw._`${$} <= ${f.length}`);W.if(Iw.not(G),()=>q(G)),w.ok(G)}function q(G){W.forRange("i",f.length,$,(J)=>{if(w.subschema({keyword:X,dataProp:J,dataPropType:t0.Type.Num},G),!Z.allErrors)W.if(Iw.not(G),()=>W.break())})}}m9.validateAdditionalItems=x9;m9.default=jX});var a0=L((n9)=>{Object.defineProperty(n9,"__esModule",{value:!0});n9.validateTuple=void 0;var _9=T(),df=P(),EX=d(),RX={keyword:"items",type:"array",schemaType:["object","array","boolean"],before:"uniqueItems",code(w){let{schema:f,it:W}=w;if(Array.isArray(f))return p9(w,"additionalItems",f);if(W.items=!0,df.alwaysValidSchema(W,f))return;w.ok(EX.validateArray(w))}};function p9(w,f,W=w.schema){let{gen:Q,parentSchema:Y,data:X,keyword:Z,it:$}=w;if(J(Y),$.opts.unevaluated&&W.length&&$.items!==!0)$.items=df.mergeEvaluated.items(Q,W.length,$.items);let q=Q.name("valid"),G=Q.const("len",_9._`${X}.length`);W.forEach((z,K)=>{if(df.alwaysValidSchema($,z))return;Q.if(_9._`${G} > ${K}`,()=>w.subschema({keyword:Z,schemaProp:K,dataProp:K},q)),w.ok(q)});function J(z){let{opts:K,errSchemaPath:F}=$,U=W.length,H=U===z.minItems&&(U===z.maxItems||z[f]===!1);if(K.strictTuples&&!H){let B=`"${Z}" is ${U}-tuple, but minItems or maxItems/${f} are not specified or different at path "${F}"`;df.checkStrictMode($,B,K.strictTuples)}}}n9.validateTuple=p9;n9.default=RX});var d9=L((s9)=>{Object.defineProperty(s9,"__esModule",{value:!0});var bX=a0(),SX={keyword:"prefixItems",type:"array",schemaType:["array"],before:"uniqueItems",code:(w)=>bX.validateTuple(w,"items")};s9.default=SX});var a9=L((o9)=>{Object.defineProperty(o9,"__esModule",{value:!0});var t9=T(),CX=P(),kX=d(),vX=o0(),yX={message:({params:{len:w}})=>t9.str`must NOT have more than ${w} items`,params:({params:{len:w}})=>t9._`{limit: ${w}}`},uX={keyword:"items",type:"array",schemaType:["object","boolean"],before:"uniqueItems",error:yX,code(w){let{schema:f,parentSchema:W,it:Q}=w,{prefixItems:Y}=W;if(Q.items=!0,CX.alwaysValidSchema(Q,f))return;if(Y)vX.validateAdditionalItems(w,Y);else w.ok(kX.validateArray(w))}};o9.default=uX});var w4=L((e9)=>{Object.defineProperty(e9,"__esModule",{value:!0});var t=T(),tf=P(),iX={message:({params:{min:w,max:f}})=>f===void 0?t.str`must contain at least ${w} valid item(s)`:t.str`must contain at least ${w} and no more than ${f} valid item(s)`,params:({params:{min:w,max:f}})=>f===void 0?t._`{minContains: ${w}}`:t._`{minContains: ${w}, maxContains: ${f}}`},rX={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:iX,code(w){let{gen:f,schema:W,parentSchema:Q,data:Y,it:X}=w,Z,$,{minContains:q,maxContains:G}=Q;if(X.opts.next)Z=q===void 0?1:q,$=G;else Z=1;let J=f.const("len",t._`${Y}.length`);if(w.setParams({min:Z,max:$}),$===void 0&&Z===0){tf.checkStrictMode(X,'"minContains" == 0 without "maxContains": "contains" keyword ignored');return}if($!==void 0&&Z>$){tf.checkStrictMode(X,'"minContains" > "maxContains" is always invalid'),w.fail();return}if(tf.alwaysValidSchema(X,W)){let H=t._`${J} >= ${Z}`;if($!==void 0)H=t._`${H} && ${J} <= ${$}`;w.pass(H);return}X.items=!0;let z=f.name("valid");if($===void 0&&Z===1)F(z,()=>f.if(z,()=>f.break()));else if(Z===0){if(f.let(z,!0),$!==void 0)f.if(t._`${Y}.length > 0`,K)}else f.let(z,!1),K();w.result(z,()=>w.reset());function K(){let H=f.name("_valid"),B=f.let("count",0);F(H,()=>f.if(H,()=>U(B)))}function F(H,B){f.forRange("i",0,J,(M)=>{w.subschema({keyword:"contains",dataProp:M,dataPropType:tf.Type.Num,compositeRule:!0},H),B()})}function U(H){if(f.code(t._`${H}++`),$===void 0)f.if(t._`${H} >= ${Z}`,()=>f.assign(z,!0).break());else if(f.if(t._`${H} > ${$}`,()=>f.assign(z,!1).break()),Z===1)f.assign(z,!0);else f.if(t._`${H} >= ${Z}`,()=>f.assign(z,!0))}}};e9.default=rX});var Z4=L((Q4)=>{Object.defineProperty(Q4,"__esModule",{value:!0});Q4.validateSchemaDeps=Q4.validatePropertyDeps=Q4.error=void 0;var e0=T(),mX=P(),Zf=d();Q4.error={message:({params:{property:w,depsCount:f,deps:W}})=>{let Q=f===1?"property":"properties";return e0.str`must have ${Q} ${W} when property ${w} is present`},params:({params:{property:w,depsCount:f,deps:W,missingProperty:Q}})=>e0._`{property: ${w},
    missingProperty: ${Q},
    depsCount: ${f},
    deps: ${W}}`};var lX={keyword:"dependencies",type:"object",schemaType:"object",error:Q4.error,code(w){let[f,W]=_X(w);f4(w,f),W4(w,W)}};function _X({schema:w}){let f={},W={};for(let Q in w){if(Q==="__proto__")continue;let Y=Array.isArray(w[Q])?f:W;Y[Q]=w[Q]}return[f,W]}function f4(w,f=w.schema){let{gen:W,data:Q,it:Y}=w;if(Object.keys(f).length===0)return;let X=W.let("missing");for(let Z in f){let $=f[Z];if($.length===0)continue;let q=Zf.propertyInData(W,Q,Z,Y.opts.ownProperties);if(w.setParams({property:Z,depsCount:$.length,deps:$.join(", ")}),Y.allErrors)W.if(q,()=>{for(let G of $)Zf.checkReportMissingProp(w,G)});else W.if(e0._`${q} && (${Zf.checkMissingProp(w,$,X)})`),Zf.reportMissingProp(w,X),W.else()}}Q4.validatePropertyDeps=f4;function W4(w,f=w.schema){let{gen:W,data:Q,keyword:Y,it:X}=w,Z=W.name("valid");for(let $ in f){if(mX.alwaysValidSchema(X,f[$]))continue;W.if(Zf.propertyInData(W,Q,$,X.opts.ownProperties),()=>{let q=w.subschema({keyword:Y,schemaProp:$},Z);w.mergeValidEvaluated(q,Z)},()=>W.var(Z,!0)),w.ok(Z)}}Q4.validateSchemaDeps=W4;Q4.default=lX});var G4=L(($4)=>{Object.defineProperty($4,"__esModule",{value:!0});var q4=T(),cX=P(),sX={message:"property name must be valid",params:({params:w})=>q4._`{propertyName: ${w.propertyName}}`},dX={keyword:"propertyNames",type:"object",schemaType:["object","boolean"],error:sX,code(w){let{gen:f,schema:W,data:Q,it:Y}=w;if(cX.alwaysValidSchema(Y,W))return;let X=f.name("valid");f.forIn("key",Q,(Z)=>{w.setParams({propertyName:Z}),w.subschema({keyword:"propertyNames",data:Z,dataTypes:["string"],propertyName:Z,compositeRule:!0},X),f.if(q4.not(X),()=>{if(w.error(!0),!Y.allErrors)f.break()})}),w.ok(X)}};$4.default=dX});var w1=L((J4)=>{Object.defineProperty(J4,"__esModule",{value:!0});var of=d(),fw=T(),oX=Zw(),af=P(),aX={message:"must NOT have additional properties",params:({params:w})=>fw._`{additionalProperty: ${w.additionalProperty}}`},eX={keyword:"additionalProperties",type:["object"],schemaType:["boolean","object"],allowUndefined:!0,trackErrors:!0,error:aX,code(w){let{gen:f,schema:W,parentSchema:Q,data:Y,errsCount:X,it:Z}=w;if(!X)throw new Error("ajv implementation error");let{allErrors:$,opts:q}=Z;if(Z.props=!0,q.removeAdditional!=="all"&&af.alwaysValidSchema(Z,W))return;let G=of.allSchemaProperties(Q.properties),J=of.allSchemaProperties(Q.patternProperties);z(),w.ok(fw._`${X} === ${oX.default.errors}`);function z(){f.forIn("key",Y,(B)=>{if(!G.length&&!J.length)U(B);else f.if(K(B),()=>U(B))})}function K(B){let M;if(G.length>8){let I=af.schemaRefOrVal(Z,Q.properties,"properties");M=of.isOwnProperty(f,I,B)}else if(G.length)M=fw.or(...G.map((I)=>fw._`${B} === ${I}`));else M=fw.nil;if(J.length)M=fw.or(M,...J.map((I)=>fw._`${of.usePattern(w,I)}.test(${B})`));return fw.not(M)}function F(B){f.code(fw._`delete ${Y}[${B}]`)}function U(B){if(q.removeAdditional==="all"||q.removeAdditional&&W===!1){F(B);return}if(W===!1){if(w.setParams({additionalProperty:B}),w.error(),!$)f.break();return}if(typeof W=="object"&&!af.alwaysValidSchema(Z,W)){let M=f.name("valid");if(q.removeAdditional==="failing")H(B,M,!1),f.if(fw.not(M),()=>{w.reset(),F(B)});else if(H(B,M),!$)f.if(fw.not(M),()=>f.break())}}function H(B,M,I){let N={keyword:"additionalProperties",dataProp:B,dataPropType:af.Type.Str};if(I===!1)Object.assign(N,{compositeRule:!0,createErrors:!1,allErrors:!1});w.subschema(N,M)}}};J4.default=eX});var U4=L((F4)=>{Object.defineProperty(F4,"__esModule",{value:!0});var fZ=sw(),z4=d(),f1=P(),H4=w1(),WZ={keyword:"properties",type:"object",schemaType:"object",code(w){let{gen:f,schema:W,parentSchema:Q,data:Y,it:X}=w;if(X.opts.removeAdditional==="all"&&Q.additionalProperties===void 0)H4.default.code(new fZ.KeywordCxt(X,H4.default,"additionalProperties"));let Z=z4.allSchemaProperties(W);for(let z of Z)X.definedProperties.add(z);if(X.opts.unevaluated&&Z.length&&X.props!==!0)X.props=f1.mergeEvaluated.props(f,f1.toHash(Z),X.props);let $=Z.filter((z)=>!f1.alwaysValidSchema(X,W[z]));if($.length===0)return;let q=f.name("valid");for(let z of $){if(G(z))J(z);else{if(f.if(z4.propertyInData(f,Y,z,X.opts.ownProperties)),J(z),!X.allErrors)f.else().var(q,!0);f.endIf()}w.it.definedProperties.add(z),w.ok(q)}function G(z){return X.opts.useDefaults&&!X.compositeRule&&W[z].default!==void 0}function J(z){w.subschema({keyword:"properties",schemaProp:z,dataProp:z},q)}}};F4.default=WZ});var L4=L((V4)=>{Object.defineProperty(V4,"__esModule",{value:!0});var K4=d(),ef=T(),B4=P(),M4=P(),YZ={keyword:"patternProperties",type:"object",schemaType:"object",code(w){let{gen:f,schema:W,data:Q,parentSchema:Y,it:X}=w,{opts:Z}=X,$=K4.allSchemaProperties(W),q=$.filter((H)=>B4.alwaysValidSchema(X,W[H]));if($.length===0||q.length===$.length&&(!X.opts.unevaluated||X.props===!0))return;let G=Z.strictSchema&&!Z.allowMatchingProperties&&Y.properties,J=f.name("valid");if(X.props!==!0&&!(X.props instanceof ef.Name))X.props=M4.evaluatedPropsToName(f,X.props);let{props:z}=X;K();function K(){for(let H of $){if(G)F(H);if(X.allErrors)U(H);else f.var(J,!0),U(H),f.if(J)}}function F(H){for(let B in G)if(new RegExp(H).test(B))B4.checkStrictMode(X,`property ${B} matches pattern ${H} (use allowMatchingProperties)`)}function U(H){f.forIn("key",Q,(B)=>{f.if(ef._`${K4.usePattern(w,H)}.test(${B})`,()=>{let M=q.includes(H);if(!M)w.subschema({keyword:"patternProperties",schemaProp:H,dataProp:B,dataPropType:M4.Type.Str},J);if(X.opts.unevaluated&&z!==!0)f.assign(ef._`${z}[${B}]`,!0);else if(!M&&!X.allErrors)f.if(ef.not(J),()=>f.break())})})}}};V4.default=YZ});var O4=L((A4)=>{Object.defineProperty(A4,"__esModule",{value:!0});var ZZ=P(),qZ={keyword:"not",schemaType:["object","boolean"],trackErrors:!0,code(w){let{gen:f,schema:W,it:Q}=w;if(ZZ.alwaysValidSchema(Q,W)){w.fail();return}let Y=f.name("valid");w.subschema({keyword:"not",compositeRule:!0,createErrors:!1,allErrors:!1},Y),w.failResult(Y,()=>w.reset(),()=>w.error())},error:{message:"must NOT be valid"}};A4.default=qZ});var D4=L((I4)=>{Object.defineProperty(I4,"__esModule",{value:!0});var GZ=d(),JZ={keyword:"anyOf",schemaType:"array",trackErrors:!0,code:GZ.validateUnion,error:{message:"must match a schema in anyOf"}};I4.default=JZ});var j4=L((N4)=>{Object.defineProperty(N4,"__esModule",{value:!0});var w0=T(),HZ=P(),FZ={message:"must match exactly one schema in oneOf",params:({params:w})=>w0._`{passingSchemas: ${w.passing}}`},UZ={keyword:"oneOf",schemaType:"array",trackErrors:!0,error:FZ,code(w){let{gen:f,schema:W,parentSchema:Q,it:Y}=w;if(!Array.isArray(W))throw new Error("ajv implementation error");if(Y.opts.discriminator&&Q.discriminator)return;let X=W,Z=f.let("valid",!1),$=f.let("passing",null),q=f.name("_valid");w.setParams({passing:$}),f.block(G),w.result(Z,()=>w.reset(),()=>w.error(!0));function G(){X.forEach((J,z)=>{let K;if(HZ.alwaysValidSchema(Y,J))f.var(q,!0);else K=w.subschema({keyword:"oneOf",schemaProp:z,compositeRule:!0},q);if(z>0)f.if(w0._`${q} && ${Z}`).assign(Z,!1).assign($,w0._`[${$}, ${z}]`).else();f.if(q,()=>{if(f.assign(Z,!0),f.assign($,z),K)w.mergeEvaluated(K,w0.Name)})})}}};N4.default=UZ});var E4=L((T4)=>{Object.defineProperty(T4,"__esModule",{value:!0});var BZ=P(),MZ={keyword:"allOf",schemaType:"array",code(w){let{gen:f,schema:W,it:Q}=w;if(!Array.isArray(W))throw new Error("ajv implementation error");let Y=f.name("valid");W.forEach((X,Z)=>{if(BZ.alwaysValidSchema(Q,X))return;let $=w.subschema({keyword:"allOf",schemaProp:Z},Y);w.ok(Y),w.mergeEvaluated($)})}};T4.default=MZ});var S4=L((b4)=>{Object.defineProperty(b4,"__esModule",{value:!0});var f0=T(),P4=P(),LZ={message:({params:w})=>f0.str`must match "${w.ifClause}" schema`,params:({params:w})=>f0._`{failingKeyword: ${w.ifClause}}`},AZ={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:LZ,code(w){let{gen:f,parentSchema:W,it:Q}=w;if(W.then===void 0&&W.else===void 0)P4.checkStrictMode(Q,'"if" without "then" and "else" is ignored');let Y=R4(Q,"then"),X=R4(Q,"else");if(!Y&&!X)return;let Z=f.let("valid",!0),$=f.name("_valid");if(q(),w.reset(),Y&&X){let J=f.let("ifClause");w.setParams({ifClause:J}),f.if($,G("then",J),G("else",J))}else if(Y)f.if($,G("then"));else f.if(f0.not($),G("else"));w.pass(Z,()=>w.error(!0));function q(){let J=w.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},$);w.mergeEvaluated(J)}function G(J,z){return()=>{let K=w.subschema({keyword:J},$);if(f.assign(Z,$),w.mergeValidEvaluated(K,Z),z)f.assign(z,f0._`${J}`);else w.setParams({ifClause:J})}}}};function R4(w,f){let W=w.schema[f];return W!==void 0&&!P4.alwaysValidSchema(w,W)}b4.default=AZ});var C4=L((h4)=>{Object.defineProperty(h4,"__esModule",{value:!0});var IZ=P(),DZ={keyword:["then","else"],schemaType:["object","boolean"],code({keyword:w,parentSchema:f,it:W}){if(f.if===void 0)IZ.checkStrictMode(W,`"${w}" without "if" is ignored`)}};h4.default=DZ});var v4=L((k4)=>{Object.defineProperty(k4,"__esModule",{value:!0});var jZ=o0(),TZ=d9(),EZ=a0(),RZ=a9(),PZ=w4(),bZ=Z4(),SZ=G4(),hZ=w1(),CZ=U4(),kZ=L4(),vZ=O4(),yZ=D4(),uZ=j4(),gZ=E4(),iZ=S4(),rZ=C4();function xZ(w=!1){let f=[vZ.default,yZ.default,uZ.default,gZ.default,iZ.default,rZ.default,SZ.default,hZ.default,bZ.default,CZ.default,kZ.default];if(w)f.push(TZ.default,RZ.default);else f.push(jZ.default,EZ.default);return f.push(PZ.default),f}k4.default=xZ});var u4=L((y4)=>{Object.defineProperty(y4,"__esModule",{value:!0});var C=T(),lZ={message:({schemaCode:w})=>C.str`must match format "${w}"`,params:({schemaCode:w})=>C._`{format: ${w}}`},_Z={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:lZ,code(w,f){let{gen:W,data:Q,$data:Y,schema:X,schemaCode:Z,it:$}=w,{opts:q,errSchemaPath:G,schemaEnv:J,self:z}=$;if(!q.validateFormats)return;if(Y)K();else F();function K(){let U=W.scopeValue("formats",{ref:z.formats,code:q.code.formats}),H=W.const("fDef",C._`${U}[${Z}]`),B=W.let("fType"),M=W.let("format");W.if(C._`typeof ${H} == "object" && !(${H} instanceof RegExp)`,()=>W.assign(B,C._`${H}.type || "string"`).assign(M,C._`${H}.validate`),()=>W.assign(B,C._`"string"`).assign(M,H)),w.fail$data(C.or(I(),N()));function I(){if(q.strictSchema===!1)return C.nil;return C._`${Z} && !${M}`}function N(){let b=J.$async?C._`(${H}.async ? await ${M}(${Q}) : ${M}(${Q}))`:C._`${M}(${Q})`,D=C._`(typeof ${M} == "function" ? ${b} : ${M}.test(${Q}))`;return C._`${M} && ${M} !== true && ${B} === ${f} && !${D}`}}function F(){let U=z.formats[X];if(!U){I();return}if(U===!0)return;let[H,B,M]=N(U);if(H===f)w.pass(b());function I(){if(q.strictSchema===!1){z.logger.warn(D());return}throw new Error(D());function D(){return`unknown format "${X}" ignored in schema at path "${G}"`}}function N(D){let n=D instanceof RegExp?C.regexpCode(D):q.code.formats?C._`${q.code.formats}${C.getProperty(X)}`:void 0,Yw=W.scopeValue("formats",{key:X,ref:D,code:n});if(typeof D=="object"&&!(D instanceof RegExp))return[D.type||"string",D.validate,C._`${Yw}.validate`];return["string",D,Yw]}function b(){if(typeof U=="object"&&!(U instanceof RegExp)&&U.async){if(!J.$async)throw new Error("async format in sync schema");return C._`await ${M}(${Q})`}return typeof B=="function"?C._`${M}(${Q})`:C._`${M}.test(${Q})`}}}};y4.default=_Z});var i4=L((g4)=>{Object.defineProperty(g4,"__esModule",{value:!0});var nZ=u4(),cZ=[nZ.default];g4.default=cZ});var m4=L((r4)=>{Object.defineProperty(r4,"__esModule",{value:!0});r4.contentVocabulary=r4.metadataVocabulary=void 0;r4.metadataVocabulary=["title","description","default","deprecated","readOnly","writeOnly","examples"];r4.contentVocabulary=["contentMediaType","contentEncoding","contentSchema"]});var p4=L((_4)=>{Object.defineProperty(_4,"__esModule",{value:!0});var tZ=F9(),oZ=r9(),aZ=v4(),eZ=i4(),l4=m4(),wq=[tZ.default,oZ.default,aZ.default(),eZ.default,l4.metadataVocabulary,l4.contentVocabulary];_4.default=wq});var d4=L((c4)=>{Object.defineProperty(c4,"__esModule",{value:!0});c4.DiscrError=void 0;var n4;(function(w){w.Tag="tag",w.Mapping="mapping"})(n4||(c4.DiscrError=n4={}))});var a4=L((o4)=>{Object.defineProperty(o4,"__esModule",{value:!0});var yw=T(),W1=d4(),t4=yf(),Wq=dw(),Qq=P(),Yq={message:({params:{discrError:w,tagName:f}})=>w===W1.DiscrError.Tag?`tag "${f}" must be string`:`value of tag "${f}" must be in oneOf`,params:({params:{discrError:w,tag:f,tagName:W}})=>yw._`{error: ${w}, tag: ${W}, tagValue: ${f}}`},Xq={keyword:"discriminator",type:"object",schemaType:"object",error:Yq,code(w){let{gen:f,data:W,schema:Q,parentSchema:Y,it:X}=w,{oneOf:Z}=Y;if(!X.opts.discriminator)throw new Error("discriminator: requires discriminator option");let $=Q.propertyName;if(typeof $!="string")throw new Error("discriminator: requires propertyName");if(Q.mapping)throw new Error("discriminator: mapping is not supported");if(!Z)throw new Error("discriminator: requires oneOf keyword");let q=f.let("valid",!1),G=f.const("tag",yw._`${W}${yw.getProperty($)}`);f.if(yw._`typeof ${G} == "string"`,()=>J(),()=>w.error(!1,{discrError:W1.DiscrError.Tag,tag:G,tagName:$})),w.ok(q);function J(){let F=K();f.if(!1);for(let U in F)f.elseIf(yw._`${G} === ${U}`),f.assign(q,z(F[U]));f.else(),w.error(!1,{discrError:W1.DiscrError.Mapping,tag:G,tagName:$}),f.endIf()}function z(F){let U=f.name("valid"),H=w.subschema({keyword:"oneOf",schemaProp:F},U);return w.mergeEvaluated(H,yw.Name),U}function K(){var F;let U={},H=M(Y),B=!0;for(let b=0;b<Z.length;b++){let D=Z[b];if((D===null||D===void 0?void 0:D.$ref)&&!Qq.schemaHasRulesButRef(D,X.self.RULES)){let Yw=D.$ref;if(D=t4.resolveRef.call(X.self,X.schemaEnv.root,X.baseId,Yw),D instanceof t4.SchemaEnv)D=D.schema;if(D===void 0)throw new Wq.default(X.opts.uriResolver,X.baseId,Yw)}let n=(F=D===null||D===void 0?void 0:D.properties)===null||F===void 0?void 0:F[$];if(typeof n!="object")throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${$}"`);B=B&&(H||M(D)),I(n,b)}if(!B)throw new Error(`discriminator: "${$}" must be required`);return U;function M({required:b}){return Array.isArray(b)&&b.includes($)}function I(b,D){if(b.const)N(b.const,D);else if(b.enum)for(let n of b.enum)N(n,D);else throw new Error(`discriminator: "properties/${$}" must have "const" or "enum"`)}function N(b,D){if(typeof b!="string"||b in U)throw new Error(`discriminator: "${$}" values must be unique strings`);U[b]=D}}}};o4.default=Xq});var e4=L((SG,qq)=>{qq.exports={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0}});var f8=L((p,Q1)=>{Object.defineProperty(p,"__esModule",{value:!0});p.MissingRefError=p.ValidationError=p.CodeGen=p.Name=p.nil=p.stringify=p.str=p._=p.KeywordCxt=p.Ajv=void 0;var $q=Q9(),Gq=p4(),Jq=a4(),w8=e4(),zq=["/properties"],W0="http://json-schema.org/draft-07/schema";class qf extends $q.default{_addVocabularies(){if(super._addVocabularies(),Gq.default.forEach((w)=>this.addVocabulary(w)),this.opts.discriminator)this.addKeyword(Jq.default)}_addDefaultMetaSchema(){if(super._addDefaultMetaSchema(),!this.opts.meta)return;let w=this.opts.$data?this.$dataMetaSchema(w8,zq):w8;this.addMetaSchema(w,W0,!1),this.refs["http://json-schema.org/schema"]=W0}defaultMeta(){return this.opts.defaultMeta=super.defaultMeta()||(this.getSchema(W0)?W0:void 0)}}p.Ajv=qf;Q1.exports=p=qf;Q1.exports.Ajv=qf;Object.defineProperty(p,"__esModule",{value:!0});p.default=qf;var Hq=sw();Object.defineProperty(p,"KeywordCxt",{enumerable:!0,get:function(){return Hq.KeywordCxt}});var uw=T();Object.defineProperty(p,"_",{enumerable:!0,get:function(){return uw._}});Object.defineProperty(p,"str",{enumerable:!0,get:function(){return uw.str}});Object.defineProperty(p,"stringify",{enumerable:!0,get:function(){return uw.stringify}});Object.defineProperty(p,"nil",{enumerable:!0,get:function(){return uw.nil}});Object.defineProperty(p,"Name",{enumerable:!0,get:function(){return uw.Name}});Object.defineProperty(p,"CodeGen",{enumerable:!0,get:function(){return uw.CodeGen}});var Fq=kf();Object.defineProperty(p,"ValidationError",{enumerable:!0,get:function(){return Fq.default}});var Uq=dw();Object.defineProperty(p,"MissingRefError",{enumerable:!0,get:function(){return Uq.default}})});var P1=Dw(J0(),1),b1=Dw(Uf(),1);var j1=[{scheme:"aaa",description:"Diameter Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6733"}]},{scheme:"aaas",description:"Diameter Protocol with Secure Transport",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6733"}]},{scheme:"about",description:"about",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6694"}]},{scheme:"acap",description:"application configuration access protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2244"}]},{scheme:"acct",description:"acct",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7565"}]},{scheme:"cap",description:"Calendar Access Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4324"}]},{scheme:"cid",description:"content identifier",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2392"}]},{scheme:"coap",description:"coap",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7252"}]},{scheme:"coaps",description:"coaps",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7252"}]},{scheme:"crid",description:"TV-Anytime Content Reference Identifier",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4078"}]},{scheme:"data",description:"data",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2397"}]},{scheme:"dav",description:"dav",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4918"}]},{scheme:"dict",description:"dictionary service protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2229"}]},{scheme:"dns",description:"Domain Name System",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4501"}]},{scheme:"example",description:"example",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7595"}]},{scheme:"file",description:"Host-specific file names",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc1738"}]},{scheme:"ftp",description:"File Transfer Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc1738"}]},{scheme:"geo",description:"Geographic Locations",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5870"}]},{scheme:"go",description:"go",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3368"}]},{scheme:"gopher",description:"The Gopher Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4266"}]},{scheme:"h323",description:"H.323",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3508"}]},{scheme:"http",description:"Hypertext Transfer Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7230"}]},{scheme:"https",description:"Hypertext Transfer Protocol Secure",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7230"}]},{scheme:"iax",description:"Inter-Asterisk eXchange Version 2",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5456"}]},{scheme:"icap",description:"Internet Content Adaptation Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3507"}]},{scheme:"im",description:"Instant Messaging",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3860"}]},{scheme:"imap",description:"internet message access protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5092"}]},{scheme:"info",description:`Information Assets with Identifiers in Public Namespaces. 
       (section 3) defines an "info" registry 
        of public namespaces, which is maintained by NISO and can be accessed 
        from .`,reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4452"}]},{scheme:"ipp",description:"Internet Printing Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3510"}]},{scheme:"ipps",description:"Internet Printing Protocol over HTTPS",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7472"}]},{scheme:"iris",description:"Internet Registry Information Service",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3981"}]},{scheme:"iris.beep",description:"iris.beep",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3983"}]},{scheme:"iris.lwz",description:"iris.lwz",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4993"}]},{scheme:"iris.xpc",description:"iris.xpc",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4992"}]},{scheme:"iris.xpcs",description:"iris.xpcs",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4992"}]},{scheme:"jabber",description:"jabber",reference:[],template:"http://www.iana.org/assignments/uri-schemes/perm/jabber"},{scheme:"ldap",description:"Lightweight Directory Access Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4516"}]},{scheme:"mailto",description:"Electronic mail address",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6068"}]},{scheme:"mid",description:"message identifier",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2392"}]},{scheme:"msrp",description:"Message Session Relay Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4975"}]},{scheme:"msrps",description:"Message Session Relay Protocol Secure",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4975"}]},{scheme:"mtqp",description:"Message Tracking Query Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3887"}]},{scheme:"mupdate",description:"Mailbox Update (MUPDATE) Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3656"}]},{scheme:"news",description:"USENET news",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5538"}]},{scheme:"nfs",description:"network file system protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2224"}]},{scheme:"ni",description:"ni",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6920"}]},{scheme:"nih",description:"nih",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6920"}]},{scheme:"nntp",description:"USENET news using NNTP access",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5538"}]},{scheme:"opaquelocktoken",description:"opaquelocktokent",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4918"}]},{scheme:"pkcs11",description:"PKCS#11",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7512"}]},{scheme:"pop",description:"Post Office Protocol v3",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2384"}]},{scheme:"pres",description:"Presence",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3859"}]},{scheme:"reload",description:"reload",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6940"}]},{scheme:"rtsp",description:"Real-time Streaming Protocol (RTSP)",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2326"},{type:"draft",href:"http://www.iana.org/go/RFC-ietf-mmusic-rfc2326bis-40"}]},{scheme:"rtsps",description:"Real-time Streaming Protocol (RTSP) over TLS",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2326"},{type:"draft",href:"http://www.iana.org/go/RFC-ietf-mmusic-rfc2326bis-40"}]},{scheme:"rtspu",description:"Real-time Streaming Protocol (RTSP) over unreliable datagram transport",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2326"}]},{scheme:"service",description:"service location",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2609"}]},{scheme:"session",description:"session",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6787"}]},{scheme:"shttp",description:"Secure Hypertext Transfer Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2660"}]},{scheme:"sieve",description:"ManageSieve Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5804"}]},{scheme:"sip",description:"session initiation protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3261"}]},{scheme:"sips",description:"secure session initiation protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3261"}]},{scheme:"sms",description:"Short Message Service",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5724"}]},{scheme:"snmp",description:"Simple Network Management Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4088"}]},{scheme:"soap.beep",description:"soap.beep",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4227"}]},{scheme:"soap.beeps",description:"soap.beeps",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4227"}]},{scheme:"stun",description:"stun",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7064"}]},{scheme:"stuns",description:"stuns",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7064"}]},{scheme:"tag",description:"tag",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4151"}]},{scheme:"tel",description:"telephone",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3966"}]},{scheme:"telnet",description:"Reference to interactive sessions",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4248"}]},{scheme:"tftp",description:"Trivial File Transfer Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3617"}]},{scheme:"thismessage",description:"multipart/related relative reference resolution",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2557"}],template:"http://www.iana.org/assignments/uri-schemes/perm/thismessage"},{scheme:"tip",description:"Transaction Internet Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2371"}]},{scheme:"tn3270",description:"Interactive 3270 emulation sessions",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6270"}]},{scheme:"turn",description:"turn",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7065"}]},{scheme:"turns",description:"turns",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7065"}]},{scheme:"tv",description:"TV Broadcasts",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2838"}]},{scheme:"urn",description:"Uniform Resource Names",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2141"},{type:"registry",href:"http://www.iana.org/assignments/urn-namespaces"}]},{scheme:"vemmi",description:"versatile multimedia interface",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2122"}]},{scheme:"vnc",description:"Remote Framebuffer Protocol",reference:[{type:"draft",href:"http://www.iana.org/go/RFC-warden-appsawg-vnc-scheme-10"}]},{scheme:"ws",description:"WebSocket connections",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6455"}]},{scheme:"wss",description:"Encrypted WebSocket connections",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6455"}]},{scheme:"xcon",description:"xcon",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6501"}]},{scheme:"xcon-userid",description:"xcon-userid",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6501"}]},{scheme:"xmlrpc.beep",description:"xmlrpc.beep",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3529"}]},{scheme:"xmlrpc.beeps",description:"xmlrpc.beeps",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc3529"}]},{scheme:"xmpp",description:"Extensible Messaging and Presence Protocol",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5122"}]},{scheme:"z39.50r",description:"Z39.50 Retrieval",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2056"}]},{scheme:"z39.50s",description:"Z39.50 Session",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2056"}]}];var T1=[{scheme:"acr",description:"acr",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/acr"},{scheme:"adiumxtra",description:"adiumxtra",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/adiumxtra"},{scheme:"afp",description:"afp",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/afp"},{scheme:"afs",description:"Andrew File System global file names",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc1738"}]},{scheme:"aim",description:"aim",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/aim"},{scheme:"appdata",description:"appdata",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/appdata"},{scheme:"apt",description:"apt",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/apt"},{scheme:"attachment",description:"attachment",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/attachment"},{scheme:"aw",description:"aw",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/aw"},{scheme:"barion",description:"barion",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/barion"},{scheme:"beshare",description:"beshare",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/beshare"},{scheme:"bitcoin",description:"bitcoin",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/bitcoin"},{scheme:"blob",description:"blob",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/blob"},{scheme:"bolo",description:"bolo",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/bolo"},{scheme:"callto",description:"callto",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/callto"},{scheme:"chrome",description:"chrome",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/chrome"},{scheme:"chrome-extension",description:"chrome-extension",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/chrome-extension"},{scheme:"com-eventbrite-attendee",description:"com-eventbrite-attendee",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/com-eventbrite-attendee"},{scheme:"content",description:"content",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/content"},{scheme:"cvs",description:"cvs",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/cvs"},{scheme:"dis",description:"dis",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/dis"},{scheme:"dlna-playcontainer",description:"dlna-playcontainer",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/dlna-playcontainer"},{scheme:"dlna-playsingle",description:"dlna-playsingle",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/dlna-playsingle"},{scheme:"dntp",description:"dntp",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/dntp"},{scheme:"dtn",description:"DTNRG research and development",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5050"}]},{scheme:"dvb",description:"dvb",reference:[{type:"draft",href:"http://www.iana.org/go/draft-mcroberts-uri-dvb"}]},{scheme:"ed2k",description:"ed2k",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ed2k"},{scheme:"facetime",description:"facetime",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/facetime"},{scheme:"feed",description:"feed",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/feed"},{scheme:"feedready",description:"feedready",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/feedready"},{scheme:"finger",description:"finger",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/finger"},{scheme:"fish",description:"fish",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/fish"},{scheme:"gg",description:"gg",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/gg"},{scheme:"git",description:"git",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/git"},{scheme:"gizmoproject",description:"gizmoproject",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/gizmoproject"},{scheme:"gtalk",description:"gtalk",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/gtalk"},{scheme:"ham",description:"ham",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7046"}]},{scheme:"hcp",description:"hcp",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/hcp"},{scheme:"icon",description:"icon",reference:[{type:"draft",href:"http://www.iana.org/go/draft-lafayette-icon-uri-scheme"}]},{scheme:"iotdisco",description:"iotdisco",reference:[{type:"uri",href:"http://www.iana.org/assignments/uri-schemes/prov/iotdisco.pdf"}],template:"http://www.iana.org/assignments/uri-schemes/prov/iotdisco"},{scheme:"ipn",description:"ipn",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6260"}]},{scheme:"irc",description:"irc",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/irc"},{scheme:"irc6",description:"irc6",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/irc6"},{scheme:"ircs",description:"ircs",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ircs"},{scheme:"isostore",description:"isostore",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/isostore"},{scheme:"itms",description:"itms",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/itms"},{scheme:"jar",description:"jar",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/jar"},{scheme:"jms",description:"Java Message Service",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6167"}]},{scheme:"keyparc",description:"keyparc",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/keyparc"},{scheme:"lastfm",description:"lastfm",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/lastfm"},{scheme:"ldaps",description:"ldaps",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ldaps"},{scheme:"magnet",description:"magnet",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/magnet"},{scheme:"maps",description:"maps",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/maps"},{scheme:"market",description:"market",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/market"},{scheme:"message",description:"message",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/message"},{scheme:"mms",description:"mms",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/mms"},{scheme:"ms-access",description:"ms-access",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-access"},{scheme:"ms-drive-to",description:"ms-drive-to",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-drive-to"},{scheme:"ms-enrollment",description:"ms-enrollment",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-enrollment"},{scheme:"ms-excel",description:"ms-excel",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-excel"},{scheme:"ms-getoffice",description:"ms-getoffice",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-getoffice"},{scheme:"ms-help",description:"ms-help",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-help"},{scheme:"ms-infopath",description:"ms-infopath",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-infopath"},{scheme:"ms-media-stream-id",description:"ms-media-stream-id",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-media-stream-id"},{scheme:"ms-powerpoint",description:"ms-powerpoint",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-powerpoint"},{scheme:"ms-project",description:"ms-project",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-project"},{scheme:"ms-publisher",description:"ms-publisher",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-publisher"},{scheme:"ms-search-repair",description:"ms-search-repair",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-search-repair"},{scheme:"ms-secondary-screen-controller",description:"ms-secondary-screen-controller",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-secondary-screen-controller"},{scheme:"ms-secondary-screen-setup",description:"ms-secondary-screen-setup",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-secondary-screen-setup"},{scheme:"ms-settings",description:"ms-settings",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings"},{scheme:"ms-settings-airplanemode",description:"ms-settings-airplanemode",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-airplanemode"},{scheme:"ms-settings-bluetooth",description:"ms-settings-bluetooth",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-bluetooth"},{scheme:"ms-settings-camera",description:"ms-settings-camera",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-camera"},{scheme:"ms-settings-cellular",description:"ms-settings-cellular",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-cellular"},{scheme:"ms-settings-cloudstorage",description:"ms-settings-cloudstorage",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-cloudstorage"},{scheme:"ms-settings-connectabledevices",description:"ms-settings-connectabledevices",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-connectabledevices"},{scheme:"ms-settings-displays-topology",description:"ms-settings-displays-topology",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-displays-topology"},{scheme:"ms-settings-emailandaccounts",description:"ms-settings-emailandaccounts",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-emailandaccounts"},{scheme:"ms-settings-language",description:"ms-settings-language",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-language"},{scheme:"ms-settings-location",description:"ms-settings-location",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-location"},{scheme:"ms-settings-lock",description:"ms-settings-lock",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-lock"},{scheme:"ms-settings-nfctransactions",description:"ms-settings-nfctransactions",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-nfctransactions"},{scheme:"ms-settings-notifications",description:"ms-settings-notifications",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-notifications"},{scheme:"ms-settings-power",description:"ms-settings-power",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-power"},{scheme:"ms-settings-privacy",description:"ms-settings-privacy",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-privacy"},{scheme:"ms-settings-proximity",description:"ms-settings-proximity",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-proximity"},{scheme:"ms-settings-screenrotation",description:"ms-settings-screenrotation",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-screenrotation"},{scheme:"ms-settings-wifi",description:"ms-settings-wifi",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-wifi"},{scheme:"ms-settings-workplace",description:"ms-settings-workplace",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-settings-workplace"},{scheme:"ms-spd",description:"ms-spd",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-spd"},{scheme:"ms-transit-to",description:"ms-transit-to",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-transit-to"},{scheme:"ms-visio",description:"ms-visio",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-visio"},{scheme:"ms-walk-to",description:"ms-walk-to",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-walk-to"},{scheme:"ms-word",description:"ms-word",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ms-word"},{scheme:"msnim",description:"msnim",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/msnim"},{scheme:"mumble",description:"mumble",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/mumble"},{scheme:"mvn",description:"mvn",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/mvn"},{scheme:"notes",description:"notes",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/notes"},{scheme:"oid",description:"oid",reference:[{type:"draft",href:"http://www.iana.org/go/draft-larmouth-oid-iri"}],template:"http://www.iana.org/assignments/uri-schemes/prov/oid"},{scheme:"palm",description:"palm",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/palm"},{scheme:"paparazzi",description:"paparazzi",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/paparazzi"},{scheme:"platform",description:"platform",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/platform"},{scheme:"proxy",description:"proxy",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/proxy"},{scheme:"psyc",description:"psyc",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/psyc"},{scheme:"query",description:"query",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/query"},{scheme:"redis",description:"redis",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/redis"},{scheme:"rediss",description:"rediss",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/rediss"},{scheme:"res",description:"res",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/res"},{scheme:"resource",description:"resource",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/resource"},{scheme:"rmi",description:"rmi",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/rmi"},{scheme:"rsync",description:"rsync",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5781"}]},{scheme:"rtmfp",description:"rtmfp",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc7425"}],template:"http://www.iana.org/assignments/uri-schemes/prov/rtmfp"},{scheme:"rtmp",description:"rtmp",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/rtmp"},{scheme:"secondlife",description:"query",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/secondlife"},{scheme:"sftp",description:"query",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/sftp"},{scheme:"sgn",description:"sgn",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/sgn"},{scheme:"skype",description:"skype",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/skype"},{scheme:"smb",description:"smb",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/smb"},{scheme:"smtp",description:"smtp",reference:[{type:"draft",href:"http://www.iana.org/go/draft-melnikov-smime-msa-to-mda"}],template:"http://www.iana.org/assignments/uri-schemes/prov/smtp"},{scheme:"soldat",description:"soldat",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/soldat"},{scheme:"spotify",description:"spotify",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/spotify"},{scheme:"ssh",description:"ssh",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ssh"},{scheme:"steam",description:"steam",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/steam"},{scheme:"submit",description:"submit",reference:[{type:"draft",href:"http://www.iana.org/go/draft-melnikov-smime-msa-to-mda"}],template:"http://www.iana.org/assignments/uri-schemes/prov/submit"},{scheme:"svn",description:"svn",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/svn"},{scheme:"teamspeak",description:"teamspeak",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/teamspeak"},{scheme:"teliaeid",description:"teliaeid",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/teliaeid"},{scheme:"things",description:"things",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/things"},{scheme:"tool",description:"tool",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/tool"},{scheme:"udp",description:"udp",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/udp"},{scheme:"unreal",description:"unreal",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/unreal"},{scheme:"ut2004",description:"ut2004",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ut2004"},{scheme:"v-event",description:"v-event",reference:[{type:"draft",href:"http://www.iana.org/go/draft-menderico-v-event-uri"}],template:"http://www.iana.org/assignments/uri-schemes/prov/v-event"},{scheme:"ventrilo",description:"ventrilo",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ventrilo"},{scheme:"view-source",description:"view-source",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/view-source"},{scheme:"webcal",description:"webcal",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/webcal"},{scheme:"wpid",description:"wpid",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/wpid"},{scheme:"wtai",description:"wtai",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/wtai"},{scheme:"wyciwyg",description:"wyciwyg",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/wyciwyg"},{scheme:"xfire",description:"xfire",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/xfire"},{scheme:"xri",description:"xri",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/xri"},{scheme:"ymsgr",description:"ymsgr",reference:[],template:"http://www.iana.org/assignments/uri-schemes/prov/ymsgr"}];var E1=[{scheme:"fax",description:"fax",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2806"},{type:"rfc",href:"http://www.iana.org/go/rfc3966"}]},{scheme:"filesystem",description:"filesystem",reference:[],template:"http://www.iana.org/assignments/uri-schemes/historic/filesystem"},{scheme:"mailserver",description:"Access to data available from mail servers",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc6196"}]},{scheme:"modem",description:"modem",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc2806"},{type:"rfc",href:"http://www.iana.org/go/rfc3966"}]},{scheme:"pack",description:"pack",reference:[{type:"draft",href:"http://www.iana.org/go/draft-shur-pack-uri-scheme"}],template:"http://www.iana.org/assignments/uri-schemes/historic/pack"},{scheme:"prospero",description:"Prospero Directory Service",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4157"}]},{scheme:"snews",description:"NNTP over SSL/TLS",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc5538"}]},{scheme:"videotex",description:"videotex",reference:[{type:"draft",href:"http://www.iana.org/go/draft-mavrakis-videotex-url-spec"},{type:"rfc",href:"http://www.iana.org/go/rfc2122"},{type:"rfc",href:"http://www.iana.org/go/rfc3986"}],template:"http://www.iana.org/assignments/uri-schemes/historic/videotex"},{scheme:"wais",description:"Wide Area Information Servers",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc4156"}]},{scheme:"z39.50",description:"Z39.50 information access",reference:[{type:"rfc",href:"http://www.iana.org/go/rfc1738"},{type:"rfc",href:"http://www.iana.org/go/rfc2056"}]}];var R1=[{scheme:"android-app"},{scheme:"webpack"},{scheme:"s3",description:"Amazon Web Services S3 bucket"},{scheme:"gs",description:"Google Cloud Storage"},{scheme:"mqtt",description:"Message Queuing Telemetry Transport Protocol"},{scheme:"modbus+tcp",description:"Modbus over TCP"}];var Tw={permanent:j1,provisional:T1,historical:E1,unofficial:[]},Kf={};Object.keys(Tw).forEach(function(w){Tw[w].forEach(function(f){f.type=w,Kf[f.scheme]=f})});Tw.unofficial=R1.filter(function(w){return!Kf[w.scheme]});Tw.unofficial.forEach(function(w){w.type="unofficial",Kf[w.scheme]=w});Tw.allByName=Kf;var iw=Tw;function D8(w){try{return b1.default.parse(w),!0}catch(f){return!1}}function N8(w){for(let f in w)if(!D8(w[f]))return!1}var Bf=(w)=>{let f=P1.default.parse(w);if(f.scheme==="mailto"&&N8(f))return!0;return!!((f.reference==="absolute"||f.reference==="uri")&&iw.allByName[f.scheme])};var S1=Dw(Uf(),1),Mf=(w)=>{try{return S1.parse(w),!0}catch(f){return!1}};import j8 from"punycode";var T8=/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,Vf=(w)=>{let f=j8.toASCII(w);return f.replace(/\.$/,"").length<=253&&T8.test(f)};var h1=Dw(J0(),1),C1=Dw(Uf(),1);function E8(w){try{return C1.parse(w),!0}catch(f){return!1}}function R8(w){for(let f in w)if(!E8(w[f]))return!1}var Lf=(w)=>{let f=h1.parse(w);if(f.scheme==="mailto"&&R8(f))return!0;if(f.reference==="absolute"&&f.path!==void 0&&iw.allByName[f.scheme])return!0;if(f.scheme&&!iw.allByName[f.scheme])return!1;return f.path!==void 0&&(f.reference==="relative"||f.reference==="same-document"||f.reference==="uri")};var Ew={iri:Bf,"idn-email":Mf,"idn-hostname":Vf,"iri-reference":Lf};var k1=/^P(?!$)(\d+(?:\.\d+)?Y)?(\d+(?:\.\d+)?M)?(\d+(?:\.\d+)?W)?(\d+(?:\.\d+)?D)?(T(?=\d)(\d+(?:\.\d+)?H)?(\d+(?:\.\d+)?M)?(\d+(?:\.\d+)?S)?)?$/;var P8={iri:Bf,duration:k1,"idn-email":Mf,"idn-hostname":Vf,"iri-reference":Lf},Bw=P8;var s=(w,f={})=>{let W=Object.keys(Bw),Q=W;if(f.formats){if(!Array.isArray(f.formats))throw new Error("options.formats must be an array");Q=f.formats}return W.filter((Y)=>Q.includes(Y)).forEach((Y)=>{w.addFormat(Y,Bw[Y])}),w};var{expect:V,it:u}=globalThis.Bun.jest(import.meta.path);var g=Dw(f8(),1);u("add the types to ajv with the apply function",function(){let w=new g.Ajv;s(w),V(w.formats.duration).toBeTruthy(),V(w.formats.iri).toBeTruthy(),V(w.formats["idn-email"]).toBeTruthy(),V(w.formats["idn-hostname"]).toBeTruthy(),V(w.formats["iri-reference"]).toBeTruthy()});u("add the types to ajv as options to Ajv instances",function(){let w=new g.Ajv({formats:Bw});V(w.formats.duration).toBeTruthy(),V(w.formats.iri).toBeTruthy(),V(w.formats["idn-email"]).toBeTruthy(),V(w.formats["idn-hostname"]).toBeTruthy(),V(w.formats["iri-reference"]).toBeTruthy()});u("accept valid IRIs",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"iri"},W=w.compile(f);V(W("http://www.ietf.org/rfc/rfc2396.txt")).toBeTruthy(),V(W("https://\u043F\u043E\u0448\u0442\u0430.\u0443\u043A\u0440/russian")).toBeTruthy(),V(W("ldap://[2001:db8::7]/c=GB?objectClass?one")).toBeTruthy(),V(W("mailto:John.Doe@example.com")).toBeTruthy(),V(W("news:comp.infosystems.www.servers.unix")).toBeTruthy(),V(W("tel:+1-816-555-1212")).toBeTruthy(),V(W("telnet://192.0.2.16:80/")).toBeTruthy(),V(W("urn:oasis:names:specification:docbook:dtd:xml:4.1.2")).toBeTruthy(),V(W("modbus+tcp://1.2.3.4/path")).toBeTruthy(),V(W("mqtt://1.2.3.4/path")).toBeTruthy(),V(W("http://www.w3.org/2004/02/skos/core#Concept")).toBeTruthy()});u("reject invalid IRIs",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"iri"},W=w.compile(f);V(!W("example.com")).toBeTruthy(),V(!W("invalidScheme://example.com")).toBeTruthy(),V(!W("this:that")).toBeTruthy(),V(!W("#someelement")).toBeTruthy(),V(!W("afile.svg#anelement")).toBeTruthy()});u("accept a valid duration",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"duration"},W=w.compile(f);V(W("P1Y2M4DT20H44M12.67S")).toBeTruthy()});u("reject an invalid duration",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"duration"},W=w.compile(f);V(!W("10 seconds")).toBeTruthy()});u("accept valid idn-emails",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"idn-email"},W=w.compile(f);V(W("\u043A\u0432\u0456\u0442\u043E\u0447\u043A\u0430@\u043F\u043E\u0448\u0442\u0430.\u0443\u043A\u0440")).toBeTruthy(),V(W("D\xF6rte@S\xF6rensen.example.com")).toBeTruthy(),V(W("John.Doe@example.com")).toBeTruthy(),V(W('"John Doe"@example.com')).toBeTruthy()});u("reject invalid idn-emails",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"idn-email"},W=w.compile(f);V(!W("johndoe")).toBeTruthy(),V(!W("valid@somewhere.com?asdf")).toBeTruthy()});u("accept valid international domains",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"idn-hostname"},W=w.compile(f);V(W("google.com")).toBeTruthy(),V(W("123.example.com.")).toBeTruthy(),V(W("\u30B8\u30A7\u30FC\u30D4\u30FC\u30CB\u30C3\u30AF.jp")).toBeTruthy(),V(W("\u03BF\u03C5\u03C4\u03BF\u03C0\u03AF\u03B1.\u03B4\u03C0\u03B8.gr")).toBeTruthy(),V(W("localhost")).toBeTruthy(),V(W("abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxy.example.com.")).toBeTruthy(),V(W("abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxy.example.com")).toBeTruthy(),V(W("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.example.com")).toBeTruthy(),V(W("\xF6bb.at")).toBeTruthy()});u("reject invalid international domains",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"idn-hostname"},W=w.compile(f);V(!W("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijkl.example.com")).toBeTruthy(),V(!W("abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.example.com")).toBeTruthy(),V(!W("abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.example.com.")).toBeTruthy(),V(!W("http://google.com")).toBeTruthy()});u("accept valid IRI-reference",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"iri-reference"},W=w.compile(f);V(W("https://tools.ietf.org/html/rfc3986#section-4.2")).toBeTruthy(),V(W("#someelement")).toBeTruthy(),V(W("afile.svg#anelement")).toBeTruthy(),V(W("afile.svg")).toBeTruthy(),V(W("somecontainer#fragment")).toBeTruthy(),V(W("http://example.org/absolute/URI/with/absolute/path/to/resource.txt")).toBeTruthy(),V(W("//example.org/scheme-relative/URI/with/absolute/path/to/resource.txt")).toBeTruthy(),V(W("/relative/URI/with/absolute/path/to/resource.txt")).toBeTruthy(),V(W("relative/path/to/resource.txt")).toBeTruthy(),V(W("../../../resource.txt")).toBeTruthy(),V(W("./resource.txt#frag01")).toBeTruthy(),V(W("resource.txt")).toBeTruthy(),V(W("#frag01")).toBeTruthy(),V(W("//network/test")).toBeTruthy(),V(W("./this:that")).toBeTruthy(),V(W("./path")).toBeTruthy(),V(W("/path")).toBeTruthy(),V(W("valid@email.format")).toBeTruthy()});u("reject invalid IRI-reference",function(){let w=new g.Ajv;s(w);let f={type:"string",format:"iri-reference"},W=w.compile(f);V(!W("this:that")).toBeTruthy()});u("draft07 should include the correct formats",function(){V(Ew["idn-hostname"]).toBeTruthy(),V(Ew["idn-email"]).toBeTruthy(),V(Ew.iri).toBeTruthy(),V(Ew["iri-reference"]).toBeTruthy()});u("add the idn types to ajv as options to Ajv instances",function(){let w=new g.Ajv({formats:Ew});V(!w.formats.duration).toBeTruthy(),V(w.formats.iri).toBeTruthy(),V(w.formats["idn-email"]).toBeTruthy(),V(w.formats["idn-hostname"]).toBeTruthy(),V(w.formats["iri-reference"]).toBeTruthy()});u("it should be possible to cherry pick formats to install",function(){let w=new g.Ajv({formats:{duration:Bw.duration,iri:Bw.iri}});V(w.formats.duration).toBeTruthy(),V(w.formats.iri).toBeTruthy(),V(!w.formats["idn-email"]).toBeTruthy(),V(!w.formats["idn-hostname"]).toBeTruthy(),V(!w.formats["iri-reference"]).toBeTruthy()});u("it should be possible to specify formats to install",function(){let w=new g.Ajv;s(w,{formats:["idn-email","iri"]}),V(!w.formats.duration).toBeTruthy(),V(w.formats.iri).toBeTruthy(),V(w.formats["idn-email"]).toBeTruthy(),V(!w.formats["idn-hostname"]).toBeTruthy(),V(!w.formats["iri-reference"]).toBeTruthy()});

//# debugId=47A1D0DBE9E58D4D64756E2164756E21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL3VyaS1qcy1yZXBsYWNlL2Rpc3QvU2VyaWFsaXplLmpzIiwgIi4uL25vZGVfbW9kdWxlcy91cmktanMtcmVwbGFjZS9kaXN0L1BhcnNlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy91cmktanMtcmVwbGFjZS9kaXN0L1Jlc29sdmUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3VyaS1qcy1yZXBsYWNlL2Rpc3QvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL25lYXJsZXkvbGliL25lYXJsZXkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3NtdHAtYWRkcmVzcy1wYXJzZXIvZGlzdC9saWIvZ3JhbW1hci5qcyIsICIuLi9ub2RlX21vZHVsZXMvc210cC1hZGRyZXNzLXBhcnNlci9kaXN0L2xpYi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9jb2RlZ2VuL2NvZGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvY29kZWdlbi9zY29wZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9jb2RlZ2VuL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3V0aWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvbmFtZXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvZXJyb3JzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlL2Jvb2xTY2hlbWEuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvcnVsZXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvYXBwbGljYWJpbGl0eS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS92YWxpZGF0ZS9kYXRhVHlwZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS92YWxpZGF0ZS9kZWZhdWx0cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2NvZGUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUva2V5d29yZC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS92YWxpZGF0ZS9zdWJzY2hlbWEuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZGVlcC1lcXVhbC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtdHJhdmVyc2UvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvcmVzb2x2ZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS92YWxpZGF0ZS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvcnVudGltZS92YWxpZGF0aW9uX2Vycm9yLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3JlZl9lcnJvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvZmFzdC11cmkvbGliL3Njb3BlZENoYXJzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9mYXN0LXVyaS9saWIvdXRpbHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Zhc3QtdXJpL2xpYi9zY2hlbWVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9mYXN0LXVyaS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvcnVudGltZS91cmkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvcmUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL2lkLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvY29yZS9yZWYuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9saW1pdE51bWJlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vbXVsdGlwbGVPZi5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvcnVudGltZS91Y3MybGVuZ3RoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9saW1pdExlbmd0aC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vcGF0dGVybi5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vbGltaXRQcm9wZXJ0aWVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9yZXF1aXJlZC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vbGltaXRJdGVtcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvcnVudGltZS9lcXVhbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vdW5pcXVlSXRlbXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2NvbnN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9lbnVtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvYWRkaXRpb25hbEl0ZW1zLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9pdGVtcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvcHJlZml4SXRlbXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2l0ZW1zMjAyMC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvY29udGFpbnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2RlcGVuZGVuY2llcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvcHJvcGVydHlOYW1lcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvYWRkaXRpb25hbFByb3BlcnRpZXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3Byb3BlcnRpZXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3BhdHRlcm5Qcm9wZXJ0aWVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9ub3QuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FueU9mLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9vbmVPZi5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvYWxsT2YuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2lmLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci90aGVuRWxzZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9mb3JtYXQvZm9ybWF0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvZm9ybWF0L2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvbWV0YWRhdGEuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9kcmFmdDcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9kaXNjcmltaW5hdG9yL3R5cGVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvZGlzY3JpbWluYXRvci9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvYWp2LmpzIiwgIi4uL3NyYy9mb3JtYXRzL2lyaS50cyIsICIuLi9ub2RlX21vZHVsZXMvQHNpbHZlcmJ1Y2tldC9pYW5hLXNjaGVtZXMvZXNtL2xpYi9pYW5hLXBlcm1hbmVudC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQHNpbHZlcmJ1Y2tldC9pYW5hLXNjaGVtZXMvZXNtL2xpYi9pYW5hLXByb3Zpc2lvbmFsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9Ac2lsdmVyYnVja2V0L2lhbmEtc2NoZW1lcy9lc20vbGliL2lhbmEtaGlzdG9yaWNhbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvQHNpbHZlcmJ1Y2tldC9pYW5hLXNjaGVtZXMvZXNtL2xpYi91bm9mZmljaWFsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9Ac2lsdmVyYnVja2V0L2lhbmEtc2NoZW1lcy9lc20vaW5kZXguanMiLCAiLi4vc3JjL2Zvcm1hdHMvaWRuLWVtYWlsLnRzIiwgIi4uL3NyYy9mb3JtYXRzL2lkbi1ob3N0bmFtZS50cyIsICIuLi9zcmMvZm9ybWF0cy9pcmktcmVmZXJlbmNlLnRzIiwgIi4uL3NyYy9pZG4udHMiLCAiLi4vc3JjL2Zvcm1hdHMvZHVyYXRpb24udHMiLCAiLi4vc3JjL2Zvcm1hdHMvaW5kZXgudHMiLCAiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy9pbmRleC50ZXN0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWwogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXJpYWxpemUgPSB2b2lkIDA7XG5mdW5jdGlvbiBzZXJpYWxpemUoY29tcG9uZW50cykge1xuICAgIGxldCBidWlsZFJlc3VsdCA9IGJ1aWxkU3RhcnRVcmwoY29tcG9uZW50cyk7XG4gICAgbGV0IHVybEJ1aWxkZXI7XG4gICAgdHJ5IHtcbiAgICAgICAgdXJsQnVpbGRlciA9IG5ldyBVUkwoYnVpbGRSZXN1bHQuc3RhcnRVcmwpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IubWVzc2FnZSArICcgJyArIGJ1aWxkUmVzdWx0LnN0YXJ0VXJsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRzLnNjaGVtZSAhPT0gdW5kZWZpbmVkICYmICFidWlsZFJlc3VsdC50ZW1wb3JhcnlTY2hlbWVBbmRIb3N0VXNlZCAmJiAhYnVpbGRSZXN1bHQudGVtcG9yYXJ5U2NoZW1lVXNlZCkge1xuICAgICAgICB1cmxCdWlsZGVyLnByb3RvY29sID0gY29tcG9uZW50cy5zY2hlbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHVybEJ1aWxkZXIucHJvdG9jb2wgPSAnJztcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudHMuaG9zdCAhPT0gdW5kZWZpbmVkICYmICFidWlsZFJlc3VsdC50ZW1wb3JhcnlTY2hlbWVBbmRIb3N0VXNlZCAmJiAhYnVpbGRSZXN1bHQudGVtcG9yYXJ5SG9zdFVzZWQpIHtcbiAgICAgICAgdXJsQnVpbGRlci5ob3N0ID0gY29tcG9uZW50cy5ob3N0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdXJsQnVpbGRlci5ob3N0ID0gJyc7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRzLnBvcnQpIHtcbiAgICAgICAgdXJsQnVpbGRlci5wb3J0ID0gU3RyaW5nKGNvbXBvbmVudHMucG9ydCk7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRzLnBhdGgpIHtcbiAgICAgICAgdXJsQnVpbGRlci5wYXRobmFtZSA9IGNvbXBvbmVudHMucGF0aDtcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudHMudXNlcmluZm8pIHtcbiAgICAgICAgbGV0IHBhcnRzID0gY29tcG9uZW50cy51c2VyaW5mby5zcGxpdCgnOicpO1xuICAgICAgICBpZiAocGFydHNbMF0pIHtcbiAgICAgICAgICAgIHVybEJ1aWxkZXIudXNlcm5hbWUgPSBwYXJ0c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydHNbMV0pIHtcbiAgICAgICAgICAgIHVybEJ1aWxkZXIucGFzc3dvcmQgPSBwYXJ0c1sxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tcG9uZW50cy5xdWVyeSkge1xuICAgICAgICB1cmxCdWlsZGVyLnNlYXJjaCA9IGNvbXBvbmVudHMucXVlcnk7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRzLmZyYWdtZW50KSB7XG4gICAgICAgIHVybEJ1aWxkZXIuaGFzaCA9IGNvbXBvbmVudHMuZnJhZ21lbnQ7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSB1cmxCdWlsZGVyLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFjb21wb25lbnRzLnBhdGggJiYgcmVzdWx0LmVuZHNXaXRoKCcvJykpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gICAgaWYgKGJ1aWxkUmVzdWx0LnRlbXBvcmFyeVNjaGVtZUFuZEhvc3RVc2VkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKHRlbXBvcmFyeVNjaGVtZUFuZEhvc3QsICcnKTtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYnVpbGRSZXN1bHQudGVtcG9yYXJ5SG9zdFVzZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UodGVtcG9yYXJ5SG9zdCwgJycpO1xuICAgIH1cbiAgICBpZiAoYnVpbGRSZXN1bHQudGVtcG9yYXJ5U2NoZW1lVXNlZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSh0ZW1wb3JhcnlTY2hlbWUsICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuc2VyaWFsaXplID0gc2VyaWFsaXplO1xuY29uc3QgdGVtcG9yYXJ5U2NoZW1lID0gJ2h0dHBzOic7XG5jb25zdCB0ZW1wb3JhcnlIb3N0ID0gJ19yZW1vdmVfbWVfaG9zdF8nO1xuY29uc3QgdGVtcG9yYXJ5U2NoZW1lQW5kSG9zdCA9IHRlbXBvcmFyeVNjaGVtZSArICcvLycgKyB0ZW1wb3JhcnlIb3N0O1xuZnVuY3Rpb24gYnVpbGRTdGFydFVybChjb21wb25lbnRzKSB7XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICAgc3RhcnRVcmw6ICcnLFxuICAgICAgICB0ZW1wb3JhcnlIb3N0VXNlZDogZmFsc2UsXG4gICAgICAgIHRlbXBvcmFyeVNjaGVtZVVzZWQ6IGZhbHNlLFxuICAgICAgICB0ZW1wb3JhcnlTY2hlbWVBbmRIb3N0VXNlZDogZmFsc2UsXG4gICAgfTtcbiAgICBpZiAoY29tcG9uZW50cy5zY2hlbWUgJiYgY29tcG9uZW50cy5ob3N0KSB7XG4gICAgICAgIHJlc3VsdC5zdGFydFVybCA9IGNvbXBvbmVudHMuc2NoZW1lICsgJzovLycgKyBjb21wb25lbnRzLmhvc3Q7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRzLmhvc3QpIHtcbiAgICAgICAgcmVzdWx0LnRlbXBvcmFyeVNjaGVtZVVzZWQgPSB0cnVlO1xuICAgICAgICByZXN1bHQuc3RhcnRVcmwgPSB0ZW1wb3JhcnlTY2hlbWUgKyBjb21wb25lbnRzLmhvc3Q7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRzLnNjaGVtZSkge1xuICAgICAgICBpZiAoY29tcG9uZW50cy5wYXRoKSB7XG4gICAgICAgICAgICByZXN1bHQuc3RhcnRVcmwgPSBjb21wb25lbnRzLnNjaGVtZSArICc6JyArIGNvbXBvbmVudHMucGF0aDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnRlbXBvcmFyeUhvc3RVc2VkID0gdHJ1ZTtcbiAgICAgICAgcmVzdWx0LnN0YXJ0VXJsID0gY29tcG9uZW50cy5zY2hlbWUgKyAnOicgKyB0ZW1wb3JhcnlIb3N0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXN1bHQudGVtcG9yYXJ5U2NoZW1lQW5kSG9zdFVzZWQgPSB0cnVlO1xuICAgIHJlc3VsdC5zdGFydFVybCA9IHRlbXBvcmFyeVNjaGVtZUFuZEhvc3Q7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlID0gdm9pZCAwO1xuZnVuY3Rpb24gcGFyc2UodXJpU3RyaW5nKSB7XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICAgcGF0aDogJycsXG4gICAgICAgIGZyYWdtZW50OiB1bmRlZmluZWQsXG4gICAgICAgIGhvc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9ydDogdW5kZWZpbmVkLFxuICAgICAgICBxdWVyeTogdW5kZWZpbmVkLFxuICAgICAgICByZWZlcmVuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgc2NoZW1lOiB1bmRlZmluZWQsXG4gICAgICAgIHVzZXJpbmZvOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICBpZiAodXJpU3RyaW5nLmluY2x1ZGVzKCcjJykpIHtcbiAgICAgICAgcmVzdWx0LmZyYWdtZW50ID0gJyc7XG4gICAgfVxuICAgIGxldCB7IHBhcnNlZCwgYWRkZWREZWZhdWx0U2NoZW1lLCBhZGRlZFRlbXBvcmFyeUhvc3QsIGVycm9yLCB9ID0gcmVjb2duaXplVXJsKHVyaVN0cmluZyk7XG4gICAgaWYgKGVycm9yIHx8IHBhcnNlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC5lcnJvciA9IGVycm9yO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcnNlZC5wcm90b2NvbCAhPT0gdW5kZWZpbmVkICYmIHBhcnNlZC5wcm90b2NvbCAhPT0gJycgJiYgIWFkZGVkRGVmYXVsdFNjaGVtZSkge1xuICAgICAgICByZXN1bHQuc2NoZW1lID0gU3RyaW5nKHBhcnNlZC5wcm90b2NvbCkucmVwbGFjZSgnOicsICcnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJzZWQudXNlcm5hbWUgIT09IHVuZGVmaW5lZCAmJiBwYXJzZWQudXNlcm5hbWUgIT09ICcnKSB7XG4gICAgICAgIGxldCB1c2VyaW5mbyA9IHBhcnNlZC51c2VybmFtZTtcbiAgICAgICAgaWYgKHBhcnNlZC5wYXNzd29yZCkge1xuICAgICAgICAgICAgdXNlcmluZm8gKz0gJzonICsgcGFyc2VkLnBhc3N3b3JkO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC51c2VyaW5mbyA9IHVzZXJpbmZvO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcnNlZC5ob3N0bmFtZSAhPT0gdW5kZWZpbmVkICYmIHBhcnNlZC5ob3N0bmFtZSAhPT0gJycgJiYgIWFkZGVkVGVtcG9yYXJ5SG9zdCkge1xuICAgICAgICByZXN1bHQuaG9zdCA9IHBhcnNlZC5ob3N0bmFtZTtcbiAgICAgICAgaWYgKHJlc3VsdC5ob3N0LnN0YXJ0c1dpdGgoJ1snKSkge1xuICAgICAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdC5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcnNlZC5wb3J0ICE9PSB1bmRlZmluZWQgJiYgcGFyc2VkLnBvcnQgIT09ICcnKSB7XG4gICAgICAgIHJlc3VsdC5wb3J0ID0gTnVtYmVyKHBhcnNlZC5wb3J0KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJzZWQucGF0aG5hbWUgIT09IHVuZGVmaW5lZCAmJiBwYXJzZWQucGF0aG5hbWUgIT09ICcvJykge1xuICAgICAgICByZXN1bHQucGF0aCA9IHBhcnNlZC5wYXRobmFtZTtcbiAgICAgICAgaWYgKGFkZGVkVGVtcG9yYXJ5SG9zdCAmJiByZXN1bHQucGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGguc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFyc2VkLnNlYXJjaCAhPT0gdW5kZWZpbmVkICYmIHBhcnNlZC5zZWFyY2ggIT09ICcnKSB7XG4gICAgICAgIHJlc3VsdC5xdWVyeSA9IHBhcnNlZC5zZWFyY2gucmVwbGFjZSgnPycsICcnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJzZWQuaGFzaCAhPT0gdW5kZWZpbmVkICYmIHBhcnNlZC5oYXNoICE9PSAnJykge1xuICAgICAgICByZXN1bHQuZnJhZ21lbnQgPSBwYXJzZWQuaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0LnNjaGVtZSA9PT0gdW5kZWZpbmVkICYmIHJlc3VsdC51c2VyaW5mbyA9PT0gdW5kZWZpbmVkICYmIHJlc3VsdC5ob3N0ID09PSB1bmRlZmluZWQgJiYgcmVzdWx0LnBvcnQgPT09IHVuZGVmaW5lZCAmJiAhcmVzdWx0LnBhdGggJiYgcmVzdWx0LnF1ZXJ5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnJlZmVyZW5jZSA9IFwic2FtZS1kb2N1bWVudFwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZXN1bHQuc2NoZW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnJlZmVyZW5jZSA9IFwicmVsYXRpdmVcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzdWx0LmZyYWdtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnJlZmVyZW5jZSA9IFwiYWJzb2x1dGVcIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdC5yZWZlcmVuY2UgPSBcInVyaVwiO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuY29uc3QgdGVtcG9yYXJ5SG9zdCA9ICdfcmVtb3ZlX21lX2hvc3QvJztcbmZ1bmN0aW9uIHJlY29nbml6ZVVybCh1cmlTdHJpbmcpIHtcbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICBwYXJzZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWRkZWREZWZhdWx0U2NoZW1lOiBmYWxzZSxcbiAgICAgICAgYWRkZWRUZW1wb3JhcnlIb3N0OiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIGxldCBmaXJzdEVycm9yO1xuICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdC5wYXJzZWQgPSBuZXcgVVJMKHVyaVN0cmluZyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBmaXJzdEVycm9yID0gZXJyb3I7XG4gICAgfVxuICAgIGlmICh1cmlTdHJpbmcuc3RhcnRzV2l0aCgnLy8nKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0LnBhcnNlZCA9IG5ldyBVUkwoJ2h0dHBzOicgKyB1cmlTdHJpbmcpO1xuICAgICAgICAgICAgcmVzdWx0LmFkZGVkRGVmYXVsdFNjaGVtZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChvdGhlckVycm9yKSB7XG4gICAgICAgICAgICByZXN1bHQuZXJyb3IgPSBmaXJzdEVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdC5wYXJzZWQgPSBuZXcgVVJMKCdodHRwczovLycgKyB0ZW1wb3JhcnlIb3N0ICsgdXJpU3RyaW5nKTtcbiAgICAgICAgcmVzdWx0LmFkZGVkRGVmYXVsdFNjaGVtZSA9IHRydWU7XG4gICAgICAgIHJlc3VsdC5hZGRlZFRlbXBvcmFyeUhvc3QgPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAob3RoZXJFcnJvcikge1xuICAgIH1cbiAgICByZXN1bHQuZXJyb3IgPSBmaXJzdEVycm9yLm1lc3NhZ2U7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc29sdmVDb21wb25lbnRzID0gZXhwb3J0cy5yZXNvbHZlID0gdm9pZCAwO1xuY29uc3QgUGFyc2VfMSA9IHJlcXVpcmUoXCIuL1BhcnNlXCIpO1xuY29uc3QgU2VyaWFsaXplXzEgPSByZXF1aXJlKFwiLi9TZXJpYWxpemVcIik7XG5mdW5jdGlvbiByZXNvbHZlKGJhc2VVUkksIHJlbGF0aXZlVVJJLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc2NoZW1lTGVzc09wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgc2NoZW1lOiAnbnVsbCcgfSwgb3B0aW9ucyk7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlQ29tcG9uZW50cygoMCwgUGFyc2VfMS5wYXJzZSkoYmFzZVVSSSksICgwLCBQYXJzZV8xLnBhcnNlKShyZWxhdGl2ZVVSSSksIHNjaGVtZUxlc3NPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gKDAsIFNlcmlhbGl6ZV8xLnNlcmlhbGl6ZSkocmVzb2x2ZWQpO1xufVxuZXhwb3J0cy5yZXNvbHZlID0gcmVzb2x2ZTtcbmZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnRzKGJhc2UsIHJlbGF0aXZlLCBvcHRpb25zLCBza2lwTm9ybWFsaXphdGlvbikge1xuICAgIGNvbnN0IHRhcmdldCA9IHt9O1xuICAgIGlmICghc2tpcE5vcm1hbGl6YXRpb24pIHtcbiAgICAgICAgYmFzZSA9ICgwLCBQYXJzZV8xLnBhcnNlKSgoMCwgU2VyaWFsaXplXzEuc2VyaWFsaXplKShiYXNlKSk7XG4gICAgICAgIHJlbGF0aXZlID0gKDAsIFBhcnNlXzEucGFyc2UpKCgwLCBTZXJpYWxpemVfMS5zZXJpYWxpemUpKHJlbGF0aXZlKSk7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGlmICghb3B0aW9ucy50b2xlcmFudCAmJiByZWxhdGl2ZS5zY2hlbWUpIHtcbiAgICAgICAgdGFyZ2V0LnNjaGVtZSA9IHJlbGF0aXZlLnNjaGVtZTtcbiAgICAgICAgdGFyZ2V0LnVzZXJpbmZvID0gcmVsYXRpdmUudXNlcmluZm87XG4gICAgICAgIHRhcmdldC5ob3N0ID0gcmVsYXRpdmUuaG9zdDtcbiAgICAgICAgdGFyZ2V0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgICAgICB0YXJnZXQucGF0aCA9IHJlbW92ZURvdFNlZ21lbnRzKHJlbGF0aXZlLnBhdGggfHwgJycpO1xuICAgICAgICB0YXJnZXQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChyZWxhdGl2ZS51c2VyaW5mbyAhPT0gdW5kZWZpbmVkIHx8IHJlbGF0aXZlLmhvc3QgIT09IHVuZGVmaW5lZCB8fCByZWxhdGl2ZS5wb3J0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRhcmdldC51c2VyaW5mbyA9IHJlbGF0aXZlLnVzZXJpbmZvO1xuICAgICAgICAgICAgdGFyZ2V0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0O1xuICAgICAgICAgICAgdGFyZ2V0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSByZW1vdmVEb3RTZWdtZW50cyhyZWxhdGl2ZS5wYXRoIHx8ICcnKTtcbiAgICAgICAgICAgIHRhcmdldC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFyZWxhdGl2ZS5wYXRoKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSBiYXNlLnBhdGg7XG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlLnF1ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZS5wYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXRoID0gcmVtb3ZlRG90U2VnbWVudHMocmVsYXRpdmUucGF0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGJhc2UudXNlcmluZm8gIT09IHVuZGVmaW5lZCB8fCBiYXNlLmhvc3QgIT09IHVuZGVmaW5lZCB8fCBiYXNlLnBvcnQgIT09IHVuZGVmaW5lZCkgJiYgIWJhc2UucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSAnLycgKyByZWxhdGl2ZS5wYXRoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFiYXNlLnBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXRoID0gcmVsYXRpdmUucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKDAsIGJhc2UucGF0aC5sYXN0SW5kZXhPZignLycpICsgMSkgKyByZWxhdGl2ZS5wYXRoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXRoID0gcmVtb3ZlRG90U2VnbWVudHModGFyZ2V0LnBhdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YXJnZXQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhcmdldC51c2VyaW5mbyA9IGJhc2UudXNlcmluZm87XG4gICAgICAgICAgICB0YXJnZXQuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHRhcmdldC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICB9XG4gICAgdGFyZ2V0LmZyYWdtZW50ID0gcmVsYXRpdmUuZnJhZ21lbnQ7XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmV4cG9ydHMucmVzb2x2ZUNvbXBvbmVudHMgPSByZXNvbHZlQ29tcG9uZW50cztcbmZ1bmN0aW9uIHJlbW92ZURvdFNlZ21lbnRzKGlucHV0KSB7XG4gICAgY29uc3QgUkRTMSA9IC9eXFwuXFwuP1xcLy91O1xuICAgIGNvbnN0IFJEUzIgPSAvXlxcL1xcLig/OlxcL3wkKS91O1xuICAgIGNvbnN0IFJEUzMgPSAvXlxcL1xcLlxcLig/OlxcL3wkKS91O1xuICAgIGNvbnN0IFJEUzUgPSAvXlxcLz8oPzoufFxcbikqPyg/PVxcL3wkKS91O1xuICAgIGNvbnN0IG91dHB1dCA9IFtdO1xuICAgIHdoaWxlIChpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGlucHV0Lm1hdGNoKFJEUzEpKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoUkRTMSwgJycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlucHV0Lm1hdGNoKFJEUzIpKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoUkRTMiwgJy8nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnB1dC5tYXRjaChSRFMzKSkge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFJEUzMsICcvJyk7XG4gICAgICAgICAgICBvdXRwdXQucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5wdXQgPT09ICcuJyB8fCBpbnB1dCA9PT0gJy4uJykge1xuICAgICAgICAgICAgaW5wdXQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGltID0gaW5wdXQubWF0Y2goUkRTNSk7XG4gICAgICAgICAgICBpZiAoaW0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gaW1bMF07XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5zbGljZShzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZG90IHNlZ21lbnQgY29uZGl0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn1cbiIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubm9ybWFsaXplID0gZXhwb3J0cy5lcXVhbCA9IHZvaWQgMDtcbmNvbnN0IFNlcmlhbGl6ZV8xID0gcmVxdWlyZShcIi4vU2VyaWFsaXplXCIpO1xuY29uc3QgUGFyc2VfMSA9IHJlcXVpcmUoXCIuL1BhcnNlXCIpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1Jlc29sdmVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1NlcmlhbGl6ZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUGFyc2VcIiksIGV4cG9ydHMpO1xuZnVuY3Rpb24gZXF1YWwodXJpQSwgdXJpQikge1xuICAgIGxldCBwcm9jZXNzZWRBO1xuICAgIGxldCBwcm9jZXNzZWRCO1xuICAgIGlmICh0eXBlb2YgdXJpQSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBwcm9jZXNzZWRBID0gKDAsIFNlcmlhbGl6ZV8xLnNlcmlhbGl6ZSkoKDAsIFBhcnNlXzEucGFyc2UpKHVyaUEpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHByb2Nlc3NlZEEgPSAoMCwgU2VyaWFsaXplXzEuc2VyaWFsaXplKSh1cmlBKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB1cmlCID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHByb2Nlc3NlZEIgPSAoMCwgU2VyaWFsaXplXzEuc2VyaWFsaXplKSgoMCwgUGFyc2VfMS5wYXJzZSkodXJpQikpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHJvY2Vzc2VkQiA9ICgwLCBTZXJpYWxpemVfMS5zZXJpYWxpemUpKHVyaUIpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc2VkQS50b0xvd2VyQ2FzZSgpID09PSBwcm9jZXNzZWRCLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnRzLmVxdWFsID0gZXF1YWw7XG5mdW5jdGlvbiBub3JtYWxpemUodXJpKSB7XG4gICAgaWYgKHR5cGVvZiB1cmkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuICgwLCBTZXJpYWxpemVfMS5zZXJpYWxpemUpKCgwLCBQYXJzZV8xLnBhcnNlKSh1cmkpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAoMCwgUGFyc2VfMS5wYXJzZSkoKDAsIFNlcmlhbGl6ZV8xLnNlcmlhbGl6ZSkodXJpKSk7XG4gICAgfVxufVxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4iLAogICAgIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QubmVhcmxleSA9IGZhY3RvcnkoKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuXG4gICAgZnVuY3Rpb24gUnVsZShuYW1lLCBzeW1ib2xzLCBwb3N0cHJvY2Vzcykge1xuICAgICAgICB0aGlzLmlkID0gKytSdWxlLmhpZ2hlc3RJZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zeW1ib2xzID0gc3ltYm9sczsgICAgICAgIC8vIGEgbGlzdCBvZiBsaXRlcmFsIHwgcmVnZXggY2xhc3MgfCBub250ZXJtaW5hbFxuICAgICAgICB0aGlzLnBvc3Rwcm9jZXNzID0gcG9zdHByb2Nlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBSdWxlLmhpZ2hlc3RJZCA9IDA7XG5cbiAgICBSdWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKHdpdGhDdXJzb3JBdCkge1xuICAgICAgICB2YXIgc3ltYm9sU2VxdWVuY2UgPSAodHlwZW9mIHdpdGhDdXJzb3JBdCA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnN5bWJvbHMubWFwKGdldFN5bWJvbFNob3J0RGlzcGxheSkuam9pbignICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKCAgIHRoaXMuc3ltYm9scy5zbGljZSgwLCB3aXRoQ3Vyc29yQXQpLm1hcChnZXRTeW1ib2xTaG9ydERpc3BsYXkpLmpvaW4oJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiDil48gXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdGhpcy5zeW1ib2xzLnNsaWNlKHdpdGhDdXJzb3JBdCkubWFwKGdldFN5bWJvbFNob3J0RGlzcGxheSkuam9pbignICcpICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCIg4oaSIFwiICsgc3ltYm9sU2VxdWVuY2U7XG4gICAgfVxuXG5cbiAgICAvLyBhIFN0YXRlIGlzIGEgcnVsZSBhdCBhIHBvc2l0aW9uIGZyb20gYSBnaXZlbiBzdGFydGluZyBwb2ludCBpbiB0aGUgaW5wdXQgc3RyZWFtIChyZWZlcmVuY2UpXG4gICAgZnVuY3Rpb24gU3RhdGUocnVsZSwgZG90LCByZWZlcmVuY2UsIHdhbnRlZEJ5KSB7XG4gICAgICAgIHRoaXMucnVsZSA9IHJ1bGU7XG4gICAgICAgIHRoaXMuZG90ID0gZG90O1xuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMud2FudGVkQnkgPSB3YW50ZWRCeTtcbiAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gdGhpcy5kb3QgPT09IHJ1bGUuc3ltYm9scy5sZW5ndGg7XG4gICAgfVxuXG4gICAgU3RhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIntcIiArIHRoaXMucnVsZS50b1N0cmluZyh0aGlzLmRvdCkgKyBcIn0sIGZyb206IFwiICsgKHRoaXMucmVmZXJlbmNlIHx8IDApO1xuICAgIH07XG5cbiAgICBTdGF0ZS5wcm90b3R5cGUubmV4dFN0YXRlID0gZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKHRoaXMucnVsZSwgdGhpcy5kb3QgKyAxLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy53YW50ZWRCeSk7XG4gICAgICAgIHN0YXRlLmxlZnQgPSB0aGlzO1xuICAgICAgICBzdGF0ZS5yaWdodCA9IGNoaWxkO1xuICAgICAgICBpZiAoc3RhdGUuaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgc3RhdGUuZGF0YSA9IHN0YXRlLmJ1aWxkKCk7XG4gICAgICAgICAgICAvLyBIYXZpbmcgcmlnaHQgc2V0IGhlcmUgd2lsbCBwcmV2ZW50IHRoZSByaWdodCBzdGF0ZSBhbmQgaXRzIGNoaWxkcmVuXG4gICAgICAgICAgICAvLyBmb3JtIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkXG4gICAgICAgICAgICBzdGF0ZS5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfTtcblxuICAgIFN0YXRlLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKG5vZGUucmlnaHQuZGF0YSk7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xuICAgICAgICB9IHdoaWxlIChub2RlLmxlZnQpO1xuICAgICAgICBjaGlsZHJlbi5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgU3RhdGUucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ydWxlLnBvc3Rwcm9jZXNzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLnJ1bGUucG9zdHByb2Nlc3ModGhpcy5kYXRhLCB0aGlzLnJlZmVyZW5jZSwgUGFyc2VyLmZhaWwpO1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gQ29sdW1uKGdyYW1tYXIsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuZ3JhbW1hciA9IGdyYW1tYXI7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy53YW50cyA9IHt9OyAvLyBzdGF0ZXMgaW5kZXhlZCBieSB0aGUgbm9uLXRlcm1pbmFsIHRoZXkgZXhwZWN0XG4gICAgICAgIHRoaXMuc2Nhbm5hYmxlID0gW107IC8vIGxpc3Qgb2Ygc3RhdGVzIHRoYXQgZXhwZWN0IGEgdG9rZW5cbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB7fTsgLy8gc3RhdGVzIHRoYXQgYXJlIG51bGxhYmxlXG4gICAgfVxuXG5cbiAgICBDb2x1bW4ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbihuZXh0Q29sdW1uKSB7XG4gICAgICAgIHZhciBzdGF0ZXMgPSB0aGlzLnN0YXRlcztcbiAgICAgICAgdmFyIHdhbnRzID0gdGhpcy53YW50cztcbiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IHRoaXMuY29tcGxldGVkO1xuXG4gICAgICAgIGZvciAodmFyIHcgPSAwOyB3IDwgc3RhdGVzLmxlbmd0aDsgdysrKSB7IC8vIG5iLiB3ZSBwdXNoKCkgZHVyaW5nIGl0ZXJhdGlvblxuICAgICAgICAgICAgdmFyIHN0YXRlID0gc3RhdGVzW3ddO1xuXG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLmZpbmlzaCgpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5kYXRhICE9PSBQYXJzZXIuZmFpbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wbGV0ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgd2FudGVkQnkgPSBzdGF0ZS53YW50ZWRCeTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHdhbnRlZEJ5Lmxlbmd0aDsgaS0tOyApIHsgLy8gdGhpcyBsaW5lIGlzIGhvdFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlZnQgPSB3YW50ZWRCeVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGUobGVmdCwgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lhbC1jYXNlIG51bGxhYmxlc1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUucmVmZXJlbmNlID09PSB0aGlzLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgZnV0dXJlIHByZWRpY3RvcnMgb2YgdGhpcyBydWxlIGdldCBjb21wbGV0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwID0gc3RhdGUucnVsZS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuY29tcGxldGVkW2V4cF0gPSB0aGlzLmNvbXBsZXRlZFtleHBdIHx8IFtdKS5wdXNoKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBxdWV1ZSBzY2FubmFibGUgc3RhdGVzXG4gICAgICAgICAgICAgICAgdmFyIGV4cCA9IHN0YXRlLnJ1bGUuc3ltYm9sc1tzdGF0ZS5kb3RdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXhwICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uYWJsZS5wdXNoKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcHJlZGljdFxuICAgICAgICAgICAgICAgIGlmICh3YW50c1tleHBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhbnRzW2V4cF0ucHVzaChzdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZC5oYXNPd25Qcm9wZXJ0eShleHApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVsbHMgPSBjb21wbGV0ZWRbZXhwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmlnaHQgPSBudWxsc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlKHN0YXRlLCByaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3YW50c1tleHBdID0gW3N0YXRlXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVkaWN0KGV4cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQ29sdW1uLnByb3RvdHlwZS5wcmVkaWN0ID0gZnVuY3Rpb24oZXhwKSB7XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMuZ3JhbW1hci5ieU5hbWVbZXhwXSB8fCBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgciA9IHJ1bGVzW2ldO1xuICAgICAgICAgICAgdmFyIHdhbnRlZEJ5ID0gdGhpcy53YW50c1tleHBdO1xuICAgICAgICAgICAgdmFyIHMgPSBuZXcgU3RhdGUociwgMCwgdGhpcy5pbmRleCwgd2FudGVkQnkpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZXMucHVzaChzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIENvbHVtbi5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgICB2YXIgY29weSA9IGxlZnQubmV4dFN0YXRlKHJpZ2h0KTtcbiAgICAgICAgdGhpcy5zdGF0ZXMucHVzaChjb3B5KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIEdyYW1tYXIocnVsZXMsIHN0YXJ0KSB7XG4gICAgICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0IHx8IHRoaXMucnVsZXNbMF0ubmFtZTtcbiAgICAgICAgdmFyIGJ5TmFtZSA9IHRoaXMuYnlOYW1lID0ge307XG4gICAgICAgIHRoaXMucnVsZXMuZm9yRWFjaChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgICBpZiAoIWJ5TmFtZS5oYXNPd25Qcm9wZXJ0eShydWxlLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYnlOYW1lW3J1bGUubmFtZV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ5TmFtZVtydWxlLm5hbWVdLnB1c2gocnVsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFNvIHdlIGNhbiBhbGxvdyBwYXNzaW5nIChydWxlcywgc3RhcnQpIGRpcmVjdGx5IHRvIFBhcnNlciBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBHcmFtbWFyLmZyb21Db21waWxlZCA9IGZ1bmN0aW9uKHJ1bGVzLCBzdGFydCkge1xuICAgICAgICB2YXIgbGV4ZXIgPSBydWxlcy5MZXhlcjtcbiAgICAgICAgaWYgKHJ1bGVzLlBhcnNlclN0YXJ0KSB7XG4gICAgICAgICAgc3RhcnQgPSBydWxlcy5QYXJzZXJTdGFydDtcbiAgICAgICAgICBydWxlcyA9IHJ1bGVzLlBhcnNlclJ1bGVzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBydWxlcyA9IHJ1bGVzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gKG5ldyBSdWxlKHIubmFtZSwgci5zeW1ib2xzLCByLnBvc3Rwcm9jZXNzKSk7IH0pO1xuICAgICAgICB2YXIgZyA9IG5ldyBHcmFtbWFyKHJ1bGVzLCBzdGFydCk7XG4gICAgICAgIGcubGV4ZXIgPSBsZXhlcjsgLy8gbmIuIHN0b3JpbmcgbGV4ZXIgb24gR3JhbW1hciBpcyBpZmZ5LCBidXQgdW5hdm9pZGFibGVcbiAgICAgICAgcmV0dXJuIGc7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBTdHJlYW1MZXhlcigpIHtcbiAgICAgIHRoaXMucmVzZXQoXCJcIik7XG4gICAgfVxuXG4gICAgU3RyZWFtTGV4ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oZGF0YSwgc3RhdGUpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBkYXRhO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5saW5lID0gc3RhdGUgPyBzdGF0ZS5saW5lIDogMTtcbiAgICAgICAgdGhpcy5sYXN0TGluZUJyZWFrID0gc3RhdGUgPyAtc3RhdGUuY29sIDogMDtcbiAgICB9XG5cbiAgICBTdHJlYW1MZXhlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5pbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5idWZmZXJbdGhpcy5pbmRleCsrXTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgdGhpcy5saW5lICs9IDE7XG4gICAgICAgICAgICAgIHRoaXMubGFzdExpbmVCcmVhayA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge3ZhbHVlOiBjaH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTdHJlYW1MZXhlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogdGhpcy5saW5lLFxuICAgICAgICBjb2w6IHRoaXMuaW5kZXggLSB0aGlzLmxhc3RMaW5lQnJlYWssXG4gICAgICB9XG4gICAgfVxuXG4gICAgU3RyZWFtTGV4ZXIucHJvdG90eXBlLmZvcm1hdEVycm9yID0gZnVuY3Rpb24odG9rZW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gbmIuIHRoaXMgZ2V0cyBjYWxsZWQgYWZ0ZXIgY29uc3VtaW5nIHRoZSBvZmZlbmRpbmcgdG9rZW4sXG4gICAgICAgIC8vIHNvIHRoZSBjdWxwcml0IGlzIGluZGV4LTFcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IGJ1ZmZlclxuICAgICAgICAgICAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgICAgICAgICAgIC5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoMCwgdGhpcy5saW5lIC0gNSksIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB2YXIgbmV4dExpbmVCcmVhayA9IGJ1ZmZlci5pbmRleE9mKCdcXG4nLCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIGlmIChuZXh0TGluZUJyZWFrID09PSAtMSkgbmV4dExpbmVCcmVhayA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgY29sID0gdGhpcy5pbmRleCAtIHRoaXMubGFzdExpbmVCcmVhaztcbiAgICAgICAgICAgIHZhciBsYXN0TGluZURpZ2l0cyA9IFN0cmluZyh0aGlzLmxpbmUpLmxlbmd0aDtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCIgYXQgbGluZSBcIiArIHRoaXMubGluZSArIFwiIGNvbCBcIiArIGNvbCArIFwiOlxcblxcblwiO1xuICAgICAgICAgICAgbWVzc2FnZSArPSBsaW5lc1xuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obGluZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFkKHRoaXMubGluZSAtIGxpbmVzLmxlbmd0aCArIGkgKyAxLCBsYXN0TGluZURpZ2l0cykgKyBcIiBcIiArIGxpbmU7XG4gICAgICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCJcXG5cIiArIHBhZChcIlwiLCBsYXN0TGluZURpZ2l0cyArIGNvbCkgKyBcIl5cXG5cIjtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UgKyBcIiBhdCBpbmRleCBcIiArICh0aGlzLmluZGV4IC0gMSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYWQobiwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcyA9IFN0cmluZyhuKTtcbiAgICAgICAgICAgIHJldHVybiBBcnJheShsZW5ndGggLSBzLmxlbmd0aCArIDEpLmpvaW4oXCIgXCIpICsgcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIFBhcnNlcihydWxlcywgc3RhcnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHJ1bGVzIGluc3RhbmNlb2YgR3JhbW1hcikge1xuICAgICAgICAgICAgdmFyIGdyYW1tYXIgPSBydWxlcztcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZ3JhbW1hciA9IEdyYW1tYXIuZnJvbUNvbXBpbGVkKHJ1bGVzLCBzdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmFtbWFyID0gZ3JhbW1hcjtcblxuICAgICAgICAvLyBSZWFkIG9wdGlvbnNcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICAgICAga2VlcEhpc3Rvcnk6IGZhbHNlLFxuICAgICAgICAgICAgbGV4ZXI6IGdyYW1tYXIubGV4ZXIgfHwgbmV3IFN0cmVhbUxleGVyLFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gKG9wdGlvbnMgfHwge30pKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGxleGVyXG4gICAgICAgIHRoaXMubGV4ZXIgPSB0aGlzLm9wdGlvbnMubGV4ZXI7XG4gICAgICAgIHRoaXMubGV4ZXJTdGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBTZXR1cCBhIHRhYmxlXG4gICAgICAgIHZhciBjb2x1bW4gPSBuZXcgQ29sdW1uKGdyYW1tYXIsIDApO1xuICAgICAgICB2YXIgdGFibGUgPSB0aGlzLnRhYmxlID0gW2NvbHVtbl07XG5cbiAgICAgICAgLy8gSSBjb3VsZCBiZSBleHBlY3RpbmcgYW55dGhpbmcuXG4gICAgICAgIGNvbHVtbi53YW50c1tncmFtbWFyLnN0YXJ0XSA9IFtdO1xuICAgICAgICBjb2x1bW4ucHJlZGljdChncmFtbWFyLnN0YXJ0KTtcbiAgICAgICAgLy8gVE9ETyB3aGF0IGlmIHN0YXJ0IHJ1bGUgaXMgbnVsbGFibGU/XG4gICAgICAgIGNvbHVtbi5wcm9jZXNzKCk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IDA7IC8vIHRva2VuIGluZGV4XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGEgcmVzZXJ2ZWQgdG9rZW4gZm9yIGluZGljYXRpbmcgYSBwYXJzZSBmYWlsXG4gICAgUGFyc2VyLmZhaWwgPSB7fTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUuZmVlZCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICAgIHZhciBsZXhlciA9IHRoaXMubGV4ZXI7XG4gICAgICAgIGxleGVyLnJlc2V0KGNodW5rLCB0aGlzLmxleGVyU3RhdGUpO1xuXG4gICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSBsZXhlci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBuZXh0IGNvbHVtbiBzbyB0aGF0IHRoZSBlcnJvciByZXBvcnRlclxuICAgICAgICAgICAgICAgIC8vIGNhbiBkaXNwbGF5IHRoZSBjb3JyZWN0bHkgcHJlZGljdGVkIHN0YXRlcy5cbiAgICAgICAgICAgICAgICB2YXIgbmV4dENvbHVtbiA9IG5ldyBDb2x1bW4odGhpcy5ncmFtbWFyLCB0aGlzLmN1cnJlbnQgKyAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLnB1c2gobmV4dENvbHVtbik7XG4gICAgICAgICAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcih0aGlzLnJlcG9ydExleGVyRXJyb3IoZSkpO1xuICAgICAgICAgICAgICAgIGVyci5vZmZzZXQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZXJyLnRva2VuID0gZS50b2tlbjtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBhZGQgbmV3IHN0YXRlcyB0byB0YWJsZVtjdXJyZW50KzFdXG4gICAgICAgICAgICB2YXIgY29sdW1uID0gdGhpcy50YWJsZVt0aGlzLmN1cnJlbnRdO1xuXG4gICAgICAgICAgICAvLyBHQyB1bnVzZWQgc3RhdGVzXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5rZWVwSGlzdG9yeSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRhYmxlW3RoaXMuY3VycmVudCAtIDFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuY3VycmVudCArIDE7XG4gICAgICAgICAgICB2YXIgbmV4dENvbHVtbiA9IG5ldyBDb2x1bW4odGhpcy5ncmFtbWFyLCBuKTtcbiAgICAgICAgICAgIHRoaXMudGFibGUucHVzaChuZXh0Q29sdW1uKTtcblxuICAgICAgICAgICAgLy8gQWR2YW5jZSBhbGwgdG9rZW5zIHRoYXQgZXhwZWN0IHRoZSBzeW1ib2xcbiAgICAgICAgICAgIHZhciBsaXRlcmFsID0gdG9rZW4udGV4dCAhPT0gdW5kZWZpbmVkID8gdG9rZW4udGV4dCA6IHRva2VuLnZhbHVlO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gbGV4ZXIuY29uc3RydWN0b3IgPT09IFN0cmVhbUxleGVyID8gdG9rZW4udmFsdWUgOiB0b2tlbjtcbiAgICAgICAgICAgIHZhciBzY2FubmFibGUgPSBjb2x1bW4uc2Nhbm5hYmxlO1xuICAgICAgICAgICAgZm9yICh2YXIgdyA9IHNjYW5uYWJsZS5sZW5ndGg7IHctLTsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gc2Nhbm5hYmxlW3ddO1xuICAgICAgICAgICAgICAgIHZhciBleHBlY3QgPSBzdGF0ZS5ydWxlLnN5bWJvbHNbc3RhdGUuZG90XTtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gY29uc3VtZSB0aGUgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBlaXRoZXIgcmVnZXggb3IgbGl0ZXJhbFxuICAgICAgICAgICAgICAgIGlmIChleHBlY3QudGVzdCA/IGV4cGVjdC50ZXN0KHZhbHVlKSA6XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdC50eXBlID8gZXhwZWN0LnR5cGUgPT09IHRva2VuLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBleHBlY3QubGl0ZXJhbCA9PT0gbGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgaXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBzdGF0ZS5uZXh0U3RhdGUoe2RhdGE6IHZhbHVlLCB0b2tlbjogdG9rZW4sIGlzVG9rZW46IHRydWUsIHJlZmVyZW5jZTogbiAtIDF9KTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dENvbHVtbi5zdGF0ZXMucHVzaChuZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5leHQsIGZvciBlYWNoIG9mIHRoZSBydWxlcywgd2UgZWl0aGVyXG4gICAgICAgICAgICAvLyAoYSkgY29tcGxldGUgaXQsIGFuZCB0cnkgdG8gc2VlIGlmIHRoZSByZWZlcmVuY2Ugcm93IGV4cGVjdGVkIHRoYXRcbiAgICAgICAgICAgIC8vICAgICBydWxlXG4gICAgICAgICAgICAvLyAoYikgcHJlZGljdCB0aGUgbmV4dCBub250ZXJtaW5hbCBpdCBleHBlY3RzIGJ5IGFkZGluZyB0aGF0XG4gICAgICAgICAgICAvLyAgICAgbm9udGVybWluYWwncyBzdGFydCBzdGF0ZVxuICAgICAgICAgICAgLy8gVG8gcHJldmVudCBkdXBsaWNhdGlvbiwgd2UgYWxzbyBrZWVwIHRyYWNrIG9mIHJ1bGVzIHdlIGhhdmUgYWxyZWFkeVxuICAgICAgICAgICAgLy8gYWRkZWRcblxuICAgICAgICAgICAgbmV4dENvbHVtbi5wcm9jZXNzKCk7XG5cbiAgICAgICAgICAgIC8vIElmIG5lZWRlZCwgdGhyb3cgYW4gZXJyb3I6XG4gICAgICAgICAgICBpZiAobmV4dENvbHVtbi5zdGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gc3RhdGVzIGF0IGFsbCEgVGhpcyBpcyBub3QgZ29vZC5cbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKHRoaXMucmVwb3J0RXJyb3IodG9rZW4pKTtcbiAgICAgICAgICAgICAgICBlcnIub2Zmc2V0ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgICAgIGVyci50b2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWF5YmUgc2F2ZSBsZXhlciBzdGF0ZVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5rZWVwSGlzdG9yeSkge1xuICAgICAgICAgICAgICBjb2x1bW4ubGV4ZXJTdGF0ZSA9IGxleGVyLnNhdmUoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sdW1uKSB7XG4gICAgICAgICAgdGhpcy5sZXhlclN0YXRlID0gbGV4ZXIuc2F2ZSgpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmNyZW1lbnRhbGx5IGtlZXAgdHJhY2sgb2YgcmVzdWx0c1xuICAgICAgICB0aGlzLnJlc3VsdHMgPSB0aGlzLmZpbmlzaCgpO1xuXG4gICAgICAgIC8vIEFsbG93IGNoYWluaW5nLCBmb3Igd2hhdGV2ZXIgaXQncyB3b3J0aFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXBvcnRMZXhlckVycm9yID0gZnVuY3Rpb24obGV4ZXJFcnJvcikge1xuICAgICAgICB2YXIgdG9rZW5EaXNwbGF5LCBsZXhlck1lc3NhZ2U7XG4gICAgICAgIC8vIFBsYW5uaW5nIHRvIGFkZCBhIHRva2VuIHByb3BlcnR5IHRvIG1vbydzIHRocm93biBlcnJvclxuICAgICAgICAvLyBldmVuIG9uIGVycm9yaW5nIHRva2VucyB0byBiZSB1c2VkIGluIGVycm9yIGRpc3BsYXkgYmVsb3dcbiAgICAgICAgdmFyIHRva2VuID0gbGV4ZXJFcnJvci50b2tlbjtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB0b2tlbkRpc3BsYXkgPSBcImlucHV0IFwiICsgSlNPTi5zdHJpbmdpZnkodG9rZW4udGV4dFswXSkgKyBcIiAobGV4ZXIgZXJyb3IpXCI7XG4gICAgICAgICAgICBsZXhlck1lc3NhZ2UgPSB0aGlzLmxleGVyLmZvcm1hdEVycm9yKHRva2VuLCBcIlN5bnRheCBlcnJvclwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRva2VuRGlzcGxheSA9IFwiaW5wdXQgKGxleGVyIGVycm9yKVwiO1xuICAgICAgICAgICAgbGV4ZXJNZXNzYWdlID0gbGV4ZXJFcnJvci5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlcG9ydEVycm9yQ29tbW9uKGxleGVyTWVzc2FnZSwgdG9rZW5EaXNwbGF5KTtcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXBvcnRFcnJvciA9IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIHZhciB0b2tlbkRpc3BsYXkgPSAodG9rZW4udHlwZSA/IHRva2VuLnR5cGUgKyBcIiB0b2tlbjogXCIgOiBcIlwiKSArIEpTT04uc3RyaW5naWZ5KHRva2VuLnZhbHVlICE9PSB1bmRlZmluZWQgPyB0b2tlbi52YWx1ZSA6IHRva2VuKTtcbiAgICAgICAgdmFyIGxleGVyTWVzc2FnZSA9IHRoaXMubGV4ZXIuZm9ybWF0RXJyb3IodG9rZW4sIFwiU3ludGF4IGVycm9yXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBvcnRFcnJvckNvbW1vbihsZXhlck1lc3NhZ2UsIHRva2VuRGlzcGxheSk7XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUucmVwb3J0RXJyb3JDb21tb24gPSBmdW5jdGlvbihsZXhlck1lc3NhZ2UsIHRva2VuRGlzcGxheSkge1xuICAgICAgICB2YXIgbGluZXMgPSBbXTtcbiAgICAgICAgbGluZXMucHVzaChsZXhlck1lc3NhZ2UpO1xuICAgICAgICB2YXIgbGFzdENvbHVtbkluZGV4ID0gdGhpcy50YWJsZS5sZW5ndGggLSAyO1xuICAgICAgICB2YXIgbGFzdENvbHVtbiA9IHRoaXMudGFibGVbbGFzdENvbHVtbkluZGV4XTtcbiAgICAgICAgdmFyIGV4cGVjdGFudFN0YXRlcyA9IGxhc3RDb2x1bW4uc3RhdGVzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRTeW1ib2wgPSBzdGF0ZS5ydWxlLnN5bWJvbHNbc3RhdGUuZG90XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFN5bWJvbCAmJiB0eXBlb2YgbmV4dFN5bWJvbCAhPT0gXCJzdHJpbmdcIjtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChleHBlY3RhbnRTdGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKCdVbmV4cGVjdGVkICcgKyB0b2tlbkRpc3BsYXkgKyAnLiBJIGRpZCBub3QgZXhwZWN0IGFueSBtb3JlIGlucHV0LiBIZXJlIGlzIHRoZSBzdGF0ZSBvZiBteSBwYXJzZSB0YWJsZTpcXG4nKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0YXRlU3RhY2sobGFzdENvbHVtbi5zdGF0ZXMsIGxpbmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJ1VuZXhwZWN0ZWQgJyArIHRva2VuRGlzcGxheSArICcuIEluc3RlYWQsIEkgd2FzIGV4cGVjdGluZyB0byBzZWUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XFxuJyk7XG4gICAgICAgICAgICAvLyBEaXNwbGF5IGEgXCJzdGF0ZSBzdGFja1wiIGZvciBlYWNoIGV4cGVjdGFudCBzdGF0ZVxuICAgICAgICAgICAgLy8gLSB3aGljaCBzaG93cyB5b3UgaG93IHRoaXMgc3RhdGUgY2FtZSB0byBiZSwgc3RlcCBieSBzdGVwLlxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBkZXJpdmF0aW9uLCB3ZSBvbmx5IGRpc3BsYXkgdGhlIGZpcnN0IG9uZS5cbiAgICAgICAgICAgIHZhciBzdGF0ZVN0YWNrcyA9IGV4cGVjdGFudFN0YXRlc1xuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRGaXJzdFN0YXRlU3RhY2soc3RhdGUsIFtdKSB8fCBbc3RhdGVdO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgLy8gRGlzcGxheSBlYWNoIHN0YXRlIHRoYXQgaXMgZXhwZWN0aW5nIGEgdGVybWluYWwgc3ltYm9sIG5leHQuXG4gICAgICAgICAgICBzdGF0ZVN0YWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXRlU3RhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZVN0YWNrWzBdO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0U3ltYm9sID0gc3RhdGUucnVsZS5zeW1ib2xzW3N0YXRlLmRvdF07XG4gICAgICAgICAgICAgICAgdmFyIHN5bWJvbERpc3BsYXkgPSB0aGlzLmdldFN5bWJvbERpc3BsYXkobmV4dFN5bWJvbCk7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnQSAnICsgc3ltYm9sRGlzcGxheSArICcgYmFzZWQgb246Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3RhdGVTdGFjayhzdGF0ZVN0YWNrLCBsaW5lcyk7XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBsaW5lcy5wdXNoKFwiXCIpO1xuICAgICAgICByZXR1cm4gbGluZXMuam9pbihcIlxcblwiKTtcbiAgICB9XG4gICAgXG4gICAgUGFyc2VyLnByb3RvdHlwZS5kaXNwbGF5U3RhdGVTdGFjayA9IGZ1bmN0aW9uKHN0YXRlU3RhY2ssIGxpbmVzKSB7XG4gICAgICAgIHZhciBsYXN0RGlzcGxheTtcbiAgICAgICAgdmFyIHNhbWVEaXNwbGF5Q291bnQgPSAwO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0YXRlU3RhY2subGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0YXRlU3RhY2tbal07XG4gICAgICAgICAgICB2YXIgZGlzcGxheSA9IHN0YXRlLnJ1bGUudG9TdHJpbmcoc3RhdGUuZG90KTtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5ID09PSBsYXN0RGlzcGxheSkge1xuICAgICAgICAgICAgICAgIHNhbWVEaXNwbGF5Q291bnQrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHNhbWVEaXNwbGF5Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICBeICcgKyBzYW1lRGlzcGxheUNvdW50ICsgJyBtb3JlIGxpbmVzIGlkZW50aWNhbCB0byB0aGlzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNhbWVEaXNwbGF5Q291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICAnICsgZGlzcGxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0RGlzcGxheSA9IGRpc3BsYXk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5nZXRTeW1ib2xEaXNwbGF5ID0gZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBnZXRTeW1ib2xMb25nRGlzcGxheShzeW1ib2wpO1xuICAgIH07XG5cbiAgICAvKlxuICAgIEJ1aWxkcyBhIHRoZSBmaXJzdCBzdGF0ZSBzdGFjay4gWW91IGNhbiB0aGluayBvZiBhIHN0YXRlIHN0YWNrIGFzIHRoZSBjYWxsIHN0YWNrXG4gICAgb2YgdGhlIHJlY3Vyc2l2ZS1kZXNjZW50IHBhcnNlciB3aGljaCB0aGUgTmVhcmxleSBwYXJzZSBhbGdvcml0aG0gc2ltdWxhdGVzLlxuICAgIEEgc3RhdGUgc3RhY2sgaXMgcmVwcmVzZW50ZWQgYXMgYW4gYXJyYXkgb2Ygc3RhdGUgb2JqZWN0cy4gV2l0aGluIGFcbiAgICBzdGF0ZSBzdGFjaywgdGhlIGZpcnN0IGl0ZW0gb2YgdGhlIGFycmF5IHdpbGwgYmUgdGhlIHN0YXJ0aW5nXG4gICAgc3RhdGUsIHdpdGggZWFjaCBzdWNjZXNzaXZlIGl0ZW0gaW4gdGhlIGFycmF5IGdvaW5nIGZ1cnRoZXIgYmFjayBpbnRvIGhpc3RvcnkuXG5cbiAgICBUaGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGdpdmVuIGEgc3RhcnRpbmcgc3RhdGUgYW5kIGFuIGVtcHR5IGFycmF5IHJlcHJlc2VudGluZ1xuICAgIHRoZSB2aXNpdGVkIHN0YXRlcywgYW5kIGl0IHJldHVybnMgYW4gc2luZ2xlIHN0YXRlIHN0YWNrLlxuXG4gICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLmJ1aWxkRmlyc3RTdGF0ZVN0YWNrID0gZnVuY3Rpb24oc3RhdGUsIHZpc2l0ZWQpIHtcbiAgICAgICAgaWYgKHZpc2l0ZWQuaW5kZXhPZihzdGF0ZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBGb3VuZCBjeWNsZSwgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIC8vIHRvIGVsaW1pbmF0ZSB0aGlzIHBhdGggZnJvbSB0aGUgcmVzdWx0cywgYmVjYXVzZVxuICAgICAgICAgICAgLy8gd2UgZG9uJ3Qga25vdyBob3cgdG8gZGlzcGxheSBpdCBtZWFuaW5nZnVsbHlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS53YW50ZWRCeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbc3RhdGVdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2U3RhdGUgPSBzdGF0ZS53YW50ZWRCeVswXTtcbiAgICAgICAgdmFyIGNoaWxkVmlzaXRlZCA9IFtzdGF0ZV0uY29uY2F0KHZpc2l0ZWQpO1xuICAgICAgICB2YXIgY2hpbGRSZXN1bHQgPSB0aGlzLmJ1aWxkRmlyc3RTdGF0ZVN0YWNrKHByZXZTdGF0ZSwgY2hpbGRWaXNpdGVkKTtcbiAgICAgICAgaWYgKGNoaWxkUmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3N0YXRlXS5jb25jYXQoY2hpbGRSZXN1bHQpO1xuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMudGFibGVbdGhpcy5jdXJyZW50XTtcbiAgICAgICAgY29sdW1uLmxleGVyU3RhdGUgPSB0aGlzLmxleGVyU3RhdGU7XG4gICAgICAgIHJldHVybiBjb2x1bW47XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICB2YXIgaW5kZXggPSBjb2x1bW4uaW5kZXg7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGluZGV4O1xuICAgICAgICB0aGlzLnRhYmxlW2luZGV4XSA9IGNvbHVtbjtcbiAgICAgICAgdGhpcy50YWJsZS5zcGxpY2UoaW5kZXggKyAxKTtcbiAgICAgICAgdGhpcy5sZXhlclN0YXRlID0gY29sdW1uLmxleGVyU3RhdGU7XG5cbiAgICAgICAgLy8gSW5jcmVtZW50YWxseSBrZWVwIHRyYWNrIG9mIHJlc3VsdHNcbiAgICAgICAgdGhpcy5yZXN1bHRzID0gdGhpcy5maW5pc2goKTtcbiAgICB9O1xuXG4gICAgLy8gbmIuIGRlcHJlY2F0ZWQ6IHVzZSBzYXZlL3Jlc3RvcmUgaW5zdGVhZCFcbiAgICBQYXJzZXIucHJvdG90eXBlLnJld2luZCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmtlZXBIaXN0b3J5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldCBvcHRpb24gYGtlZXBIaXN0b3J5YCB0byBlbmFibGUgcmV3aW5kaW5nJylcbiAgICAgICAgfVxuICAgICAgICAvLyBuYi4gcmVjYWxsIGNvbHVtbiAodGFibGUpIGluZGljaWVzIGZhbGwgYmV0d2VlbiB0b2tlbiBpbmRpY2llcy5cbiAgICAgICAgLy8gICAgICAgIGNvbCAwICAgLS0gICB0b2tlbiAwICAgLS0gICBjb2wgMVxuICAgICAgICB0aGlzLnJlc3RvcmUodGhpcy50YWJsZVtpbmRleF0pO1xuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBSZXR1cm4gdGhlIHBvc3NpYmxlIHBhcnNpbmdzXG4gICAgICAgIHZhciBjb25zaWRlcmF0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmdyYW1tYXIuc3RhcnQ7XG4gICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlW3RoaXMudGFibGUubGVuZ3RoIC0gMV1cbiAgICAgICAgY29sdW1uLnN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBpZiAodC5ydWxlLm5hbWUgPT09IHN0YXJ0XG4gICAgICAgICAgICAgICAgICAgICYmIHQuZG90ID09PSB0LnJ1bGUuc3ltYm9scy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgJiYgdC5yZWZlcmVuY2UgPT09IDBcbiAgICAgICAgICAgICAgICAgICAgJiYgdC5kYXRhICE9PSBQYXJzZXIuZmFpbCkge1xuICAgICAgICAgICAgICAgIGNvbnNpZGVyYXRpb25zLnB1c2godCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29uc2lkZXJhdGlvbnMubWFwKGZ1bmN0aW9uKGMpIHtyZXR1cm4gYy5kYXRhOyB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0U3ltYm9sTG9uZ0Rpc3BsYXkoc3ltYm9sKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHN5bWJvbDtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgaWYgKHN5bWJvbC5saXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN5bWJvbC5saXRlcmFsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjaGFyYWN0ZXIgbWF0Y2hpbmcgJyArIHN5bWJvbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sLnR5cGUgKyAnIHRva2VuJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnRlc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3Rva2VuIG1hdGNoaW5nICcgKyBTdHJpbmcoc3ltYm9sLnRlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gc3ltYm9sIHR5cGU6ICcgKyBzeW1ib2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3ltYm9sU2hvcnREaXNwbGF5KHN5bWJvbCkge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBzeW1ib2w7XG4gICAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmIChzeW1ib2wubGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzeW1ib2wubGl0ZXJhbCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN5bWJvbCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2wudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyUnICsgc3ltYm9sLnR5cGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN5bWJvbC50ZXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc8JyArIFN0cmluZyhzeW1ib2wudGVzdCkgKyAnPic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBzeW1ib2wgdHlwZTogJyArIHN5bWJvbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBQYXJzZXI6IFBhcnNlcixcbiAgICAgICAgR3JhbW1hcjogR3JhbW1hcixcbiAgICAgICAgUnVsZTogUnVsZSxcbiAgICB9O1xuXG59KSk7XG4iLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gR2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkgYnkgbmVhcmxleSwgdmVyc2lvbiAyLjIwLjFcbi8vIGh0dHA6Ly9naXRodWIuY29tL0hhcmRtYXRoMTIzL25lYXJsZXlcbi8vIEJ5cGFzc2VzIFRTNjEzMy4gQWxsb3cgZGVjbGFyZWQgYnV0IHVudXNlZCBmdW5jdGlvbnMuXG4vLyBAdHMtaWdub3JlXG5mdW5jdGlvbiBpZChkKSB7IHJldHVybiBkWzBdOyB9XG5jb25zdCBkZWVwRmxhdHRlbiA9IChhcnIpID0+IFtdLmNvbmNhdCguLi5hcnIubWFwKCh2KSA9PiAoQXJyYXkuaXNBcnJheSh2KSA/IGRlZXBGbGF0dGVuKHYpIDogdikpKTtcbmZ1bmN0aW9uIGZsYXRfc3RyaW5nKGQpIHtcbiAgICBpZiAoZCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkKSlcbiAgICAgICAgICAgIHJldHVybiBkZWVwRmxhdHRlbihkKS5qb2luKFwiXCIpO1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG59XG47XG47XG47XG47XG5jb25zdCBncmFtbWFyID0ge1xuICAgIExleGVyOiB1bmRlZmluZWQsXG4gICAgUGFyc2VyUnVsZXM6IFtcbiAgICAgICAgeyBcIm5hbWVcIjogXCJSZXZlcnNlX3BhdGhcIiwgXCJzeW1ib2xzXCI6IFtcIlBhdGhcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJSZXZlcnNlX3BhdGgkc3RyaW5nJDFcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIjxcIiB9LCB7IFwibGl0ZXJhbFwiOiBcIj5cIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiAoZCkgPT4gZC5qb2luKCcnKSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlJldmVyc2VfcGF0aFwiLCBcInN5bWJvbHNcIjogW1wiUmV2ZXJzZV9wYXRoJHN0cmluZyQxXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiRm9yd2FyZF9wYXRoJHN1YmV4cHJlc3Npb24kMSRzdWJleHByZXNzaW9uJDFcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIjxcIiB9LCAvW3BQXS8sIC9bb09dLywgL1tzU10vLCAvW3RUXS8sIC9bbU1dLywgL1thQV0vLCAvW3NTXS8sIC9bdFRdLywgL1tlRV0vLCAvW3JSXS8sIHsgXCJsaXRlcmFsXCI6IFwiQFwiIH1dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmpvaW4oXCJcIik7IH0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJGb3J3YXJkX3BhdGgkc3ViZXhwcmVzc2lvbiQxXCIsIFwic3ltYm9sc1wiOiBbXCJGb3J3YXJkX3BhdGgkc3ViZXhwcmVzc2lvbiQxJHN1YmV4cHJlc3Npb24kMVwiLCBcIkRvbWFpblwiLCB7IFwibGl0ZXJhbFwiOiBcIj5cIiB9XSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkZvcndhcmRfcGF0aFwiLCBcInN5bWJvbHNcIjogW1wiRm9yd2FyZF9wYXRoJHN1YmV4cHJlc3Npb24kMVwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkZvcndhcmRfcGF0aCRzdWJleHByZXNzaW9uJDJcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIjxcIiB9LCAvW3BQXS8sIC9bb09dLywgL1tzU10vLCAvW3RUXS8sIC9bbU1dLywgL1thQV0vLCAvW3NTXS8sIC9bdFRdLywgL1tlRV0vLCAvW3JSXS8sIHsgXCJsaXRlcmFsXCI6IFwiPlwiIH1dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmpvaW4oXCJcIik7IH0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJGb3J3YXJkX3BhdGhcIiwgXCJzeW1ib2xzXCI6IFtcIkZvcndhcmRfcGF0aCRzdWJleHByZXNzaW9uJDJcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJGb3J3YXJkX3BhdGhcIiwgXCJzeW1ib2xzXCI6IFtcIlBhdGhcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJQYXRoJGVibmYkMSRzdWJleHByZXNzaW9uJDFcIiwgXCJzeW1ib2xzXCI6IFtcIkFfZF9sXCIsIHsgXCJsaXRlcmFsXCI6IFwiOlwiIH1dIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiUGF0aCRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtcIlBhdGgkZWJuZiQxJHN1YmV4cHJlc3Npb24kMVwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBpZCB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlBhdGgkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXSwgXCJwb3N0cHJvY2Vzc1wiOiAoKSA9PiBudWxsIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiUGF0aFwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiPFwiIH0sIFwiUGF0aCRlYm5mJDFcIiwgXCJNYWlsYm94XCIsIHsgXCJsaXRlcmFsXCI6IFwiPlwiIH1dIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiQV9kX2wkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkFfZF9sJGVibmYkMSRzdWJleHByZXNzaW9uJDFcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIixcIiB9LCBcIkF0X2RvbWFpblwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkFfZF9sJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW1wiQV9kX2wkZWJuZiQxXCIsIFwiQV9kX2wkZWJuZiQxJHN1YmV4cHJlc3Npb24kMVwiXSwgXCJwb3N0cHJvY2Vzc1wiOiAoZCkgPT4gZFswXS5jb25jYXQoW2RbMV1dKSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkFfZF9sXCIsIFwic3ltYm9sc1wiOiBbXCJBdF9kb21haW5cIiwgXCJBX2RfbCRlYm5mJDFcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJBdF9kb21haW5cIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIkBcIiB9LCBcIkRvbWFpblwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkRvbWFpbiRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiRG9tYWluJGVibmYkMSRzdWJleHByZXNzaW9uJDFcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIi5cIiB9LCBcInN1Yl9kb21haW5cIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJEb21haW4kZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXCJEb21haW4kZWJuZiQxXCIsIFwiRG9tYWluJGVibmYkMSRzdWJleHByZXNzaW9uJDFcIl0sIFwicG9zdHByb2Nlc3NcIjogKGQpID0+IGRbMF0uY29uY2F0KFtkWzFdXSkgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJEb21haW5cIiwgXCJzeW1ib2xzXCI6IFtcInN1Yl9kb21haW5cIiwgXCJEb21haW4kZWJuZiQxXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwic3ViX2RvbWFpblwiLCBcInN5bWJvbHNcIjogW1wiVV9sYWJlbFwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkxldF9kaWdcIiwgXCJzeW1ib2xzXCI6IFtcIkFMUEhBX0RJR0lUXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiTGRoX3N0ciRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiTGRoX3N0ciRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtcIkxkaF9zdHIkZWJuZiQxXCIsIFwiQUxQSEFfRElHX0RBU0hcIl0sIFwicG9zdHByb2Nlc3NcIjogKGQpID0+IGRbMF0uY29uY2F0KFtkWzFdXSkgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJMZGhfc3RyXCIsIFwic3ltYm9sc1wiOiBbXCJMZGhfc3RyJGVibmYkMVwiLCBcIkxldF9kaWdcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJVX0xldF9kaWdcIiwgXCJzeW1ib2xzXCI6IFtcIkFMUEhBX0RJR0lUX1VcIl0sIFwicG9zdHByb2Nlc3NcIjogaWQgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJVX0xkaF9zdHIkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlVfTGRoX3N0ciRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtcIlVfTGRoX3N0ciRlYm5mJDFcIiwgXCJBTFBIQV9ESUdfREFTSF9VXCJdLCBcInBvc3Rwcm9jZXNzXCI6IChkKSA9PiBkWzBdLmNvbmNhdChbZFsxXV0pIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiVV9MZGhfc3RyXCIsIFwic3ltYm9sc1wiOiBbXCJVX0xkaF9zdHIkZWJuZiQxXCIsIFwiVV9MZXRfZGlnXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiVV9sYWJlbCRlYm5mJDEkc3ViZXhwcmVzc2lvbiQxXCIsIFwic3ltYm9sc1wiOiBbXCJVX0xkaF9zdHJcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJVX2xhYmVsJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW1wiVV9sYWJlbCRlYm5mJDEkc3ViZXhwcmVzc2lvbiQxXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiVV9sYWJlbCRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtdLCBcInBvc3Rwcm9jZXNzXCI6ICgpID0+IG51bGwgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJVX2xhYmVsXCIsIFwic3ltYm9sc1wiOiBbXCJVX0xldF9kaWdcIiwgXCJVX2xhYmVsJGVibmYkMVwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcImFkZHJlc3NfbGl0ZXJhbCRzdWJleHByZXNzaW9uJDFcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjRfYWRkcmVzc19saXRlcmFsXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiYWRkcmVzc19saXRlcmFsJHN1YmV4cHJlc3Npb24kMVwiLCBcInN5bWJvbHNcIjogW1wiSVB2Nl9hZGRyZXNzX2xpdGVyYWxcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJhZGRyZXNzX2xpdGVyYWwkc3ViZXhwcmVzc2lvbiQxXCIsIFwic3ltYm9sc1wiOiBbXCJHZW5lcmFsX2FkZHJlc3NfbGl0ZXJhbFwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcImFkZHJlc3NfbGl0ZXJhbFwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiW1wiIH0sIFwiYWRkcmVzc19saXRlcmFsJHN1YmV4cHJlc3Npb24kMVwiLCB7IFwibGl0ZXJhbFwiOiBcIl1cIiB9XSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIm5vbl9sb2NhbF9wYXJ0XCIsIFwic3ltYm9sc1wiOiBbXCJEb21haW5cIl0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBEb21haW5OYW1lOiBmbGF0X3N0cmluZyhkWzBdKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIm5vbl9sb2NhbF9wYXJ0XCIsIFwic3ltYm9sc1wiOiBbXCJhZGRyZXNzX2xpdGVyYWxcIl0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBBZGRyZXNzTGl0ZXJhbDogZmxhdF9zdHJpbmcoZFswXSkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJNYWlsYm94XCIsIFwic3ltYm9sc1wiOiBbXCJMb2NhbF9wYXJ0XCIsIHsgXCJsaXRlcmFsXCI6IFwiQFwiIH0sIFwibm9uX2xvY2FsX3BhcnRcIl0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBsb2NhbFBhcnQ6IGZsYXRfc3RyaW5nKGRbMF0pLCBkb21haW5QYXJ0OiBmbGF0X3N0cmluZyhkWzJdKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkxvY2FsX3BhcnRcIiwgXCJzeW1ib2xzXCI6IFtcIkRvdF9zdHJpbmdcIl0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBEb3RTdHJpbmc6IGZsYXRfc3RyaW5nKGRbMF0pIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiTG9jYWxfcGFydFwiLCBcInN5bWJvbHNcIjogW1wiUXVvdGVkX3N0cmluZ1wiXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IFF1b3RlZFN0cmluZzogZmxhdF9zdHJpbmcoZFswXSkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJEb3Rfc3RyaW5nJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW10gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJEb3Rfc3RyaW5nJGVibmYkMSRzdWJleHByZXNzaW9uJDFcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIi5cIiB9LCBcIkF0b21cIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJEb3Rfc3RyaW5nJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW1wiRG90X3N0cmluZyRlYm5mJDFcIiwgXCJEb3Rfc3RyaW5nJGVibmYkMSRzdWJleHByZXNzaW9uJDFcIl0sIFwicG9zdHByb2Nlc3NcIjogKGQpID0+IGRbMF0uY29uY2F0KFtkWzFdXSkgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJEb3Rfc3RyaW5nXCIsIFwic3ltYm9sc1wiOiBbXCJBdG9tXCIsIFwiRG90X3N0cmluZyRlYm5mJDFcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJBdG9tJGVibmYkMVwiLCBcInN5bWJvbHNcIjogWy9bMC05QS1aYS16ISMkJSYnKitcXC0vPT9eX2B7fH1+XFx1MDA4MC1cXHVGRkZGL10vXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkF0b20kZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXCJBdG9tJGVibmYkMVwiLCAvWzAtOUEtWmEteiEjJCUmJyorXFwtLz0/Xl9ge3x9flxcdTAwODAtXFx1RkZGRi9dL10sIFwicG9zdHByb2Nlc3NcIjogKGQpID0+IGRbMF0uY29uY2F0KFtkWzFdXSkgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJBdG9tXCIsIFwic3ltYm9sc1wiOiBbXCJBdG9tJGVibmYkMVwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlF1b3RlZF9zdHJpbmckZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlF1b3RlZF9zdHJpbmckZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXCJRdW90ZWRfc3RyaW5nJGVibmYkMVwiLCBcIlFjb250ZW50U01UUFwiXSwgXCJwb3N0cHJvY2Vzc1wiOiAoZCkgPT4gZFswXS5jb25jYXQoW2RbMV1dKSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlF1b3RlZF9zdHJpbmdcIiwgXCJzeW1ib2xzXCI6IFtcIkRRVU9URVwiLCBcIlF1b3RlZF9zdHJpbmckZWJuZiQxXCIsIFwiRFFVT1RFXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiUWNvbnRlbnRTTVRQXCIsIFwic3ltYm9sc1wiOiBbXCJxdGV4dFNNVFBcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJRY29udGVudFNNVFBcIiwgXCJzeW1ib2xzXCI6IFtcInF1b3RlZF9wYWlyU01UUFwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcInF1b3RlZF9wYWlyU01UUFwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiXFxcXFwiIH0sIC9bXFx4MjAtXFx4N2VdL10gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJxdGV4dFNNVFBcIiwgXCJzeW1ib2xzXCI6IFsvW1xceDIwLVxceDIxXFx4MjMtXFx4NWJcXHg1ZC1cXHg3ZVxcdTAwODAtXFx1RkZGRl0vXSwgXCJwb3N0cHJvY2Vzc1wiOiBpZCB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjRfYWRkcmVzc19saXRlcmFsJG1hY3JvY2FsbCQyXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCIuXCIgfSwgXCJTbnVtXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NF9hZGRyZXNzX2xpdGVyYWwkbWFjcm9jYWxsJDFcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjRfYWRkcmVzc19saXRlcmFsJG1hY3JvY2FsbCQyXCIsIFwiSVB2NF9hZGRyZXNzX2xpdGVyYWwkbWFjcm9jYWxsJDJcIiwgXCJJUHY0X2FkZHJlc3NfbGl0ZXJhbCRtYWNyb2NhbGwkMlwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjRfYWRkcmVzc19saXRlcmFsXCIsIFwic3ltYm9sc1wiOiBbXCJTbnVtXCIsIFwiSVB2NF9hZGRyZXNzX2xpdGVyYWwkbWFjcm9jYWxsJDFcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2FkZHJlc3NfbGl0ZXJhbCRzdWJleHByZXNzaW9uJDFcIiwgXCJzeW1ib2xzXCI6IFsvW2lJXS8sIC9bcFBdLywgL1t2Vl0vLCB7IFwibGl0ZXJhbFwiOiBcIjZcIiB9LCB7IFwibGl0ZXJhbFwiOiBcIjpcIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5qb2luKFwiXCIpOyB9IH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9hZGRyZXNzX2xpdGVyYWxcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjZfYWRkcmVzc19saXRlcmFsJHN1YmV4cHJlc3Npb24kMVwiLCBcIklQdjZfYWRkclwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkdlbmVyYWxfYWRkcmVzc19saXRlcmFsJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW1wiZGNvbnRlbnRcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJHZW5lcmFsX2FkZHJlc3NfbGl0ZXJhbCRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtcIkdlbmVyYWxfYWRkcmVzc19saXRlcmFsJGVibmYkMVwiLCBcImRjb250ZW50XCJdLCBcInBvc3Rwcm9jZXNzXCI6IChkKSA9PiBkWzBdLmNvbmNhdChbZFsxXV0pIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiR2VuZXJhbF9hZGRyZXNzX2xpdGVyYWxcIiwgXCJzeW1ib2xzXCI6IFtcIlN0YW5kYXJkaXplZF90YWdcIiwgeyBcImxpdGVyYWxcIjogXCI6XCIgfSwgXCJHZW5lcmFsX2FkZHJlc3NfbGl0ZXJhbCRlYm5mJDFcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJTdGFuZGFyZGl6ZWRfdGFnXCIsIFwic3ltYm9sc1wiOiBbXCJMZGhfc3RyXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiZGNvbnRlbnRcIiwgXCJzeW1ib2xzXCI6IFsvW1xceDIxLVxceDVhXFx4NWUtXFx4N2VdL10sIFwicG9zdHByb2Nlc3NcIjogaWQgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJTbnVtXCIsIFwic3ltYm9sc1wiOiBbXCJESUdJVFwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlNudW0kc3ViZXhwcmVzc2lvbiQxXCIsIFwic3ltYm9sc1wiOiBbL1sxLTldLywgXCJESUdJVFwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlNudW1cIiwgXCJzeW1ib2xzXCI6IFtcIlNudW0kc3ViZXhwcmVzc2lvbiQxXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiU251bSRzdWJleHByZXNzaW9uJDJcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIjFcIiB9LCBcIkRJR0lUXCIsIFwiRElHSVRcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJTbnVtXCIsIFwic3ltYm9sc1wiOiBbXCJTbnVtJHN1YmV4cHJlc3Npb24kMlwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlNudW0kc3ViZXhwcmVzc2lvbiQzXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCIyXCIgfSwgL1swLTRdLywgXCJESUdJVFwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlNudW1cIiwgXCJzeW1ib2xzXCI6IFtcIlNudW0kc3ViZXhwcmVzc2lvbiQzXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiU251bSRzdWJleHByZXNzaW9uJDRcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIjJcIiB9LCB7IFwibGl0ZXJhbFwiOiBcIjVcIiB9LCAvWzAtNV0vXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIlNudW1cIiwgXCJzeW1ib2xzXCI6IFtcIlNudW0kc3ViZXhwcmVzc2lvbiQ0XCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9hZGRyXCIsIFwic3ltYm9sc1wiOiBbXCJJUHY2X2Z1bGxcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2FkZHJcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjZfY29tcFwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZfYWRkclwiLCBcInN5bWJvbHNcIjogW1wiSVB2NnY0X2Z1bGxcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2FkZHJcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjZ2NF9jb21wXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9oZXhcIiwgXCJzeW1ib2xzXCI6IFtcIkhFWERJR1wiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZfaGV4JHN1YmV4cHJlc3Npb24kMVwiLCBcInN5bWJvbHNcIjogW1wiSEVYRElHXCIsIFwiSEVYRElHXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9oZXhcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjZfaGV4JHN1YmV4cHJlc3Npb24kMVwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZfaGV4JHN1YmV4cHJlc3Npb24kMlwiLCBcInN5bWJvbHNcIjogW1wiSEVYRElHXCIsIFwiSEVYRElHXCIsIFwiSEVYRElHXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9oZXhcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjZfaGV4JHN1YmV4cHJlc3Npb24kMlwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZfaGV4JHN1YmV4cHJlc3Npb24kM1wiLCBcInN5bWJvbHNcIjogW1wiSEVYRElHXCIsIFwiSEVYRElHXCIsIFwiSEVYRElHXCIsIFwiSEVYRElHXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9oZXhcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjZfaGV4JHN1YmV4cHJlc3Npb24kM1wiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZfZnVsbCRtYWNyb2NhbGwkMlwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiOlwiIH0sIFwiSVB2Nl9oZXhcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2Z1bGwkbWFjcm9jYWxsJDFcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjZfZnVsbCRtYWNyb2NhbGwkMlwiLCBcIklQdjZfZnVsbCRtYWNyb2NhbGwkMlwiLCBcIklQdjZfZnVsbCRtYWNyb2NhbGwkMlwiLCBcIklQdjZfZnVsbCRtYWNyb2NhbGwkMlwiLCBcIklQdjZfZnVsbCRtYWNyb2NhbGwkMlwiLCBcIklQdjZfZnVsbCRtYWNyb2NhbGwkMlwiLCBcIklQdjZfZnVsbCRtYWNyb2NhbGwkMlwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZfZnVsbFwiLCBcInN5bWJvbHNcIjogW1wiSVB2Nl9oZXhcIiwgXCJJUHY2X2Z1bGwkbWFjcm9jYWxsJDFcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2NvbXAkZWJuZiQxJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMlwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiOlwiIH0sIFwiSVB2Nl9oZXhcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2NvbXAkZWJuZiQxJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMVwiLCBcInN5bWJvbHNcIjogW1wiSVB2Nl9jb21wJGVibmYkMSRzdWJleHByZXNzaW9uJDEkbWFjcm9jYWxsJDJcIiwgXCJJUHY2X2NvbXAkZWJuZiQxJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMlwiLCBcIklQdjZfY29tcCRlYm5mJDEkc3ViZXhwcmVzc2lvbiQxJG1hY3JvY2FsbCQyXCIsIFwiSVB2Nl9jb21wJGVibmYkMSRzdWJleHByZXNzaW9uJDEkbWFjcm9jYWxsJDJcIiwgXCJJUHY2X2NvbXAkZWJuZiQxJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMlwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZfY29tcCRlYm5mJDEkc3ViZXhwcmVzc2lvbiQxXCIsIFwic3ltYm9sc1wiOiBbXCJJUHY2X2hleFwiLCBcIklQdjZfY29tcCRlYm5mJDEkc3ViZXhwcmVzc2lvbiQxJG1hY3JvY2FsbCQxXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9jb21wJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW1wiSVB2Nl9jb21wJGVibmYkMSRzdWJleHByZXNzaW9uJDFcIl0sIFwicG9zdHByb2Nlc3NcIjogaWQgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2NvbXAkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXSwgXCJwb3N0cHJvY2Vzc1wiOiAoKSA9PiBudWxsIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9jb21wJHN0cmluZyQxXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCI6XCIgfSwgeyBcImxpdGVyYWxcIjogXCI6XCIgfV0sIFwicG9zdHByb2Nlc3NcIjogKGQpID0+IGQuam9pbignJykgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2NvbXAkZWJuZiQyJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMlwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiOlwiIH0sIFwiSVB2Nl9oZXhcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2NvbXAkZWJuZiQyJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMVwiLCBcInN5bWJvbHNcIjogW1wiSVB2Nl9jb21wJGVibmYkMiRzdWJleHByZXNzaW9uJDEkbWFjcm9jYWxsJDJcIiwgXCJJUHY2X2NvbXAkZWJuZiQyJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMlwiLCBcIklQdjZfY29tcCRlYm5mJDIkc3ViZXhwcmVzc2lvbiQxJG1hY3JvY2FsbCQyXCIsIFwiSVB2Nl9jb21wJGVibmYkMiRzdWJleHByZXNzaW9uJDEkbWFjcm9jYWxsJDJcIiwgXCJJUHY2X2NvbXAkZWJuZiQyJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMlwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZfY29tcCRlYm5mJDIkc3ViZXhwcmVzc2lvbiQxXCIsIFwic3ltYm9sc1wiOiBbXCJJUHY2X2hleFwiLCBcIklQdjZfY29tcCRlYm5mJDIkc3ViZXhwcmVzc2lvbiQxJG1hY3JvY2FsbCQxXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9jb21wJGVibmYkMlwiLCBcInN5bWJvbHNcIjogW1wiSVB2Nl9jb21wJGVibmYkMiRzdWJleHByZXNzaW9uJDFcIl0sIFwicG9zdHByb2Nlc3NcIjogaWQgfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJJUHY2X2NvbXAkZWJuZiQyXCIsIFwic3ltYm9sc1wiOiBbXSwgXCJwb3N0cHJvY2Vzc1wiOiAoKSA9PiBudWxsIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2Nl9jb21wXCIsIFwic3ltYm9sc1wiOiBbXCJJUHY2X2NvbXAkZWJuZiQxXCIsIFwiSVB2Nl9jb21wJHN0cmluZyQxXCIsIFwiSVB2Nl9jb21wJGVibmYkMlwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZ2NF9mdWxsJG1hY3JvY2FsbCQyXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCI6XCIgfSwgXCJJUHY2X2hleFwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZ2NF9mdWxsJG1hY3JvY2FsbCQxXCIsIFwic3ltYm9sc1wiOiBbXCJJUHY2djRfZnVsbCRtYWNyb2NhbGwkMlwiLCBcIklQdjZ2NF9mdWxsJG1hY3JvY2FsbCQyXCIsIFwiSVB2NnY0X2Z1bGwkbWFjcm9jYWxsJDJcIiwgXCJJUHY2djRfZnVsbCRtYWNyb2NhbGwkMlwiLCBcIklQdjZ2NF9mdWxsJG1hY3JvY2FsbCQyXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2Z1bGxcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjZfaGV4XCIsIFwiSVB2NnY0X2Z1bGwkbWFjcm9jYWxsJDFcIiwgeyBcImxpdGVyYWxcIjogXCI6XCIgfSwgXCJJUHY0X2FkZHJlc3NfbGl0ZXJhbFwiXSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZ2NF9jb21wJGVibmYkMSRzdWJleHByZXNzaW9uJDEkbWFjcm9jYWxsJDJcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIjpcIiB9LCBcIklQdjZfaGV4XCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXAkZWJuZiQxJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMVwiLCBcInN5bWJvbHNcIjogW1wiSVB2NnY0X2NvbXAkZWJuZiQxJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMlwiLCBcIklQdjZ2NF9jb21wJGVibmYkMSRzdWJleHByZXNzaW9uJDEkbWFjcm9jYWxsJDJcIiwgXCJJUHY2djRfY29tcCRlYm5mJDEkc3ViZXhwcmVzc2lvbiQxJG1hY3JvY2FsbCQyXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXAkZWJuZiQxJHN1YmV4cHJlc3Npb24kMVwiLCBcInN5bWJvbHNcIjogW1wiSVB2Nl9oZXhcIiwgXCJJUHY2djRfY29tcCRlYm5mJDEkc3ViZXhwcmVzc2lvbiQxJG1hY3JvY2FsbCQxXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXAkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXCJJUHY2djRfY29tcCRlYm5mJDEkc3ViZXhwcmVzc2lvbiQxXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXAkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXSwgXCJwb3N0cHJvY2Vzc1wiOiAoKSA9PiBudWxsIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXAkc3RyaW5nJDFcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIjpcIiB9LCB7IFwibGl0ZXJhbFwiOiBcIjpcIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiAoZCkgPT4gZC5qb2luKCcnKSB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIklQdjZ2NF9jb21wJGVibmYkMiRzdWJleHByZXNzaW9uJDEkbWFjcm9jYWxsJDJcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIjpcIiB9LCBcIklQdjZfaGV4XCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXAkZWJuZiQyJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMVwiLCBcInN5bWJvbHNcIjogW1wiSVB2NnY0X2NvbXAkZWJuZiQyJHN1YmV4cHJlc3Npb24kMSRtYWNyb2NhbGwkMlwiLCBcIklQdjZ2NF9jb21wJGVibmYkMiRzdWJleHByZXNzaW9uJDEkbWFjcm9jYWxsJDJcIiwgXCJJUHY2djRfY29tcCRlYm5mJDIkc3ViZXhwcmVzc2lvbiQxJG1hY3JvY2FsbCQyXCJdIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXAkZWJuZiQyJHN1YmV4cHJlc3Npb24kMVwiLCBcInN5bWJvbHNcIjogW1wiSVB2Nl9oZXhcIiwgXCJJUHY2djRfY29tcCRlYm5mJDIkc3ViZXhwcmVzc2lvbiQxJG1hY3JvY2FsbCQxXCIsIHsgXCJsaXRlcmFsXCI6IFwiOlwiIH1dIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXAkZWJuZiQyXCIsIFwic3ltYm9sc1wiOiBbXCJJUHY2djRfY29tcCRlYm5mJDIkc3ViZXhwcmVzc2lvbiQxXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXAkZWJuZiQyXCIsIFwic3ltYm9sc1wiOiBbXSwgXCJwb3N0cHJvY2Vzc1wiOiAoKSA9PiBudWxsIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiSVB2NnY0X2NvbXBcIiwgXCJzeW1ib2xzXCI6IFtcIklQdjZ2NF9jb21wJGVibmYkMVwiLCBcIklQdjZ2NF9jb21wJHN0cmluZyQxXCIsIFwiSVB2NnY0X2NvbXAkZWJuZiQyXCIsIFwiSVB2NF9hZGRyZXNzX2xpdGVyYWxcIl0gfSxcbiAgICAgICAgeyBcIm5hbWVcIjogXCJESUdJVFwiLCBcInN5bWJvbHNcIjogWy9bMC05XS9dLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiQUxQSEFfRElHSVRfVVwiLCBcInN5bWJvbHNcIjogWy9bMC05QS1aYS16XFx1MDA4MC1cXHVGRkZGXS9dLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiQUxQSEFfRElHSVRcIiwgXCJzeW1ib2xzXCI6IFsvWzAtOUEtWmEtel0vXSwgXCJwb3N0cHJvY2Vzc1wiOiBpZCB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkFMUEhBX0RJR19EQVNIXCIsIFwic3ltYm9sc1wiOiBbL1stMC05QS1aYS16XS9dLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiQUxQSEFfRElHX0RBU0hfVVwiLCBcInN5bWJvbHNcIjogWy9bLTAtOUEtWmEtelxcdTAwODAtXFx1RkZGRl0vXSwgXCJwb3N0cHJvY2Vzc1wiOiBpZCB9LFxuICAgICAgICB7IFwibmFtZVwiOiBcIkhFWERJR1wiLCBcInN5bWJvbHNcIjogWy9bMC05QS1GYS1mXS9dLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sXG4gICAgICAgIHsgXCJuYW1lXCI6IFwiRFFVT1RFXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCJcXFwiXCIgfV0sIFwicG9zdHByb2Nlc3NcIjogaWQgfVxuICAgIF0sXG4gICAgUGFyc2VyU3RhcnQ6IFwiUmV2ZXJzZV9wYXRoXCIsXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZ3JhbW1hcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYW1tYXIuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2Fub25pY2FsaXplID0gZXhwb3J0cy5jYW5vbmljYWxpemVfcXVvdGVkX3N0cmluZyA9IGV4cG9ydHMubm9ybWFsaXplID0gZXhwb3J0cy5ub3JtYWxpemVfZG90X3N0cmluZyA9IGV4cG9ydHMucGFyc2UgPSB2b2lkIDA7XG4vLyBjb25zdCBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG5jb25zdCBuZWFybGV5ID0gcmVxdWlyZShcIm5lYXJsZXlcIik7XG5jb25zdCBncmFtbWFyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZ3JhbW1hclwiKSk7XG5ncmFtbWFyXzEuZGVmYXVsdC5QYXJzZXJTdGFydCA9IFwiTWFpbGJveFwiO1xuY29uc3QgZ3JhbW1hciA9IG5lYXJsZXkuR3JhbW1hci5mcm9tQ29tcGlsZWQoZ3JhbW1hcl8xLmRlZmF1bHQpO1xuLy8gPGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1MzIxI3NlY3Rpb24tNC4xLjI+XG5mdW5jdGlvbiBwYXJzZShhZGRyZXNzKSB7XG4gICAgLy8gQW4gaW5zYW5lIGxlbmd0aCwgdG8gcHJvdGVjdCB0aGUgcGFyc2luZyBjb2RlIGZyb20gaHVnZSBpbnB1dC4gU01UUCBsaW5lIGxpbWl0LCBtaW51cyBjb21tYW5kIHNpemUuXG4gICAgY29uc3QgaW5zYW5lX2xlbmd0aCA9IDEwMDAgLSBcIk1BSUwgRlJPTTo8PlxcclxcblwiLmxlbmd0aDtcbiAgICBpZiAoYWRkcmVzcy5sZW5ndGggPiBpbnNhbmVfbGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFkZHJlc3MgdG9vIGxvbmdcIik7XG4gICAgfVxuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBuZWFybGV5LlBhcnNlcihncmFtbWFyKTtcbiAgICBwYXJzZXIuZmVlZChhZGRyZXNzKTtcbiAgICBpZiAocGFyc2VyLnJlc3VsdHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFkZHJlc3MgcGFyc2luZyBmYWlsZWQ6IGFtYmlndW91cyBncmFtbWFyXCIpO1xuICAgIH1cbiAgICAvLyBEb21haW4gY2hlY2tzXG4gICAgY29uc3QgYXRfaWR4ID0gYWRkcmVzcy5sYXN0SW5kZXhPZignQCcpOyAvLyBtdXN0IGJlIGZvdW5kLCBzaW5jZSBwYXJzZSB3YXMgc3VjY2Vzc2Z1bFxuICAgIGNvbnN0IGRvbWFpbiA9IGFkZHJlc3Muc3Vic3RyaW5nKGF0X2lkeCArIDEpO1xuICAgIGlmIChkb21haW5bMF0gIT09ICdbJykgeyAvLyBOb3QgYW4gYWRkcmVzcyBsaXRlcmFsXG4gICAgICAgIGlmIChkb21haW4ubGVuZ3RoID4gMjUzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkb21haW4gdG9vIGxvbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxzID0gZG9tYWluLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgaWYgKGxhYmVscy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkb21haW4gbm90IGZ1bGx5IHF1YWxpZmllZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFiZWxzW2xhYmVscy5sZW5ndGggLSAxXS5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0b3AgbGV2ZWwgZG9tYWluIGxhYmVsIHRvbyBzaG9ydFwiKTtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGFiZWxzWzBdLmxlbmd0aCA+IDYzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkb21haW4gbGFiZWwgdG9vIGxvbmdcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlci5yZXN1bHRzWzBdO1xufVxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuLyoqIFN0cmlwICtzb21ldGhpbmcsIHN0cmlwICcuJ3MsIGFuZCBtYXAgdG8gbG93ZXIgY2FzZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplX2RvdF9zdHJpbmcoZG90X3N0cmluZykge1xuICAgIGNvbnN0IHRhZ2xlc3MgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBwbHVzX2xvYyA9IGRvdF9zdHJpbmcuaW5kZXhPZihcIitcIik7XG4gICAgICAgIGlmIChwbHVzX2xvYyA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBkb3Rfc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb3Rfc3RyaW5nLnN1YnN0cigwLCBwbHVzX2xvYyk7XG4gICAgfSkoKTtcbiAgICBjb25zdCBkb3RsZXNzID0gdGFnbGVzcy5yZXBsYWNlKC9cXC4vZywgXCJcIik7XG4gICAgcmV0dXJuIGRvdGxlc3MudG9Mb3dlckNhc2UoKTtcbn1cbmV4cG9ydHMubm9ybWFsaXplX2RvdF9zdHJpbmcgPSBub3JtYWxpemVfZG90X3N0cmluZztcbi8qKiBUaGUgRyBzdHlsZSBhZGRyZXNzIG5vcm1hbGl6YXRpb24uXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhZGRyZXNzKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBhID0gcGFyc2UoYWRkcmVzcyk7XG4gICAgY29uc3QgZG9tYWluID0gKF9hID0gYS5kb21haW5QYXJ0LkFkZHJlc3NMaXRlcmFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBhLmRvbWFpblBhcnQuRG9tYWluTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGxvY2FsID0gKF9iID0gYS5sb2NhbFBhcnQuUXVvdGVkU3RyaW5nKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBub3JtYWxpemVfZG90X3N0cmluZyhhLmxvY2FsUGFydC5Eb3RTdHJpbmcpO1xuICAgIHJldHVybiBgJHtsb2NhbH1AJHtkb21haW59YDtcbn1cbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xuZnVuY3Rpb24gY2Fub25pY2FsaXplX3F1b3RlZF9zdHJpbmcocXVvdGVkX3N0cmluZykge1xuICAgIGNvbnN0IHVucXVvdGVkID0gcXVvdGVkX3N0cmluZy5zdWJzdHIoMSkuc3Vic3RyKDAsIHF1b3RlZF9zdHJpbmcubGVuZ3RoIC0gMik7XG4gICAgY29uc3QgdW5lc2NhcGVkID0gdW5xdW90ZWQucmVwbGFjZSgvKD86XFxcXCguKSkvZywgXCIkMVwiKTtcbiAgICBjb25zdCByZWVzY2FwZWQgPSB1bmVzY2FwZWQucmVwbGFjZSgvKD86KFtcIlxcXFxdKSkvZywgXCJcXFxcJDFcIik7XG4gICAgcmV0dXJuIGBcIiR7cmVlc2NhcGVkfVwiYDsgLy8gcmUtcXVvdGVcbn1cbmV4cG9ydHMuY2Fub25pY2FsaXplX3F1b3RlZF9zdHJpbmcgPSBjYW5vbmljYWxpemVfcXVvdGVkX3N0cmluZztcbi8qKlxuICogQXBwbHkgYSBjYW5vbmljYWxpemF0aW9uIGNvbnNpc3RlbnQgd2l0aCBzdGFuZGFyZHMgdG8gc3VwcG9ydFxuICogY29tcGFyaXNvbiBhcyBhIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gY2Fub25pY2FsaXplKGFkZHJlc3MpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgYSA9IHBhcnNlKGFkZHJlc3MpO1xuICAgIGNvbnN0IGRvbWFpbiA9IChfYSA9IGEuZG9tYWluUGFydC5BZGRyZXNzTGl0ZXJhbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYS5kb21haW5QYXJ0LkRvbWFpbk5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBsb2NhbCA9IGEubG9jYWxQYXJ0LlF1b3RlZFN0cmluZ1xuICAgICAgICA/IGNhbm9uaWNhbGl6ZV9xdW90ZWRfc3RyaW5nKGEubG9jYWxQYXJ0LlF1b3RlZFN0cmluZylcbiAgICAgICAgOiBhLmxvY2FsUGFydC5Eb3RTdHJpbmc7XG4gICAgcmV0dXJuIGAke2xvY2FsfUAke2RvbWFpbn1gO1xufVxuZXhwb3J0cy5jYW5vbmljYWxpemUgPSBjYW5vbmljYWxpemU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWdleHBDb2RlID0gZXhwb3J0cy5nZXRFc21FeHBvcnROYW1lID0gZXhwb3J0cy5nZXRQcm9wZXJ0eSA9IGV4cG9ydHMuc2FmZVN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gZXhwb3J0cy5zdHJDb25jYXQgPSBleHBvcnRzLmFkZENvZGVBcmcgPSBleHBvcnRzLnN0ciA9IGV4cG9ydHMuXyA9IGV4cG9ydHMubmlsID0gZXhwb3J0cy5fQ29kZSA9IGV4cG9ydHMuTmFtZSA9IGV4cG9ydHMuSURFTlRJRklFUiA9IGV4cG9ydHMuX0NvZGVPck5hbWUgPSB2b2lkIDA7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbmNsYXNzIF9Db2RlT3JOYW1lIHtcbn1cbmV4cG9ydHMuX0NvZGVPck5hbWUgPSBfQ29kZU9yTmFtZTtcbmV4cG9ydHMuSURFTlRJRklFUiA9IC9eW2EteiRfXVthLXokXzAtOV0qJC9pO1xuY2xhc3MgTmFtZSBleHRlbmRzIF9Db2RlT3JOYW1lIHtcbiAgICBjb25zdHJ1Y3RvcihzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICghZXhwb3J0cy5JREVOVElGSUVSLnRlc3QocykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb2RlR2VuOiBuYW1lIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXCIpO1xuICAgICAgICB0aGlzLnN0ciA9IHM7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHI7XG4gICAgfVxuICAgIGVtcHR5U3RyKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGdldCBuYW1lcygpIHtcbiAgICAgICAgcmV0dXJuIHsgW3RoaXMuc3RyXTogMSB9O1xuICAgIH1cbn1cbmV4cG9ydHMuTmFtZSA9IE5hbWU7XG5jbGFzcyBfQ29kZSBleHRlbmRzIF9Db2RlT3JOYW1lIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gdHlwZW9mIGNvZGUgPT09IFwic3RyaW5nXCIgPyBbY29kZV0gOiBjb2RlO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyO1xuICAgIH1cbiAgICBlbXB0eVN0cigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9pdGVtc1swXTtcbiAgICAgICAgcmV0dXJuIGl0ZW0gPT09IFwiXCIgfHwgaXRlbSA9PT0gJ1wiXCInO1xuICAgIH1cbiAgICBnZXQgc3RyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5fc3RyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAodGhpcy5fc3RyID0gdGhpcy5faXRlbXMucmVkdWNlKChzLCBjKSA9PiBgJHtzfSR7Y31gLCBcIlwiKSkpO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLl9uYW1lcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHRoaXMuX25hbWVzID0gdGhpcy5faXRlbXMucmVkdWNlKChuYW1lcywgYykgPT4ge1xuICAgICAgICAgICAgaWYgKGMgaW5zdGFuY2VvZiBOYW1lKVxuICAgICAgICAgICAgICAgIG5hbWVzW2Muc3RyXSA9IChuYW1lc1tjLnN0cl0gfHwgMCkgKyAxO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWVzO1xuICAgICAgICB9LCB7fSkpKTtcbiAgICB9XG59XG5leHBvcnRzLl9Db2RlID0gX0NvZGU7XG5leHBvcnRzLm5pbCA9IG5ldyBfQ29kZShcIlwiKTtcbmZ1bmN0aW9uIF8oc3RycywgLi4uYXJncykge1xuICAgIGNvbnN0IGNvZGUgPSBbc3Ryc1swXV07XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgICAgYWRkQ29kZUFyZyhjb2RlLCBhcmdzW2ldKTtcbiAgICAgICAgY29kZS5wdXNoKHN0cnNbKytpXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX0NvZGUoY29kZSk7XG59XG5leHBvcnRzLl8gPSBfO1xuY29uc3QgcGx1cyA9IG5ldyBfQ29kZShcIitcIik7XG5mdW5jdGlvbiBzdHIoc3RycywgLi4uYXJncykge1xuICAgIGNvbnN0IGV4cHIgPSBbc2FmZVN0cmluZ2lmeShzdHJzWzBdKV07XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgICAgZXhwci5wdXNoKHBsdXMpO1xuICAgICAgICBhZGRDb2RlQXJnKGV4cHIsIGFyZ3NbaV0pO1xuICAgICAgICBleHByLnB1c2gocGx1cywgc2FmZVN0cmluZ2lmeShzdHJzWysraV0pKTtcbiAgICB9XG4gICAgb3B0aW1pemUoZXhwcik7XG4gICAgcmV0dXJuIG5ldyBfQ29kZShleHByKTtcbn1cbmV4cG9ydHMuc3RyID0gc3RyO1xuZnVuY3Rpb24gYWRkQ29kZUFyZyhjb2RlLCBhcmcpIHtcbiAgICBpZiAoYXJnIGluc3RhbmNlb2YgX0NvZGUpXG4gICAgICAgIGNvZGUucHVzaCguLi5hcmcuX2l0ZW1zKTtcbiAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBOYW1lKVxuICAgICAgICBjb2RlLnB1c2goYXJnKTtcbiAgICBlbHNlXG4gICAgICAgIGNvZGUucHVzaChpbnRlcnBvbGF0ZShhcmcpKTtcbn1cbmV4cG9ydHMuYWRkQ29kZUFyZyA9IGFkZENvZGVBcmc7XG5mdW5jdGlvbiBvcHRpbWl6ZShleHByKSB7XG4gICAgbGV0IGkgPSAxO1xuICAgIHdoaWxlIChpIDwgZXhwci5sZW5ndGggLSAxKSB7XG4gICAgICAgIGlmIChleHByW2ldID09PSBwbHVzKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBtZXJnZUV4cHJJdGVtcyhleHByW2kgLSAxXSwgZXhwcltpICsgMV0pO1xuICAgICAgICAgICAgaWYgKHJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZXhwci5zcGxpY2UoaSAtIDEsIDMsIHJlcyk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHByW2krK10gPSBcIitcIjtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxufVxuZnVuY3Rpb24gbWVyZ2VFeHBySXRlbXMoYSwgYikge1xuICAgIGlmIChiID09PSAnXCJcIicpXG4gICAgICAgIHJldHVybiBhO1xuICAgIGlmIChhID09PSAnXCJcIicpXG4gICAgICAgIHJldHVybiBiO1xuICAgIGlmICh0eXBlb2YgYSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChiIGluc3RhbmNlb2YgTmFtZSB8fCBhW2EubGVuZ3RoIC0gMV0gIT09ICdcIicpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgcmV0dXJuIGAke2Euc2xpY2UoMCwgLTEpfSR7Yn1cImA7XG4gICAgICAgIGlmIChiWzBdID09PSAnXCInKVxuICAgICAgICAgICAgcmV0dXJuIGEuc2xpY2UoMCwgLTEpICsgYi5zbGljZSgxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGIgPT0gXCJzdHJpbmdcIiAmJiBiWzBdID09PSAnXCInICYmICEoYSBpbnN0YW5jZW9mIE5hbWUpKVxuICAgICAgICByZXR1cm4gYFwiJHthfSR7Yi5zbGljZSgxKX1gO1xuICAgIHJldHVybjtcbn1cbmZ1bmN0aW9uIHN0ckNvbmNhdChjMSwgYzIpIHtcbiAgICByZXR1cm4gYzIuZW1wdHlTdHIoKSA/IGMxIDogYzEuZW1wdHlTdHIoKSA/IGMyIDogc3RyIGAke2MxfSR7YzJ9YDtcbn1cbmV4cG9ydHMuc3RyQ29uY2F0ID0gc3RyQ29uY2F0O1xuLy8gVE9ETyBkbyBub3QgYWxsb3cgYXJyYXlzIGhlcmVcbmZ1bmN0aW9uIGludGVycG9sYXRlKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeCA9PSBcImJvb2xlYW5cIiB8fCB4ID09PSBudWxsXG4gICAgICAgID8geFxuICAgICAgICA6IHNhZmVTdHJpbmdpZnkoQXJyYXkuaXNBcnJheSh4KSA/IHguam9pbihcIixcIikgOiB4KTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeSh4KSB7XG4gICAgcmV0dXJuIG5ldyBfQ29kZShzYWZlU3RyaW5naWZ5KHgpKTtcbn1cbmV4cG9ydHMuc3RyaW5naWZ5ID0gc3RyaW5naWZ5O1xuZnVuY3Rpb24gc2FmZVN0cmluZ2lmeSh4KSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHgpXG4gICAgICAgIC5yZXBsYWNlKC9cXHUyMDI4L2csIFwiXFxcXHUyMDI4XCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csIFwiXFxcXHUyMDI5XCIpO1xufVxuZXhwb3J0cy5zYWZlU3RyaW5naWZ5ID0gc2FmZVN0cmluZ2lmeTtcbmZ1bmN0aW9uIGdldFByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09IFwic3RyaW5nXCIgJiYgZXhwb3J0cy5JREVOVElGSUVSLnRlc3Qoa2V5KSA/IG5ldyBfQ29kZShgLiR7a2V5fWApIDogXyBgWyR7a2V5fV1gO1xufVxuZXhwb3J0cy5nZXRQcm9wZXJ0eSA9IGdldFByb3BlcnR5O1xuLy9Eb2VzIGJlc3QgZWZmb3J0IHRvIGZvcm1hdCB0aGUgbmFtZSBwcm9wZXJseVxuZnVuY3Rpb24gZ2V0RXNtRXhwb3J0TmFtZShrZXkpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSBcInN0cmluZ1wiICYmIGV4cG9ydHMuSURFTlRJRklFUi50ZXN0KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfQ29kZShgJHtrZXl9YCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgQ29kZUdlbjogaW52YWxpZCBleHBvcnQgbmFtZTogJHtrZXl9LCB1c2UgZXhwbGljaXQgJGlkIG5hbWUgbWFwcGluZ2ApO1xufVxuZXhwb3J0cy5nZXRFc21FeHBvcnROYW1lID0gZ2V0RXNtRXhwb3J0TmFtZTtcbmZ1bmN0aW9uIHJlZ2V4cENvZGUocngpIHtcbiAgICByZXR1cm4gbmV3IF9Db2RlKHJ4LnRvU3RyaW5nKCkpO1xufVxuZXhwb3J0cy5yZWdleHBDb2RlID0gcmVnZXhwQ29kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvZGUuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmFsdWVTY29wZSA9IGV4cG9ydHMuVmFsdWVTY29wZU5hbWUgPSBleHBvcnRzLlNjb3BlID0gZXhwb3J0cy52YXJLaW5kcyA9IGV4cG9ydHMuVXNlZFZhbHVlU3RhdGUgPSB2b2lkIDA7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi9jb2RlXCIpO1xuY2xhc3MgVmFsdWVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIHN1cGVyKGBDb2RlR2VuOiBcImNvZGVcIiBmb3IgJHtuYW1lfSBub3QgZGVmaW5lZGApO1xuICAgICAgICB0aGlzLnZhbHVlID0gbmFtZS52YWx1ZTtcbiAgICB9XG59XG52YXIgVXNlZFZhbHVlU3RhdGU7XG4oZnVuY3Rpb24gKFVzZWRWYWx1ZVN0YXRlKSB7XG4gICAgVXNlZFZhbHVlU3RhdGVbVXNlZFZhbHVlU3RhdGVbXCJTdGFydGVkXCJdID0gMF0gPSBcIlN0YXJ0ZWRcIjtcbiAgICBVc2VkVmFsdWVTdGF0ZVtVc2VkVmFsdWVTdGF0ZVtcIkNvbXBsZXRlZFwiXSA9IDFdID0gXCJDb21wbGV0ZWRcIjtcbn0pKFVzZWRWYWx1ZVN0YXRlIHx8IChleHBvcnRzLlVzZWRWYWx1ZVN0YXRlID0gVXNlZFZhbHVlU3RhdGUgPSB7fSkpO1xuZXhwb3J0cy52YXJLaW5kcyA9IHtcbiAgICBjb25zdDogbmV3IGNvZGVfMS5OYW1lKFwiY29uc3RcIiksXG4gICAgbGV0OiBuZXcgY29kZV8xLk5hbWUoXCJsZXRcIiksXG4gICAgdmFyOiBuZXcgY29kZV8xLk5hbWUoXCJ2YXJcIiksXG59O1xuY2xhc3MgU2NvcGUge1xuICAgIGNvbnN0cnVjdG9yKHsgcHJlZml4ZXMsIHBhcmVudCB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5fbmFtZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fcHJlZml4ZXMgPSBwcmVmaXhlcztcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIH1cbiAgICB0b05hbWUobmFtZU9yUHJlZml4KSB7XG4gICAgICAgIHJldHVybiBuYW1lT3JQcmVmaXggaW5zdGFuY2VvZiBjb2RlXzEuTmFtZSA/IG5hbWVPclByZWZpeCA6IHRoaXMubmFtZShuYW1lT3JQcmVmaXgpO1xuICAgIH1cbiAgICBuYW1lKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gbmV3IGNvZGVfMS5OYW1lKHRoaXMuX25ld05hbWUocHJlZml4KSk7XG4gICAgfVxuICAgIF9uZXdOYW1lKHByZWZpeCkge1xuICAgICAgICBjb25zdCBuZyA9IHRoaXMuX25hbWVzW3ByZWZpeF0gfHwgdGhpcy5fbmFtZUdyb3VwKHByZWZpeCk7XG4gICAgICAgIHJldHVybiBgJHtwcmVmaXh9JHtuZy5pbmRleCsrfWA7XG4gICAgfVxuICAgIF9uYW1lR3JvdXAocHJlZml4KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICgoKF9iID0gKF9hID0gdGhpcy5fcGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuX3ByZWZpeGVzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaGFzKHByZWZpeCkpIHx8ICh0aGlzLl9wcmVmaXhlcyAmJiAhdGhpcy5fcHJlZml4ZXMuaGFzKHByZWZpeCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvZGVHZW46IHByZWZpeCBcIiR7cHJlZml4fVwiIGlzIG5vdCBhbGxvd2VkIGluIHRoaXMgc2NvcGVgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRoaXMuX25hbWVzW3ByZWZpeF0gPSB7IHByZWZpeCwgaW5kZXg6IDAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5TY29wZSA9IFNjb3BlO1xuY2xhc3MgVmFsdWVTY29wZU5hbWUgZXh0ZW5kcyBjb2RlXzEuTmFtZSB7XG4gICAgY29uc3RydWN0b3IocHJlZml4LCBuYW1lU3RyKSB7XG4gICAgICAgIHN1cGVyKG5hbWVTdHIpO1xuICAgICAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUsIHsgcHJvcGVydHksIGl0ZW1JbmRleCB9KSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5zY29wZVBhdGggPSAoMCwgY29kZV8xLl8pIGAuJHtuZXcgY29kZV8xLk5hbWUocHJvcGVydHkpfVske2l0ZW1JbmRleH1dYDtcbiAgICB9XG59XG5leHBvcnRzLlZhbHVlU2NvcGVOYW1lID0gVmFsdWVTY29wZU5hbWU7XG5jb25zdCBsaW5lID0gKDAsIGNvZGVfMS5fKSBgXFxuYDtcbmNsYXNzIFZhbHVlU2NvcGUgZXh0ZW5kcyBTY29wZSB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcihvcHRzKTtcbiAgICAgICAgdGhpcy5fdmFsdWVzID0ge307XG4gICAgICAgIHRoaXMuX3Njb3BlID0gb3B0cy5zY29wZTtcbiAgICAgICAgdGhpcy5vcHRzID0geyAuLi5vcHRzLCBfbjogb3B0cy5saW5lcyA/IGxpbmUgOiBjb2RlXzEubmlsIH07XG4gICAgfVxuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xuICAgIH1cbiAgICBuYW1lKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlU2NvcGVOYW1lKHByZWZpeCwgdGhpcy5fbmV3TmFtZShwcmVmaXgpKTtcbiAgICB9XG4gICAgdmFsdWUobmFtZU9yUHJlZml4LCB2YWx1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2YWx1ZS5yZWYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvZGVHZW46IHJlZiBtdXN0IGJlIHBhc3NlZCBpbiB2YWx1ZVwiKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMudG9OYW1lKG5hbWVPclByZWZpeCk7XG4gICAgICAgIGNvbnN0IHsgcHJlZml4IH0gPSBuYW1lO1xuICAgICAgICBjb25zdCB2YWx1ZUtleSA9IChfYSA9IHZhbHVlLmtleSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdmFsdWUucmVmO1xuICAgICAgICBsZXQgdnMgPSB0aGlzLl92YWx1ZXNbcHJlZml4XTtcbiAgICAgICAgaWYgKHZzKSB7XG4gICAgICAgICAgICBjb25zdCBfbmFtZSA9IHZzLmdldCh2YWx1ZUtleSk7XG4gICAgICAgICAgICBpZiAoX25hbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdnMgPSB0aGlzLl92YWx1ZXNbcHJlZml4XSA9IG5ldyBNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICB2cy5zZXQodmFsdWVLZXksIG5hbWUpO1xuICAgICAgICBjb25zdCBzID0gdGhpcy5fc2NvcGVbcHJlZml4XSB8fCAodGhpcy5fc2NvcGVbcHJlZml4XSA9IFtdKTtcbiAgICAgICAgY29uc3QgaXRlbUluZGV4ID0gcy5sZW5ndGg7XG4gICAgICAgIHNbaXRlbUluZGV4XSA9IHZhbHVlLnJlZjtcbiAgICAgICAgbmFtZS5zZXRWYWx1ZSh2YWx1ZSwgeyBwcm9wZXJ0eTogcHJlZml4LCBpdGVtSW5kZXggfSk7XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICBnZXRWYWx1ZShwcmVmaXgsIGtleU9yUmVmKSB7XG4gICAgICAgIGNvbnN0IHZzID0gdGhpcy5fdmFsdWVzW3ByZWZpeF07XG4gICAgICAgIGlmICghdnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJldHVybiB2cy5nZXQoa2V5T3JSZWYpO1xuICAgIH1cbiAgICBzY29wZVJlZnMoc2NvcGVOYW1lLCB2YWx1ZXMgPSB0aGlzLl92YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZHVjZVZhbHVlcyh2YWx1ZXMsIChuYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAobmFtZS5zY29wZVBhdGggPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvZGVHZW46IG5hbWUgXCIke25hbWV9XCIgaGFzIG5vIHZhbHVlYCk7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGNvZGVfMS5fKSBgJHtzY29wZU5hbWV9JHtuYW1lLnNjb3BlUGF0aH1gO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2NvcGVDb2RlKHZhbHVlcyA9IHRoaXMuX3ZhbHVlcywgdXNlZFZhbHVlcywgZ2V0Q29kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVkdWNlVmFsdWVzKHZhbHVlcywgKG5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmIChuYW1lLnZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb2RlR2VuOiBuYW1lIFwiJHtuYW1lfVwiIGhhcyBubyB2YWx1ZWApO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWUudmFsdWUuY29kZTtcbiAgICAgICAgfSwgdXNlZFZhbHVlcywgZ2V0Q29kZSk7XG4gICAgfVxuICAgIF9yZWR1Y2VWYWx1ZXModmFsdWVzLCB2YWx1ZUNvZGUsIHVzZWRWYWx1ZXMgPSB7fSwgZ2V0Q29kZSkge1xuICAgICAgICBsZXQgY29kZSA9IGNvZGVfMS5uaWw7XG4gICAgICAgIGZvciAoY29uc3QgcHJlZml4IGluIHZhbHVlcykge1xuICAgICAgICAgICAgY29uc3QgdnMgPSB2YWx1ZXNbcHJlZml4XTtcbiAgICAgICAgICAgIGlmICghdnMpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBuYW1lU2V0ID0gKHVzZWRWYWx1ZXNbcHJlZml4XSA9IHVzZWRWYWx1ZXNbcHJlZml4XSB8fCBuZXcgTWFwKCkpO1xuICAgICAgICAgICAgdnMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lU2V0LmhhcyhuYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIG5hbWVTZXQuc2V0KG5hbWUsIFVzZWRWYWx1ZVN0YXRlLlN0YXJ0ZWQpO1xuICAgICAgICAgICAgICAgIGxldCBjID0gdmFsdWVDb2RlKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZiA9IHRoaXMub3B0cy5lczUgPyBleHBvcnRzLnZhcktpbmRzLnZhciA6IGV4cG9ydHMudmFyS2luZHMuY29uc3Q7XG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSAoMCwgY29kZV8xLl8pIGAke2NvZGV9JHtkZWZ9ICR7bmFtZX0gPSAke2N9OyR7dGhpcy5vcHRzLl9ufWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChjID0gZ2V0Q29kZSA9PT0gbnVsbCB8fCBnZXRDb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnZXRDb2RlKG5hbWUpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb2RlID0gKDAsIGNvZGVfMS5fKSBgJHtjb2RlfSR7Y30ke3RoaXMub3B0cy5fbn1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbHVlRXJyb3IobmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5hbWVTZXQuc2V0KG5hbWUsIFVzZWRWYWx1ZVN0YXRlLkNvbXBsZXRlZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9XG59XG5leHBvcnRzLlZhbHVlU2NvcGUgPSBWYWx1ZVNjb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NvcGUuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3IgPSBleHBvcnRzLmFuZCA9IGV4cG9ydHMubm90ID0gZXhwb3J0cy5Db2RlR2VuID0gZXhwb3J0cy5vcGVyYXRvcnMgPSBleHBvcnRzLnZhcktpbmRzID0gZXhwb3J0cy5WYWx1ZVNjb3BlTmFtZSA9IGV4cG9ydHMuVmFsdWVTY29wZSA9IGV4cG9ydHMuU2NvcGUgPSBleHBvcnRzLk5hbWUgPSBleHBvcnRzLnJlZ2V4cENvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IGV4cG9ydHMuZ2V0UHJvcGVydHkgPSBleHBvcnRzLm5pbCA9IGV4cG9ydHMuc3RyQ29uY2F0ID0gZXhwb3J0cy5zdHIgPSBleHBvcnRzLl8gPSB2b2lkIDA7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi9jb2RlXCIpO1xuY29uc3Qgc2NvcGVfMSA9IHJlcXVpcmUoXCIuL3Njb3BlXCIpO1xudmFyIGNvZGVfMiA9IHJlcXVpcmUoXCIuL2NvZGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlXzIuXzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0clwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZV8yLnN0cjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0ckNvbmNhdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZV8yLnN0ckNvbmNhdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5pbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZV8yLm5pbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFByb3BlcnR5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlXzIuZ2V0UHJvcGVydHk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpbmdpZnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVfMi5zdHJpbmdpZnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWdleHBDb2RlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlXzIucmVnZXhwQ29kZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5hbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVfMi5OYW1lOyB9IH0pO1xudmFyIHNjb3BlXzIgPSByZXF1aXJlKFwiLi9zY29wZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNjb3BlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzY29wZV8yLlNjb3BlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmFsdWVTY29wZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NvcGVfMi5WYWx1ZVNjb3BlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmFsdWVTY29wZU5hbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNjb3BlXzIuVmFsdWVTY29wZU5hbWU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2YXJLaW5kc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NvcGVfMi52YXJLaW5kczsgfSB9KTtcbmV4cG9ydHMub3BlcmF0b3JzID0ge1xuICAgIEdUOiBuZXcgY29kZV8xLl9Db2RlKFwiPlwiKSxcbiAgICBHVEU6IG5ldyBjb2RlXzEuX0NvZGUoXCI+PVwiKSxcbiAgICBMVDogbmV3IGNvZGVfMS5fQ29kZShcIjxcIiksXG4gICAgTFRFOiBuZXcgY29kZV8xLl9Db2RlKFwiPD1cIiksXG4gICAgRVE6IG5ldyBjb2RlXzEuX0NvZGUoXCI9PT1cIiksXG4gICAgTkVROiBuZXcgY29kZV8xLl9Db2RlKFwiIT09XCIpLFxuICAgIE5PVDogbmV3IGNvZGVfMS5fQ29kZShcIiFcIiksXG4gICAgT1I6IG5ldyBjb2RlXzEuX0NvZGUoXCJ8fFwiKSxcbiAgICBBTkQ6IG5ldyBjb2RlXzEuX0NvZGUoXCImJlwiKSxcbiAgICBBREQ6IG5ldyBjb2RlXzEuX0NvZGUoXCIrXCIpLFxufTtcbmNsYXNzIE5vZGUge1xuICAgIG9wdGltaXplTm9kZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBvcHRpbWl6ZU5hbWVzKF9uYW1lcywgX2NvbnN0YW50cykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5jbGFzcyBEZWYgZXh0ZW5kcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YXJLaW5kLCBuYW1lLCByaHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YXJLaW5kID0gdmFyS2luZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5yaHMgPSByaHM7XG4gICAgfVxuICAgIHJlbmRlcih7IGVzNSwgX24gfSkge1xuICAgICAgICBjb25zdCB2YXJLaW5kID0gZXM1ID8gc2NvcGVfMS52YXJLaW5kcy52YXIgOiB0aGlzLnZhcktpbmQ7XG4gICAgICAgIGNvbnN0IHJocyA9IHRoaXMucmhzID09PSB1bmRlZmluZWQgPyBcIlwiIDogYCA9ICR7dGhpcy5yaHN9YDtcbiAgICAgICAgcmV0dXJuIGAke3ZhcktpbmR9ICR7dGhpcy5uYW1lfSR7cmhzfTtgICsgX247XG4gICAgfVxuICAgIG9wdGltaXplTmFtZXMobmFtZXMsIGNvbnN0YW50cykge1xuICAgICAgICBpZiAoIW5hbWVzW3RoaXMubmFtZS5zdHJdKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5yaHMpXG4gICAgICAgICAgICB0aGlzLnJocyA9IG9wdGltaXplRXhwcih0aGlzLnJocywgbmFtZXMsIGNvbnN0YW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJocyBpbnN0YW5jZW9mIGNvZGVfMS5fQ29kZU9yTmFtZSA/IHRoaXMucmhzLm5hbWVzIDoge307XG4gICAgfVxufVxuY2xhc3MgQXNzaWduIGV4dGVuZHMgTm9kZSB7XG4gICAgY29uc3RydWN0b3IobGhzLCByaHMsIHNpZGVFZmZlY3RzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubGhzID0gbGhzO1xuICAgICAgICB0aGlzLnJocyA9IHJocztcbiAgICAgICAgdGhpcy5zaWRlRWZmZWN0cyA9IHNpZGVFZmZlY3RzO1xuICAgIH1cbiAgICByZW5kZXIoeyBfbiB9KSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmxoc30gPSAke3RoaXMucmhzfTtgICsgX247XG4gICAgfVxuICAgIG9wdGltaXplTmFtZXMobmFtZXMsIGNvbnN0YW50cykge1xuICAgICAgICBpZiAodGhpcy5saHMgaW5zdGFuY2VvZiBjb2RlXzEuTmFtZSAmJiAhbmFtZXNbdGhpcy5saHMuc3RyXSAmJiAhdGhpcy5zaWRlRWZmZWN0cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5yaHMgPSBvcHRpbWl6ZUV4cHIodGhpcy5yaHMsIG5hbWVzLCBjb25zdGFudHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0IG5hbWVzKCkge1xuICAgICAgICBjb25zdCBuYW1lcyA9IHRoaXMubGhzIGluc3RhbmNlb2YgY29kZV8xLk5hbWUgPyB7fSA6IHsgLi4udGhpcy5saHMubmFtZXMgfTtcbiAgICAgICAgcmV0dXJuIGFkZEV4cHJOYW1lcyhuYW1lcywgdGhpcy5yaHMpO1xuICAgIH1cbn1cbmNsYXNzIEFzc2lnbk9wIGV4dGVuZHMgQXNzaWduIHtcbiAgICBjb25zdHJ1Y3RvcihsaHMsIG9wLCByaHMsIHNpZGVFZmZlY3RzKSB7XG4gICAgICAgIHN1cGVyKGxocywgcmhzLCBzaWRlRWZmZWN0cyk7XG4gICAgICAgIHRoaXMub3AgPSBvcDtcbiAgICB9XG4gICAgcmVuZGVyKHsgX24gfSkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5saHN9ICR7dGhpcy5vcH09ICR7dGhpcy5yaHN9O2AgKyBfbjtcbiAgICB9XG59XG5jbGFzcyBMYWJlbCBleHRlbmRzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGxhYmVsKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgdGhpcy5uYW1lcyA9IHt9O1xuICAgIH1cbiAgICByZW5kZXIoeyBfbiB9KSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmxhYmVsfTpgICsgX247XG4gICAgfVxufVxuY2xhc3MgQnJlYWsgZXh0ZW5kcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihsYWJlbCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgICAgIHRoaXMubmFtZXMgPSB7fTtcbiAgICB9XG4gICAgcmVuZGVyKHsgX24gfSkge1xuICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMubGFiZWwgPyBgICR7dGhpcy5sYWJlbH1gIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIGBicmVhayR7bGFiZWx9O2AgKyBfbjtcbiAgICB9XG59XG5jbGFzcyBUaHJvdyBleHRlbmRzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGVycm9yKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gICAgcmVuZGVyKHsgX24gfSkge1xuICAgICAgICByZXR1cm4gYHRocm93ICR7dGhpcy5lcnJvcn07YCArIF9uO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yLm5hbWVzO1xuICAgIH1cbn1cbmNsYXNzIEFueUNvZGUgZXh0ZW5kcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgfVxuICAgIHJlbmRlcih7IF9uIH0pIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29kZX07YCArIF9uO1xuICAgIH1cbiAgICBvcHRpbWl6ZU5vZGVzKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb2RlfWAgPyB0aGlzIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRpbWl6ZU5hbWVzKG5hbWVzLCBjb25zdGFudHMpIHtcbiAgICAgICAgdGhpcy5jb2RlID0gb3B0aW1pemVFeHByKHRoaXMuY29kZSwgbmFtZXMsIGNvbnN0YW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGUgaW5zdGFuY2VvZiBjb2RlXzEuX0NvZGVPck5hbWUgPyB0aGlzLmNvZGUubmFtZXMgOiB7fTtcbiAgICB9XG59XG5jbGFzcyBQYXJlbnROb2RlIGV4dGVuZHMgTm9kZSB7XG4gICAgY29uc3RydWN0b3Iobm9kZXMgPSBbXSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuICAgIHJlbmRlcihvcHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzLnJlZHVjZSgoY29kZSwgbikgPT4gY29kZSArIG4ucmVuZGVyKG9wdHMpLCBcIlwiKTtcbiAgICB9XG4gICAgb3B0aW1pemVOb2RlcygpIHtcbiAgICAgICAgY29uc3QgeyBub2RlcyB9ID0gdGhpcztcbiAgICAgICAgbGV0IGkgPSBub2Rlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBub2Rlc1tpXS5vcHRpbWl6ZU5vZGVzKCk7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuKSlcbiAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaSwgMSwgLi4ubik7XG4gICAgICAgICAgICBlbHNlIGlmIChuKVxuICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gbjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGVzLmxlbmd0aCA+IDAgPyB0aGlzIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRpbWl6ZU5hbWVzKG5hbWVzLCBjb25zdGFudHMpIHtcbiAgICAgICAgY29uc3QgeyBub2RlcyB9ID0gdGhpcztcbiAgICAgICAgbGV0IGkgPSBub2Rlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGluZyBiYWNrd2FyZHMgaW1wcm92ZXMgMS1wYXNzIG9wdGltaXphdGlvblxuICAgICAgICAgICAgY29uc3QgbiA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKG4ub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHN1YnRyYWN0TmFtZXMobmFtZXMsIG4ubmFtZXMpO1xuICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2Rlcy5sZW5ndGggPiAwID8gdGhpcyA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IG5hbWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlcy5yZWR1Y2UoKG5hbWVzLCBuKSA9PiBhZGROYW1lcyhuYW1lcywgbi5uYW1lcyksIHt9KTtcbiAgICB9XG59XG5jbGFzcyBCbG9ja05vZGUgZXh0ZW5kcyBQYXJlbnROb2RlIHtcbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICByZXR1cm4gXCJ7XCIgKyBvcHRzLl9uICsgc3VwZXIucmVuZGVyKG9wdHMpICsgXCJ9XCIgKyBvcHRzLl9uO1xuICAgIH1cbn1cbmNsYXNzIFJvb3QgZXh0ZW5kcyBQYXJlbnROb2RlIHtcbn1cbmNsYXNzIEVsc2UgZXh0ZW5kcyBCbG9ja05vZGUge1xufVxuRWxzZS5raW5kID0gXCJlbHNlXCI7XG5jbGFzcyBJZiBleHRlbmRzIEJsb2NrTm9kZSB7XG4gICAgY29uc3RydWN0b3IoY29uZGl0aW9uLCBub2Rlcykge1xuICAgICAgICBzdXBlcihub2Rlcyk7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgIH1cbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICBsZXQgY29kZSA9IGBpZigke3RoaXMuY29uZGl0aW9ufSlgICsgc3VwZXIucmVuZGVyKG9wdHMpO1xuICAgICAgICBpZiAodGhpcy5lbHNlKVxuICAgICAgICAgICAgY29kZSArPSBcImVsc2UgXCIgKyB0aGlzLmVsc2UucmVuZGVyKG9wdHMpO1xuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9XG4gICAgb3B0aW1pemVOb2RlcygpIHtcbiAgICAgICAgc3VwZXIub3B0aW1pemVOb2RlcygpO1xuICAgICAgICBjb25zdCBjb25kID0gdGhpcy5jb25kaXRpb247XG4gICAgICAgIGlmIChjb25kID09PSB0cnVlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZXM7IC8vIGVsc2UgaXMgaWdub3JlZCBoZXJlXG4gICAgICAgIGxldCBlID0gdGhpcy5lbHNlO1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgY29uc3QgbnMgPSBlLm9wdGltaXplTm9kZXMoKTtcbiAgICAgICAgICAgIGUgPSB0aGlzLmVsc2UgPSBBcnJheS5pc0FycmF5KG5zKSA/IG5ldyBFbHNlKG5zKSA6IG5zO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBpZiAoY29uZCA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBJZiA/IGUgOiBlLm5vZGVzO1xuICAgICAgICAgICAgaWYgKHRoaXMubm9kZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBJZihub3QoY29uZCksIGUgaW5zdGFuY2VvZiBJZiA/IFtlXSA6IGUubm9kZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25kID09PSBmYWxzZSB8fCAhdGhpcy5ub2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgb3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5lbHNlID0gKF9hID0gdGhpcy5lbHNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKTtcbiAgICAgICAgaWYgKCEoc3VwZXIub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB8fCB0aGlzLmVsc2UpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IG9wdGltaXplRXhwcih0aGlzLmNvbmRpdGlvbiwgbmFtZXMsIGNvbnN0YW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gc3VwZXIubmFtZXM7XG4gICAgICAgIGFkZEV4cHJOYW1lcyhuYW1lcywgdGhpcy5jb25kaXRpb24pO1xuICAgICAgICBpZiAodGhpcy5lbHNlKVxuICAgICAgICAgICAgYWRkTmFtZXMobmFtZXMsIHRoaXMuZWxzZS5uYW1lcyk7XG4gICAgICAgIHJldHVybiBuYW1lcztcbiAgICB9XG59XG5JZi5raW5kID0gXCJpZlwiO1xuY2xhc3MgRm9yIGV4dGVuZHMgQmxvY2tOb2RlIHtcbn1cbkZvci5raW5kID0gXCJmb3JcIjtcbmNsYXNzIEZvckxvb3AgZXh0ZW5kcyBGb3Ige1xuICAgIGNvbnN0cnVjdG9yKGl0ZXJhdGlvbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLml0ZXJhdGlvbiA9IGl0ZXJhdGlvbjtcbiAgICB9XG4gICAgcmVuZGVyKG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGBmb3IoJHt0aGlzLml0ZXJhdGlvbn0pYCArIHN1cGVyLnJlbmRlcihvcHRzKTtcbiAgICB9XG4gICAgb3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB7XG4gICAgICAgIGlmICghc3VwZXIub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5pdGVyYXRpb24gPSBvcHRpbWl6ZUV4cHIodGhpcy5pdGVyYXRpb24sIG5hbWVzLCBjb25zdGFudHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0IG5hbWVzKCkge1xuICAgICAgICByZXR1cm4gYWRkTmFtZXMoc3VwZXIubmFtZXMsIHRoaXMuaXRlcmF0aW9uLm5hbWVzKTtcbiAgICB9XG59XG5jbGFzcyBGb3JSYW5nZSBleHRlbmRzIEZvciB7XG4gICAgY29uc3RydWN0b3IodmFyS2luZCwgbmFtZSwgZnJvbSwgdG8pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YXJLaW5kID0gdmFyS2luZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgIH1cbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICBjb25zdCB2YXJLaW5kID0gb3B0cy5lczUgPyBzY29wZV8xLnZhcktpbmRzLnZhciA6IHRoaXMudmFyS2luZDtcbiAgICAgICAgY29uc3QgeyBuYW1lLCBmcm9tLCB0byB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGBmb3IoJHt2YXJLaW5kfSAke25hbWV9PSR7ZnJvbX07ICR7bmFtZX08JHt0b307ICR7bmFtZX0rKylgICsgc3VwZXIucmVuZGVyKG9wdHMpO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gYWRkRXhwck5hbWVzKHN1cGVyLm5hbWVzLCB0aGlzLmZyb20pO1xuICAgICAgICByZXR1cm4gYWRkRXhwck5hbWVzKG5hbWVzLCB0aGlzLnRvKTtcbiAgICB9XG59XG5jbGFzcyBGb3JJdGVyIGV4dGVuZHMgRm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihsb29wLCB2YXJLaW5kLCBuYW1lLCBpdGVyYWJsZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxvb3AgPSBsb29wO1xuICAgICAgICB0aGlzLnZhcktpbmQgPSB2YXJLaW5kO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLml0ZXJhYmxlID0gaXRlcmFibGU7XG4gICAgfVxuICAgIHJlbmRlcihvcHRzKSB7XG4gICAgICAgIHJldHVybiBgZm9yKCR7dGhpcy52YXJLaW5kfSAke3RoaXMubmFtZX0gJHt0aGlzLmxvb3B9ICR7dGhpcy5pdGVyYWJsZX0pYCArIHN1cGVyLnJlbmRlcihvcHRzKTtcbiAgICB9XG4gICAgb3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB7XG4gICAgICAgIGlmICghc3VwZXIub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5pdGVyYWJsZSA9IG9wdGltaXplRXhwcih0aGlzLml0ZXJhYmxlLCBuYW1lcywgY29uc3RhbnRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGdldCBuYW1lcygpIHtcbiAgICAgICAgcmV0dXJuIGFkZE5hbWVzKHN1cGVyLm5hbWVzLCB0aGlzLml0ZXJhYmxlLm5hbWVzKTtcbiAgICB9XG59XG5jbGFzcyBGdW5jIGV4dGVuZHMgQmxvY2tOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBhcmdzLCBhc3luYykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgICAgICB0aGlzLmFzeW5jID0gYXN5bmM7XG4gICAgfVxuICAgIHJlbmRlcihvcHRzKSB7XG4gICAgICAgIGNvbnN0IF9hc3luYyA9IHRoaXMuYXN5bmMgPyBcImFzeW5jIFwiIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIGAke19hc3luY31mdW5jdGlvbiAke3RoaXMubmFtZX0oJHt0aGlzLmFyZ3N9KWAgKyBzdXBlci5yZW5kZXIob3B0cyk7XG4gICAgfVxufVxuRnVuYy5raW5kID0gXCJmdW5jXCI7XG5jbGFzcyBSZXR1cm4gZXh0ZW5kcyBQYXJlbnROb2RlIHtcbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICByZXR1cm4gXCJyZXR1cm4gXCIgKyBzdXBlci5yZW5kZXIob3B0cyk7XG4gICAgfVxufVxuUmV0dXJuLmtpbmQgPSBcInJldHVyblwiO1xuY2xhc3MgVHJ5IGV4dGVuZHMgQmxvY2tOb2RlIHtcbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICBsZXQgY29kZSA9IFwidHJ5XCIgKyBzdXBlci5yZW5kZXIob3B0cyk7XG4gICAgICAgIGlmICh0aGlzLmNhdGNoKVxuICAgICAgICAgICAgY29kZSArPSB0aGlzLmNhdGNoLnJlbmRlcihvcHRzKTtcbiAgICAgICAgaWYgKHRoaXMuZmluYWxseSlcbiAgICAgICAgICAgIGNvZGUgKz0gdGhpcy5maW5hbGx5LnJlbmRlcihvcHRzKTtcbiAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfVxuICAgIG9wdGltaXplTm9kZXMoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHN1cGVyLm9wdGltaXplTm9kZXMoKTtcbiAgICAgICAgKF9hID0gdGhpcy5jYXRjaCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9wdGltaXplTm9kZXMoKTtcbiAgICAgICAgKF9iID0gdGhpcy5maW5hbGx5KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub3B0aW1pemVOb2RlcygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgb3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHN1cGVyLm9wdGltaXplTmFtZXMobmFtZXMsIGNvbnN0YW50cyk7XG4gICAgICAgIChfYSA9IHRoaXMuY2F0Y2gpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vcHRpbWl6ZU5hbWVzKG5hbWVzLCBjb25zdGFudHMpO1xuICAgICAgICAoX2IgPSB0aGlzLmZpbmFsbHkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vcHRpbWl6ZU5hbWVzKG5hbWVzLCBjb25zdGFudHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0IG5hbWVzKCkge1xuICAgICAgICBjb25zdCBuYW1lcyA9IHN1cGVyLm5hbWVzO1xuICAgICAgICBpZiAodGhpcy5jYXRjaClcbiAgICAgICAgICAgIGFkZE5hbWVzKG5hbWVzLCB0aGlzLmNhdGNoLm5hbWVzKTtcbiAgICAgICAgaWYgKHRoaXMuZmluYWxseSlcbiAgICAgICAgICAgIGFkZE5hbWVzKG5hbWVzLCB0aGlzLmZpbmFsbHkubmFtZXMpO1xuICAgICAgICByZXR1cm4gbmFtZXM7XG4gICAgfVxufVxuY2xhc3MgQ2F0Y2ggZXh0ZW5kcyBCbG9ja05vZGUge1xuICAgIGNvbnN0cnVjdG9yKGVycm9yKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gICAgcmVuZGVyKG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGBjYXRjaCgke3RoaXMuZXJyb3J9KWAgKyBzdXBlci5yZW5kZXIob3B0cyk7XG4gICAgfVxufVxuQ2F0Y2gua2luZCA9IFwiY2F0Y2hcIjtcbmNsYXNzIEZpbmFsbHkgZXh0ZW5kcyBCbG9ja05vZGUge1xuICAgIHJlbmRlcihvcHRzKSB7XG4gICAgICAgIHJldHVybiBcImZpbmFsbHlcIiArIHN1cGVyLnJlbmRlcihvcHRzKTtcbiAgICB9XG59XG5GaW5hbGx5LmtpbmQgPSBcImZpbmFsbHlcIjtcbmNsYXNzIENvZGVHZW4ge1xuICAgIGNvbnN0cnVjdG9yKGV4dFNjb3BlLCBvcHRzID0ge30pIHtcbiAgICAgICAgdGhpcy5fdmFsdWVzID0ge307XG4gICAgICAgIHRoaXMuX2Jsb2NrU3RhcnRzID0gW107XG4gICAgICAgIHRoaXMuX2NvbnN0YW50cyA9IHt9O1xuICAgICAgICB0aGlzLm9wdHMgPSB7IC4uLm9wdHMsIF9uOiBvcHRzLmxpbmVzID8gXCJcXG5cIiA6IFwiXCIgfTtcbiAgICAgICAgdGhpcy5fZXh0U2NvcGUgPSBleHRTY29wZTtcbiAgICAgICAgdGhpcy5fc2NvcGUgPSBuZXcgc2NvcGVfMS5TY29wZSh7IHBhcmVudDogZXh0U2NvcGUgfSk7XG4gICAgICAgIHRoaXMuX25vZGVzID0gW25ldyBSb290KCldO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3QucmVuZGVyKHRoaXMub3B0cyk7XG4gICAgfVxuICAgIC8vIHJldHVybnMgdW5pcXVlIG5hbWUgaW4gdGhlIGludGVybmFsIHNjb3BlXG4gICAgbmFtZShwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlLm5hbWUocHJlZml4KTtcbiAgICB9XG4gICAgLy8gcmVzZXJ2ZXMgdW5pcXVlIG5hbWUgaW4gdGhlIGV4dGVybmFsIHNjb3BlXG4gICAgc2NvcGVOYW1lKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0U2NvcGUubmFtZShwcmVmaXgpO1xuICAgIH1cbiAgICAvLyByZXNlcnZlcyB1bmlxdWUgbmFtZSBpbiB0aGUgZXh0ZXJuYWwgc2NvcGUgYW5kIGFzc2lnbnMgdmFsdWUgdG8gaXRcbiAgICBzY29wZVZhbHVlKHByZWZpeE9yTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuX2V4dFNjb3BlLnZhbHVlKHByZWZpeE9yTmFtZSwgdmFsdWUpO1xuICAgICAgICBjb25zdCB2cyA9IHRoaXMuX3ZhbHVlc1tuYW1lLnByZWZpeF0gfHwgKHRoaXMuX3ZhbHVlc1tuYW1lLnByZWZpeF0gPSBuZXcgU2V0KCkpO1xuICAgICAgICB2cy5hZGQobmFtZSk7XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICBnZXRTY29wZVZhbHVlKHByZWZpeCwga2V5T3JSZWYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dFNjb3BlLmdldFZhbHVlKHByZWZpeCwga2V5T3JSZWYpO1xuICAgIH1cbiAgICAvLyByZXR1cm4gY29kZSB0aGF0IGFzc2lnbnMgdmFsdWVzIGluIHRoZSBleHRlcm5hbCBzY29wZSB0byB0aGUgbmFtZXMgdGhhdCBhcmUgdXNlZCBpbnRlcm5hbGx5XG4gICAgLy8gKHNhbWUgbmFtZXMgdGhhdCB3ZXJlIHJldHVybmVkIGJ5IGdlbi5zY29wZU5hbWUgb3IgZ2VuLnNjb3BlVmFsdWUpXG4gICAgc2NvcGVSZWZzKHNjb3BlTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0U2NvcGUuc2NvcGVSZWZzKHNjb3BlTmFtZSwgdGhpcy5fdmFsdWVzKTtcbiAgICB9XG4gICAgc2NvcGVDb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0U2NvcGUuc2NvcGVDb2RlKHRoaXMuX3ZhbHVlcyk7XG4gICAgfVxuICAgIF9kZWYodmFyS2luZCwgbmFtZU9yUHJlZml4LCByaHMsIGNvbnN0YW50KSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLl9zY29wZS50b05hbWUobmFtZU9yUHJlZml4KTtcbiAgICAgICAgaWYgKHJocyAhPT0gdW5kZWZpbmVkICYmIGNvbnN0YW50KVxuICAgICAgICAgICAgdGhpcy5fY29uc3RhbnRzW25hbWUuc3RyXSA9IHJocztcbiAgICAgICAgdGhpcy5fbGVhZk5vZGUobmV3IERlZih2YXJLaW5kLCBuYW1lLCByaHMpKTtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIC8vIGBjb25zdGAgZGVjbGFyYXRpb24gKGB2YXJgIGluIGVzNSBtb2RlKVxuICAgIGNvbnN0KG5hbWVPclByZWZpeCwgcmhzLCBfY29uc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZihzY29wZV8xLnZhcktpbmRzLmNvbnN0LCBuYW1lT3JQcmVmaXgsIHJocywgX2NvbnN0YW50KTtcbiAgICB9XG4gICAgLy8gYGxldGAgZGVjbGFyYXRpb24gd2l0aCBvcHRpb25hbCBhc3NpZ25tZW50IChgdmFyYCBpbiBlczUgbW9kZSlcbiAgICBsZXQobmFtZU9yUHJlZml4LCByaHMsIF9jb25zdGFudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmKHNjb3BlXzEudmFyS2luZHMubGV0LCBuYW1lT3JQcmVmaXgsIHJocywgX2NvbnN0YW50KTtcbiAgICB9XG4gICAgLy8gYHZhcmAgZGVjbGFyYXRpb24gd2l0aCBvcHRpb25hbCBhc3NpZ25tZW50XG4gICAgdmFyKG5hbWVPclByZWZpeCwgcmhzLCBfY29uc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZihzY29wZV8xLnZhcktpbmRzLnZhciwgbmFtZU9yUHJlZml4LCByaHMsIF9jb25zdGFudCk7XG4gICAgfVxuICAgIC8vIGFzc2lnbm1lbnQgY29kZVxuICAgIGFzc2lnbihsaHMsIHJocywgc2lkZUVmZmVjdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlYWZOb2RlKG5ldyBBc3NpZ24obGhzLCByaHMsIHNpZGVFZmZlY3RzKSk7XG4gICAgfVxuICAgIC8vIGArPWAgY29kZVxuICAgIGFkZChsaHMsIHJocykge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGVhZk5vZGUobmV3IEFzc2lnbk9wKGxocywgZXhwb3J0cy5vcGVyYXRvcnMuQURELCByaHMpKTtcbiAgICB9XG4gICAgLy8gYXBwZW5kcyBwYXNzZWQgU2FmZUV4cHIgdG8gY29kZSBvciBleGVjdXRlcyBCbG9ja1xuICAgIGNvZGUoYykge1xuICAgICAgICBpZiAodHlwZW9mIGMgPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgYygpO1xuICAgICAgICBlbHNlIGlmIChjICE9PSBjb2RlXzEubmlsKVxuICAgICAgICAgICAgdGhpcy5fbGVhZk5vZGUobmV3IEFueUNvZGUoYykpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gcmV0dXJucyBjb2RlIGZvciBvYmplY3QgbGl0ZXJhbCBmb3IgdGhlIHBhc3NlZCBhcmd1bWVudCBsaXN0IG9mIGtleS12YWx1ZSBwYWlyc1xuICAgIG9iamVjdCguLi5rZXlWYWx1ZXMpIHtcbiAgICAgICAgY29uc3QgY29kZSA9IFtcIntcIl07XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGtleVZhbHVlcykge1xuICAgICAgICAgICAgaWYgKGNvZGUubGVuZ3RoID4gMSlcbiAgICAgICAgICAgICAgICBjb2RlLnB1c2goXCIsXCIpO1xuICAgICAgICAgICAgY29kZS5wdXNoKGtleSk7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSB2YWx1ZSB8fCB0aGlzLm9wdHMuZXM1KSB7XG4gICAgICAgICAgICAgICAgY29kZS5wdXNoKFwiOlwiKTtcbiAgICAgICAgICAgICAgICAoMCwgY29kZV8xLmFkZENvZGVBcmcpKGNvZGUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb2RlLnB1c2goXCJ9XCIpO1xuICAgICAgICByZXR1cm4gbmV3IGNvZGVfMS5fQ29kZShjb2RlKTtcbiAgICB9XG4gICAgLy8gYGlmYCBjbGF1c2UgKG9yIHN0YXRlbWVudCBpZiBgdGhlbkJvZHlgIGFuZCwgb3B0aW9uYWxseSwgYGVsc2VCb2R5YCBhcmUgcGFzc2VkKVxuICAgIGlmKGNvbmRpdGlvbiwgdGhlbkJvZHksIGVsc2VCb2R5KSB7XG4gICAgICAgIHRoaXMuX2Jsb2NrTm9kZShuZXcgSWYoY29uZGl0aW9uKSk7XG4gICAgICAgIGlmICh0aGVuQm9keSAmJiBlbHNlQm9keSkge1xuICAgICAgICAgICAgdGhpcy5jb2RlKHRoZW5Cb2R5KS5lbHNlKCkuY29kZShlbHNlQm9keSkuZW5kSWYoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGVuQm9keSkge1xuICAgICAgICAgICAgdGhpcy5jb2RlKHRoZW5Cb2R5KS5lbmRJZigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVsc2VCb2R5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGVHZW46IFwiZWxzZVwiIGJvZHkgd2l0aG91dCBcInRoZW5cIiBib2R5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGBlbHNlIGlmYCBjbGF1c2UgLSBpbnZhbGlkIHdpdGhvdXQgYGlmYCBvciBhZnRlciBgZWxzZWAgY2xhdXNlc1xuICAgIGVsc2VJZihjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vsc2VOb2RlKG5ldyBJZihjb25kaXRpb24pKTtcbiAgICB9XG4gICAgLy8gYGVsc2VgIGNsYXVzZSAtIG9ubHkgdmFsaWQgYWZ0ZXIgYGlmYCBvciBgZWxzZSBpZmAgY2xhdXNlc1xuICAgIGVsc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbHNlTm9kZShuZXcgRWxzZSgpKTtcbiAgICB9XG4gICAgLy8gZW5kIGBpZmAgc3RhdGVtZW50IChuZWVkZWQgaWYgZ2VuLmlmIHdhcyB1c2VkIG9ubHkgd2l0aCBjb25kaXRpb24pXG4gICAgZW5kSWYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmRCbG9ja05vZGUoSWYsIEVsc2UpO1xuICAgIH1cbiAgICBfZm9yKG5vZGUsIGZvckJvZHkpIHtcbiAgICAgICAgdGhpcy5fYmxvY2tOb2RlKG5vZGUpO1xuICAgICAgICBpZiAoZm9yQm9keSlcbiAgICAgICAgICAgIHRoaXMuY29kZShmb3JCb2R5KS5lbmRGb3IoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGEgZ2VuZXJpYyBgZm9yYCBjbGF1c2UgKG9yIHN0YXRlbWVudCBpZiBgZm9yQm9keWAgaXMgcGFzc2VkKVxuICAgIGZvcihpdGVyYXRpb24sIGZvckJvZHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvcihuZXcgRm9yTG9vcChpdGVyYXRpb24pLCBmb3JCb2R5KTtcbiAgICB9XG4gICAgLy8gYGZvcmAgc3RhdGVtZW50IGZvciBhIHJhbmdlIG9mIHZhbHVlc1xuICAgIGZvclJhbmdlKG5hbWVPclByZWZpeCwgZnJvbSwgdG8sIGZvckJvZHksIHZhcktpbmQgPSB0aGlzLm9wdHMuZXM1ID8gc2NvcGVfMS52YXJLaW5kcy52YXIgOiBzY29wZV8xLnZhcktpbmRzLmxldCkge1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5fc2NvcGUudG9OYW1lKG5hbWVPclByZWZpeCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3IobmV3IEZvclJhbmdlKHZhcktpbmQsIG5hbWUsIGZyb20sIHRvKSwgKCkgPT4gZm9yQm9keShuYW1lKSk7XG4gICAgfVxuICAgIC8vIGBmb3Itb2ZgIHN0YXRlbWVudCAoaW4gZXM1IG1vZGUgcmVwbGFjZSB3aXRoIGEgbm9ybWFsIGZvciBsb29wKVxuICAgIGZvck9mKG5hbWVPclByZWZpeCwgaXRlcmFibGUsIGZvckJvZHksIHZhcktpbmQgPSBzY29wZV8xLnZhcktpbmRzLmNvbnN0KSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLl9zY29wZS50b05hbWUobmFtZU9yUHJlZml4KTtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5lczUpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IGl0ZXJhYmxlIGluc3RhbmNlb2YgY29kZV8xLk5hbWUgPyBpdGVyYWJsZSA6IHRoaXMudmFyKFwiX2FyclwiLCBpdGVyYWJsZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JSYW5nZShcIl9pXCIsIDAsICgwLCBjb2RlXzEuXykgYCR7YXJyfS5sZW5ndGhgLCAoaSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudmFyKG5hbWUsICgwLCBjb2RlXzEuXykgYCR7YXJyfVske2l9XWApO1xuICAgICAgICAgICAgICAgIGZvckJvZHkobmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZm9yKG5ldyBGb3JJdGVyKFwib2ZcIiwgdmFyS2luZCwgbmFtZSwgaXRlcmFibGUpLCAoKSA9PiBmb3JCb2R5KG5hbWUpKTtcbiAgICB9XG4gICAgLy8gYGZvci1pbmAgc3RhdGVtZW50LlxuICAgIC8vIFdpdGggb3B0aW9uIGBvd25Qcm9wZXJ0aWVzYCByZXBsYWNlZCB3aXRoIGEgYGZvci1vZmAgbG9vcCBmb3Igb2JqZWN0IGtleXNcbiAgICBmb3JJbihuYW1lT3JQcmVmaXgsIG9iaiwgZm9yQm9keSwgdmFyS2luZCA9IHRoaXMub3B0cy5lczUgPyBzY29wZV8xLnZhcktpbmRzLnZhciA6IHNjb3BlXzEudmFyS2luZHMuY29uc3QpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JPZihuYW1lT3JQcmVmaXgsICgwLCBjb2RlXzEuXykgYE9iamVjdC5rZXlzKCR7b2JqfSlgLCBmb3JCb2R5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5fc2NvcGUudG9OYW1lKG5hbWVPclByZWZpeCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3IobmV3IEZvckl0ZXIoXCJpblwiLCB2YXJLaW5kLCBuYW1lLCBvYmopLCAoKSA9PiBmb3JCb2R5KG5hbWUpKTtcbiAgICB9XG4gICAgLy8gZW5kIGBmb3JgIGxvb3BcbiAgICBlbmRGb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmRCbG9ja05vZGUoRm9yKTtcbiAgICB9XG4gICAgLy8gYGxhYmVsYCBzdGF0ZW1lbnRcbiAgICBsYWJlbChsYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGVhZk5vZGUobmV3IExhYmVsKGxhYmVsKSk7XG4gICAgfVxuICAgIC8vIGBicmVha2Agc3RhdGVtZW50XG4gICAgYnJlYWsobGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlYWZOb2RlKG5ldyBCcmVhayhsYWJlbCkpO1xuICAgIH1cbiAgICAvLyBgcmV0dXJuYCBzdGF0ZW1lbnRcbiAgICByZXR1cm4odmFsdWUpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBSZXR1cm4oKTtcbiAgICAgICAgdGhpcy5fYmxvY2tOb2RlKG5vZGUpO1xuICAgICAgICB0aGlzLmNvZGUodmFsdWUpO1xuICAgICAgICBpZiAobm9kZS5ub2Rlcy5sZW5ndGggIT09IDEpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGVHZW46IFwicmV0dXJuXCIgc2hvdWxkIGhhdmUgb25lIG5vZGUnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZEJsb2NrTm9kZShSZXR1cm4pO1xuICAgIH1cbiAgICAvLyBgdHJ5YCBzdGF0ZW1lbnRcbiAgICB0cnkodHJ5Qm9keSwgY2F0Y2hDb2RlLCBmaW5hbGx5Q29kZSkge1xuICAgICAgICBpZiAoIWNhdGNoQ29kZSAmJiAhZmluYWxseUNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGVHZW46IFwidHJ5XCIgd2l0aG91dCBcImNhdGNoXCIgYW5kIFwiZmluYWxseVwiJyk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgVHJ5KCk7XG4gICAgICAgIHRoaXMuX2Jsb2NrTm9kZShub2RlKTtcbiAgICAgICAgdGhpcy5jb2RlKHRyeUJvZHkpO1xuICAgICAgICBpZiAoY2F0Y2hDb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IHRoaXMubmFtZShcImVcIik7XG4gICAgICAgICAgICB0aGlzLl9jdXJyTm9kZSA9IG5vZGUuY2F0Y2ggPSBuZXcgQ2F0Y2goZXJyb3IpO1xuICAgICAgICAgICAgY2F0Y2hDb2RlKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmluYWxseUNvZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJOb2RlID0gbm9kZS5maW5hbGx5ID0gbmV3IEZpbmFsbHkoKTtcbiAgICAgICAgICAgIHRoaXMuY29kZShmaW5hbGx5Q29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZEJsb2NrTm9kZShDYXRjaCwgRmluYWxseSk7XG4gICAgfVxuICAgIC8vIGB0aHJvd2Agc3RhdGVtZW50XG4gICAgdGhyb3coZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlYWZOb2RlKG5ldyBUaHJvdyhlcnJvcikpO1xuICAgIH1cbiAgICAvLyBzdGFydCBzZWxmLWJhbGFuY2luZyBibG9ja1xuICAgIGJsb2NrKGJvZHksIG5vZGVDb3VudCkge1xuICAgICAgICB0aGlzLl9ibG9ja1N0YXJ0cy5wdXNoKHRoaXMuX25vZGVzLmxlbmd0aCk7XG4gICAgICAgIGlmIChib2R5KVxuICAgICAgICAgICAgdGhpcy5jb2RlKGJvZHkpLmVuZEJsb2NrKG5vZGVDb3VudCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlbmQgdGhlIGN1cnJlbnQgc2VsZi1iYWxhbmNpbmcgYmxvY2tcbiAgICBlbmRCbG9jayhub2RlQ291bnQpIHtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5fYmxvY2tTdGFydHMucG9wKCk7XG4gICAgICAgIGlmIChsZW4gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvZGVHZW46IG5vdCBpbiBzZWxmLWJhbGFuY2luZyBibG9ja1wiKTtcbiAgICAgICAgY29uc3QgdG9DbG9zZSA9IHRoaXMuX25vZGVzLmxlbmd0aCAtIGxlbjtcbiAgICAgICAgaWYgKHRvQ2xvc2UgPCAwIHx8IChub2RlQ291bnQgIT09IHVuZGVmaW5lZCAmJiB0b0Nsb3NlICE9PSBub2RlQ291bnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvZGVHZW46IHdyb25nIG51bWJlciBvZiBub2RlczogJHt0b0Nsb3NlfSB2cyAke25vZGVDb3VudH0gZXhwZWN0ZWRgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ub2Rlcy5sZW5ndGggPSBsZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBgZnVuY3Rpb25gIGhlYWRpbmcgKG9yIGRlZmluaXRpb24gaWYgZnVuY0JvZHkgaXMgcGFzc2VkKVxuICAgIGZ1bmMobmFtZSwgYXJncyA9IGNvZGVfMS5uaWwsIGFzeW5jLCBmdW5jQm9keSkge1xuICAgICAgICB0aGlzLl9ibG9ja05vZGUobmV3IEZ1bmMobmFtZSwgYXJncywgYXN5bmMpKTtcbiAgICAgICAgaWYgKGZ1bmNCb2R5KVxuICAgICAgICAgICAgdGhpcy5jb2RlKGZ1bmNCb2R5KS5lbmRGdW5jKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlbmQgZnVuY3Rpb24gZGVmaW5pdGlvblxuICAgIGVuZEZ1bmMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmRCbG9ja05vZGUoRnVuYyk7XG4gICAgfVxuICAgIG9wdGltaXplKG4gPSAxKSB7XG4gICAgICAgIHdoaWxlIChuLS0gPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9yb290Lm9wdGltaXplTm9kZXMoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3Qub3B0aW1pemVOYW1lcyh0aGlzLl9yb290Lm5hbWVzLCB0aGlzLl9jb25zdGFudHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9sZWFmTm9kZShub2RlKSB7XG4gICAgICAgIHRoaXMuX2N1cnJOb2RlLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBfYmxvY2tOb2RlKG5vZGUpIHtcbiAgICAgICAgdGhpcy5fY3Vyck5vZGUubm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgdGhpcy5fbm9kZXMucHVzaChub2RlKTtcbiAgICB9XG4gICAgX2VuZEJsb2NrTm9kZShOMSwgTjIpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuX2N1cnJOb2RlO1xuICAgICAgICBpZiAobiBpbnN0YW5jZW9mIE4xIHx8IChOMiAmJiBuIGluc3RhbmNlb2YgTjIpKSB7XG4gICAgICAgICAgICB0aGlzLl9ub2Rlcy5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29kZUdlbjogbm90IGluIGJsb2NrIFwiJHtOMiA/IGAke04xLmtpbmR9LyR7TjIua2luZH1gIDogTjEua2luZH1cImApO1xuICAgIH1cbiAgICBfZWxzZU5vZGUobm9kZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5fY3Vyck5vZGU7XG4gICAgICAgIGlmICghKG4gaW5zdGFuY2VvZiBJZikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZUdlbjogXCJlbHNlXCIgd2l0aG91dCBcImlmXCInKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdXJyTm9kZSA9IG4uZWxzZSA9IG5vZGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQgX3Jvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub2Rlc1swXTtcbiAgICB9XG4gICAgZ2V0IF9jdXJyTm9kZSgpIHtcbiAgICAgICAgY29uc3QgbnMgPSB0aGlzLl9ub2RlcztcbiAgICAgICAgcmV0dXJuIG5zW25zLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBzZXQgX2N1cnJOb2RlKG5vZGUpIHtcbiAgICAgICAgY29uc3QgbnMgPSB0aGlzLl9ub2RlcztcbiAgICAgICAgbnNbbnMubGVuZ3RoIC0gMV0gPSBub2RlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29kZUdlbiA9IENvZGVHZW47XG5mdW5jdGlvbiBhZGROYW1lcyhuYW1lcywgZnJvbSkge1xuICAgIGZvciAoY29uc3QgbiBpbiBmcm9tKVxuICAgICAgICBuYW1lc1tuXSA9IChuYW1lc1tuXSB8fCAwKSArIChmcm9tW25dIHx8IDApO1xuICAgIHJldHVybiBuYW1lcztcbn1cbmZ1bmN0aW9uIGFkZEV4cHJOYW1lcyhuYW1lcywgZnJvbSkge1xuICAgIHJldHVybiBmcm9tIGluc3RhbmNlb2YgY29kZV8xLl9Db2RlT3JOYW1lID8gYWRkTmFtZXMobmFtZXMsIGZyb20ubmFtZXMpIDogbmFtZXM7XG59XG5mdW5jdGlvbiBvcHRpbWl6ZUV4cHIoZXhwciwgbmFtZXMsIGNvbnN0YW50cykge1xuICAgIGlmIChleHByIGluc3RhbmNlb2YgY29kZV8xLk5hbWUpXG4gICAgICAgIHJldHVybiByZXBsYWNlTmFtZShleHByKTtcbiAgICBpZiAoIWNhbk9wdGltaXplKGV4cHIpKVxuICAgICAgICByZXR1cm4gZXhwcjtcbiAgICByZXR1cm4gbmV3IGNvZGVfMS5fQ29kZShleHByLl9pdGVtcy5yZWR1Y2UoKGl0ZW1zLCBjKSA9PiB7XG4gICAgICAgIGlmIChjIGluc3RhbmNlb2YgY29kZV8xLk5hbWUpXG4gICAgICAgICAgICBjID0gcmVwbGFjZU5hbWUoYyk7XG4gICAgICAgIGlmIChjIGluc3RhbmNlb2YgY29kZV8xLl9Db2RlKVxuICAgICAgICAgICAgaXRlbXMucHVzaCguLi5jLl9pdGVtcyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goYyk7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9LCBbXSkpO1xuICAgIGZ1bmN0aW9uIHJlcGxhY2VOYW1lKG4pIHtcbiAgICAgICAgY29uc3QgYyA9IGNvbnN0YW50c1tuLnN0cl07XG4gICAgICAgIGlmIChjID09PSB1bmRlZmluZWQgfHwgbmFtZXNbbi5zdHJdICE9PSAxKVxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIGRlbGV0ZSBuYW1lc1tuLnN0cl07XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjYW5PcHRpbWl6ZShlKSB7XG4gICAgICAgIHJldHVybiAoZSBpbnN0YW5jZW9mIGNvZGVfMS5fQ29kZSAmJlxuICAgICAgICAgICAgZS5faXRlbXMuc29tZSgoYykgPT4gYyBpbnN0YW5jZW9mIGNvZGVfMS5OYW1lICYmIG5hbWVzW2Muc3RyXSA9PT0gMSAmJiBjb25zdGFudHNbYy5zdHJdICE9PSB1bmRlZmluZWQpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdWJ0cmFjdE5hbWVzKG5hbWVzLCBmcm9tKSB7XG4gICAgZm9yIChjb25zdCBuIGluIGZyb20pXG4gICAgICAgIG5hbWVzW25dID0gKG5hbWVzW25dIHx8IDApIC0gKGZyb21bbl0gfHwgMCk7XG59XG5mdW5jdGlvbiBub3QoeCkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PSBcImJvb2xlYW5cIiB8fCB0eXBlb2YgeCA9PSBcIm51bWJlclwiIHx8IHggPT09IG51bGwgPyAheCA6ICgwLCBjb2RlXzEuXykgYCEke3Bhcih4KX1gO1xufVxuZXhwb3J0cy5ub3QgPSBub3Q7XG5jb25zdCBhbmRDb2RlID0gbWFwcGVuZChleHBvcnRzLm9wZXJhdG9ycy5BTkQpO1xuLy8gYm9vbGVhbiBBTkQgKCYmKSBleHByZXNzaW9uIHdpdGggdGhlIHBhc3NlZCBhcmd1bWVudHNcbmZ1bmN0aW9uIGFuZCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIGFyZ3MucmVkdWNlKGFuZENvZGUpO1xufVxuZXhwb3J0cy5hbmQgPSBhbmQ7XG5jb25zdCBvckNvZGUgPSBtYXBwZW5kKGV4cG9ydHMub3BlcmF0b3JzLk9SKTtcbi8vIGJvb2xlYW4gT1IgKHx8KSBleHByZXNzaW9uIHdpdGggdGhlIHBhc3NlZCBhcmd1bWVudHNcbmZ1bmN0aW9uIG9yKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXJncy5yZWR1Y2Uob3JDb2RlKTtcbn1cbmV4cG9ydHMub3IgPSBvcjtcbmZ1bmN0aW9uIG1hcHBlbmQob3ApIHtcbiAgICByZXR1cm4gKHgsIHkpID0+ICh4ID09PSBjb2RlXzEubmlsID8geSA6IHkgPT09IGNvZGVfMS5uaWwgPyB4IDogKDAsIGNvZGVfMS5fKSBgJHtwYXIoeCl9ICR7b3B9ICR7cGFyKHkpfWApO1xufVxuZnVuY3Rpb24gcGFyKHgpIHtcbiAgICByZXR1cm4geCBpbnN0YW5jZW9mIGNvZGVfMS5OYW1lID8geCA6ICgwLCBjb2RlXzEuXykgYCgke3h9KWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jaGVja1N0cmljdE1vZGUgPSBleHBvcnRzLmdldEVycm9yUGF0aCA9IGV4cG9ydHMuVHlwZSA9IGV4cG9ydHMudXNlRnVuYyA9IGV4cG9ydHMuc2V0RXZhbHVhdGVkID0gZXhwb3J0cy5ldmFsdWF0ZWRQcm9wc1RvTmFtZSA9IGV4cG9ydHMubWVyZ2VFdmFsdWF0ZWQgPSBleHBvcnRzLmVhY2hJdGVtID0gZXhwb3J0cy51bmVzY2FwZUpzb25Qb2ludGVyID0gZXhwb3J0cy5lc2NhcGVKc29uUG9pbnRlciA9IGV4cG9ydHMuZXNjYXBlRnJhZ21lbnQgPSBleHBvcnRzLnVuZXNjYXBlRnJhZ21lbnQgPSBleHBvcnRzLnNjaGVtYVJlZk9yVmFsID0gZXhwb3J0cy5zY2hlbWFIYXNSdWxlc0J1dFJlZiA9IGV4cG9ydHMuc2NoZW1hSGFzUnVsZXMgPSBleHBvcnRzLmNoZWNrVW5rbm93blJ1bGVzID0gZXhwb3J0cy5hbHdheXNWYWxpZFNjaGVtYSA9IGV4cG9ydHMudG9IYXNoID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4vY29kZWdlblwiKTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuL2NvZGVnZW4vY29kZVwiKTtcbi8vIFRPRE8gcmVmYWN0b3IgdG8gdXNlIFNldFxuZnVuY3Rpb24gdG9IYXNoKGFycikge1xuICAgIGNvbnN0IGhhc2ggPSB7fTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKVxuICAgICAgICBoYXNoW2l0ZW1dID0gdHJ1ZTtcbiAgICByZXR1cm4gaGFzaDtcbn1cbmV4cG9ydHMudG9IYXNoID0gdG9IYXNoO1xuZnVuY3Rpb24gYWx3YXlzVmFsaWRTY2hlbWEoaXQsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2Ygc2NoZW1hID09IFwiYm9vbGVhblwiKVxuICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgIGlmIChPYmplY3Qua2V5cyhzY2hlbWEpLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2hlY2tVbmtub3duUnVsZXMoaXQsIHNjaGVtYSk7XG4gICAgcmV0dXJuICFzY2hlbWFIYXNSdWxlcyhzY2hlbWEsIGl0LnNlbGYuUlVMRVMuYWxsKTtcbn1cbmV4cG9ydHMuYWx3YXlzVmFsaWRTY2hlbWEgPSBhbHdheXNWYWxpZFNjaGVtYTtcbmZ1bmN0aW9uIGNoZWNrVW5rbm93blJ1bGVzKGl0LCBzY2hlbWEgPSBpdC5zY2hlbWEpIHtcbiAgICBjb25zdCB7IG9wdHMsIHNlbGYgfSA9IGl0O1xuICAgIGlmICghb3B0cy5zdHJpY3RTY2hlbWEpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJib29sZWFuXCIpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBydWxlcyA9IHNlbGYuUlVMRVMua2V5d29yZHM7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hKSB7XG4gICAgICAgIGlmICghcnVsZXNba2V5XSlcbiAgICAgICAgICAgIGNoZWNrU3RyaWN0TW9kZShpdCwgYHVua25vd24ga2V5d29yZDogXCIke2tleX1cImApO1xuICAgIH1cbn1cbmV4cG9ydHMuY2hlY2tVbmtub3duUnVsZXMgPSBjaGVja1Vua25vd25SdWxlcztcbmZ1bmN0aW9uIHNjaGVtYUhhc1J1bGVzKHNjaGVtYSwgcnVsZXMpIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcImJvb2xlYW5cIilcbiAgICAgICAgcmV0dXJuICFzY2hlbWE7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hKVxuICAgICAgICBpZiAocnVsZXNba2V5XSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuc2NoZW1hSGFzUnVsZXMgPSBzY2hlbWFIYXNSdWxlcztcbmZ1bmN0aW9uIHNjaGVtYUhhc1J1bGVzQnV0UmVmKHNjaGVtYSwgUlVMRVMpIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcImJvb2xlYW5cIilcbiAgICAgICAgcmV0dXJuICFzY2hlbWE7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hKVxuICAgICAgICBpZiAoa2V5ICE9PSBcIiRyZWZcIiAmJiBSVUxFUy5hbGxba2V5XSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuc2NoZW1hSGFzUnVsZXNCdXRSZWYgPSBzY2hlbWFIYXNSdWxlc0J1dFJlZjtcbmZ1bmN0aW9uIHNjaGVtYVJlZk9yVmFsKHsgdG9wU2NoZW1hUmVmLCBzY2hlbWFQYXRoIH0sIHNjaGVtYSwga2V5d29yZCwgJGRhdGEpIHtcbiAgICBpZiAoISRkYXRhKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHNjaGVtYSA9PSBcImJvb2xlYW5cIilcbiAgICAgICAgICAgIHJldHVybiBzY2hlbWE7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5fKSBgJHtzY2hlbWF9YDtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7dG9wU2NoZW1hUmVmfSR7c2NoZW1hUGF0aH0keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKGtleXdvcmQpfWA7XG59XG5leHBvcnRzLnNjaGVtYVJlZk9yVmFsID0gc2NoZW1hUmVmT3JWYWw7XG5mdW5jdGlvbiB1bmVzY2FwZUZyYWdtZW50KHN0cikge1xuICAgIHJldHVybiB1bmVzY2FwZUpzb25Qb2ludGVyKGRlY29kZVVSSUNvbXBvbmVudChzdHIpKTtcbn1cbmV4cG9ydHMudW5lc2NhcGVGcmFnbWVudCA9IHVuZXNjYXBlRnJhZ21lbnQ7XG5mdW5jdGlvbiBlc2NhcGVGcmFnbWVudChzdHIpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGVzY2FwZUpzb25Qb2ludGVyKHN0cikpO1xufVxuZXhwb3J0cy5lc2NhcGVGcmFnbWVudCA9IGVzY2FwZUZyYWdtZW50O1xuZnVuY3Rpb24gZXNjYXBlSnNvblBvaW50ZXIoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgPT0gXCJudW1iZXJcIilcbiAgICAgICAgcmV0dXJuIGAke3N0cn1gO1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvfi9nLCBcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLCBcIn4xXCIpO1xufVxuZXhwb3J0cy5lc2NhcGVKc29uUG9pbnRlciA9IGVzY2FwZUpzb25Qb2ludGVyO1xuZnVuY3Rpb24gdW5lc2NhcGVKc29uUG9pbnRlcihzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL34xL2csIFwiL1wiKS5yZXBsYWNlKC9+MC9nLCBcIn5cIik7XG59XG5leHBvcnRzLnVuZXNjYXBlSnNvblBvaW50ZXIgPSB1bmVzY2FwZUpzb25Qb2ludGVyO1xuZnVuY3Rpb24gZWFjaEl0ZW0oeHMsIGYpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh4cykpIHtcbiAgICAgICAgZm9yIChjb25zdCB4IG9mIHhzKVxuICAgICAgICAgICAgZih4KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGYoeHMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZWFjaEl0ZW0gPSBlYWNoSXRlbTtcbmZ1bmN0aW9uIG1ha2VNZXJnZUV2YWx1YXRlZCh7IG1lcmdlTmFtZXMsIG1lcmdlVG9OYW1lLCBtZXJnZVZhbHVlcywgcmVzdWx0VG9OYW1lLCB9KSB7XG4gICAgcmV0dXJuIChnZW4sIGZyb20sIHRvLCB0b05hbWUpID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0gdG8gPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBmcm9tXG4gICAgICAgICAgICA6IHRvIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWVcbiAgICAgICAgICAgICAgICA/IChmcm9tIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUgPyBtZXJnZU5hbWVzKGdlbiwgZnJvbSwgdG8pIDogbWVyZ2VUb05hbWUoZ2VuLCBmcm9tLCB0byksIHRvKVxuICAgICAgICAgICAgICAgIDogZnJvbSBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lXG4gICAgICAgICAgICAgICAgICAgID8gKG1lcmdlVG9OYW1lKGdlbiwgdG8sIGZyb20pLCBmcm9tKVxuICAgICAgICAgICAgICAgICAgICA6IG1lcmdlVmFsdWVzKGZyb20sIHRvKTtcbiAgICAgICAgcmV0dXJuIHRvTmFtZSA9PT0gY29kZWdlbl8xLk5hbWUgJiYgIShyZXMgaW5zdGFuY2VvZiBjb2RlZ2VuXzEuTmFtZSkgPyByZXN1bHRUb05hbWUoZ2VuLCByZXMpIDogcmVzO1xuICAgIH07XG59XG5leHBvcnRzLm1lcmdlRXZhbHVhdGVkID0ge1xuICAgIHByb3BzOiBtYWtlTWVyZ2VFdmFsdWF0ZWQoe1xuICAgICAgICBtZXJnZU5hbWVzOiAoZ2VuLCBmcm9tLCB0bykgPT4gZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7dG99ICE9PSB0cnVlICYmICR7ZnJvbX0gIT09IHVuZGVmaW5lZGAsICgpID0+IHtcbiAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2Zyb219ID09PSB0cnVlYCwgKCkgPT4gZ2VuLmFzc2lnbih0bywgdHJ1ZSksICgpID0+IGdlbi5hc3NpZ24odG8sICgwLCBjb2RlZ2VuXzEuXykgYCR7dG99IHx8IHt9YCkuY29kZSgoMCwgY29kZWdlbl8xLl8pIGBPYmplY3QuYXNzaWduKCR7dG99LCAke2Zyb219KWApKTtcbiAgICAgICAgfSksXG4gICAgICAgIG1lcmdlVG9OYW1lOiAoZ2VuLCBmcm9tLCB0bykgPT4gZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7dG99ICE9PSB0cnVlYCwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGZyb20gPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHRvLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odG8sICgwLCBjb2RlZ2VuXzEuXykgYCR7dG99IHx8IHt9YCk7XG4gICAgICAgICAgICAgICAgc2V0RXZhbHVhdGVkKGdlbiwgdG8sIGZyb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgbWVyZ2VWYWx1ZXM6IChmcm9tLCB0bykgPT4gKGZyb20gPT09IHRydWUgPyB0cnVlIDogeyAuLi5mcm9tLCAuLi50byB9KSxcbiAgICAgICAgcmVzdWx0VG9OYW1lOiBldmFsdWF0ZWRQcm9wc1RvTmFtZSxcbiAgICB9KSxcbiAgICBpdGVtczogbWFrZU1lcmdlRXZhbHVhdGVkKHtcbiAgICAgICAgbWVyZ2VOYW1lczogKGdlbiwgZnJvbSwgdG8pID0+IGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke3RvfSAhPT0gdHJ1ZSAmJiAke2Zyb219ICE9PSB1bmRlZmluZWRgLCAoKSA9PiBnZW4uYXNzaWduKHRvLCAoMCwgY29kZWdlbl8xLl8pIGAke2Zyb219ID09PSB0cnVlID8gdHJ1ZSA6ICR7dG99ID4gJHtmcm9tfSA/ICR7dG99IDogJHtmcm9tfWApKSxcbiAgICAgICAgbWVyZ2VUb05hbWU6IChnZW4sIGZyb20sIHRvKSA9PiBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHt0b30gIT09IHRydWVgLCAoKSA9PiBnZW4uYXNzaWduKHRvLCBmcm9tID09PSB0cnVlID8gdHJ1ZSA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7dG99ID4gJHtmcm9tfSA/ICR7dG99IDogJHtmcm9tfWApKSxcbiAgICAgICAgbWVyZ2VWYWx1ZXM6IChmcm9tLCB0bykgPT4gKGZyb20gPT09IHRydWUgPyB0cnVlIDogTWF0aC5tYXgoZnJvbSwgdG8pKSxcbiAgICAgICAgcmVzdWx0VG9OYW1lOiAoZ2VuLCBpdGVtcykgPT4gZ2VuLnZhcihcIml0ZW1zXCIsIGl0ZW1zKSxcbiAgICB9KSxcbn07XG5mdW5jdGlvbiBldmFsdWF0ZWRQcm9wc1RvTmFtZShnZW4sIHBzKSB7XG4gICAgaWYgKHBzID09PSB0cnVlKVxuICAgICAgICByZXR1cm4gZ2VuLnZhcihcInByb3BzXCIsIHRydWUpO1xuICAgIGNvbnN0IHByb3BzID0gZ2VuLnZhcihcInByb3BzXCIsICgwLCBjb2RlZ2VuXzEuXykgYHt9YCk7XG4gICAgaWYgKHBzICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHNldEV2YWx1YXRlZChnZW4sIHByb3BzLCBwcyk7XG4gICAgcmV0dXJuIHByb3BzO1xufVxuZXhwb3J0cy5ldmFsdWF0ZWRQcm9wc1RvTmFtZSA9IGV2YWx1YXRlZFByb3BzVG9OYW1lO1xuZnVuY3Rpb24gc2V0RXZhbHVhdGVkKGdlbiwgcHJvcHMsIHBzKSB7XG4gICAgT2JqZWN0LmtleXMocHMpLmZvckVhY2goKHApID0+IGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtwcm9wc30keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKHApfWAsIHRydWUpKTtcbn1cbmV4cG9ydHMuc2V0RXZhbHVhdGVkID0gc2V0RXZhbHVhdGVkO1xuY29uc3Qgc25pcHBldHMgPSB7fTtcbmZ1bmN0aW9uIHVzZUZ1bmMoZ2VuLCBmKSB7XG4gICAgcmV0dXJuIGdlbi5zY29wZVZhbHVlKFwiZnVuY1wiLCB7XG4gICAgICAgIHJlZjogZixcbiAgICAgICAgY29kZTogc25pcHBldHNbZi5jb2RlXSB8fCAoc25pcHBldHNbZi5jb2RlXSA9IG5ldyBjb2RlXzEuX0NvZGUoZi5jb2RlKSksXG4gICAgfSk7XG59XG5leHBvcnRzLnVzZUZ1bmMgPSB1c2VGdW5jO1xudmFyIFR5cGU7XG4oZnVuY3Rpb24gKFR5cGUpIHtcbiAgICBUeXBlW1R5cGVbXCJOdW1cIl0gPSAwXSA9IFwiTnVtXCI7XG4gICAgVHlwZVtUeXBlW1wiU3RyXCJdID0gMV0gPSBcIlN0clwiO1xufSkoVHlwZSB8fCAoZXhwb3J0cy5UeXBlID0gVHlwZSA9IHt9KSk7XG5mdW5jdGlvbiBnZXRFcnJvclBhdGgoZGF0YVByb3AsIGRhdGFQcm9wVHlwZSwganNQcm9wZXJ0eVN5bnRheCkge1xuICAgIC8vIGxldCBwYXRoXG4gICAgaWYgKGRhdGFQcm9wIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUpIHtcbiAgICAgICAgY29uc3QgaXNOdW1iZXIgPSBkYXRhUHJvcFR5cGUgPT09IFR5cGUuTnVtO1xuICAgICAgICByZXR1cm4ganNQcm9wZXJ0eVN5bnRheFxuICAgICAgICAgICAgPyBpc051bWJlclxuICAgICAgICAgICAgICAgID8gKDAsIGNvZGVnZW5fMS5fKSBgXCJbXCIgKyAke2RhdGFQcm9wfSArIFwiXVwiYFxuICAgICAgICAgICAgICAgIDogKDAsIGNvZGVnZW5fMS5fKSBgXCJbJ1wiICsgJHtkYXRhUHJvcH0gKyBcIiddXCJgXG4gICAgICAgICAgICA6IGlzTnVtYmVyXG4gICAgICAgICAgICAgICAgPyAoMCwgY29kZWdlbl8xLl8pIGBcIi9cIiArICR7ZGF0YVByb3B9YFxuICAgICAgICAgICAgICAgIDogKDAsIGNvZGVnZW5fMS5fKSBgXCIvXCIgKyAke2RhdGFQcm9wfS5yZXBsYWNlKC9+L2csIFwifjBcIikucmVwbGFjZSgvXFxcXC8vZywgXCJ+MVwiKWA7IC8vIFRPRE8gbWF5YmUgdXNlIGdsb2JhbCBlc2NhcGVQb2ludGVyXG4gICAgfVxuICAgIHJldHVybiBqc1Byb3BlcnR5U3ludGF4ID8gKDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkoZGF0YVByb3ApLnRvU3RyaW5nKCkgOiBcIi9cIiArIGVzY2FwZUpzb25Qb2ludGVyKGRhdGFQcm9wKTtcbn1cbmV4cG9ydHMuZ2V0RXJyb3JQYXRoID0gZ2V0RXJyb3JQYXRoO1xuZnVuY3Rpb24gY2hlY2tTdHJpY3RNb2RlKGl0LCBtc2csIG1vZGUgPSBpdC5vcHRzLnN0cmljdFNjaGVtYSkge1xuICAgIGlmICghbW9kZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIG1zZyA9IGBzdHJpY3QgbW9kZTogJHttc2d9YDtcbiAgICBpZiAobW9kZSA9PT0gdHJ1ZSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgaXQuc2VsZi5sb2dnZXIud2Fybihtc2cpO1xufVxuZXhwb3J0cy5jaGVja1N0cmljdE1vZGUgPSBjaGVja1N0cmljdE1vZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi9jb2RlZ2VuXCIpO1xuY29uc3QgbmFtZXMgPSB7XG4gICAgLy8gdmFsaWRhdGlvbiBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICBkYXRhOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJkYXRhXCIpLCAvLyBkYXRhIHBhc3NlZCB0byB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gICAgLy8gYXJncyBwYXNzZWQgZnJvbSByZWZlcmVuY2luZyBzY2hlbWFcbiAgICB2YWxDeHQ6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInZhbEN4dFwiKSwgLy8gdmFsaWRhdGlvbi9kYXRhIGNvbnRleHQgLSBzaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHksIGl0IGlzIGRlc3RydWN0dXJlZCB0byB0aGUgbmFtZXMgYmVsb3dcbiAgICBpbnN0YW5jZVBhdGg6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImluc3RhbmNlUGF0aFwiKSxcbiAgICBwYXJlbnREYXRhOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJwYXJlbnREYXRhXCIpLFxuICAgIHBhcmVudERhdGFQcm9wZXJ0eTogbmV3IGNvZGVnZW5fMS5OYW1lKFwicGFyZW50RGF0YVByb3BlcnR5XCIpLFxuICAgIHJvb3REYXRhOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJyb290RGF0YVwiKSwgLy8gcm9vdCBkYXRhIC0gc2FtZSBhcyB0aGUgZGF0YSBwYXNzZWQgdG8gdGhlIGZpcnN0L3RvcCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gICAgZHluYW1pY0FuY2hvcnM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImR5bmFtaWNBbmNob3JzXCIpLCAvLyB1c2VkIHRvIHN1cHBvcnQgcmVjdXJzaXZlUmVmIGFuZCBkeW5hbWljUmVmXG4gICAgLy8gZnVuY3Rpb24gc2NvcGVkIHZhcmlhYmxlc1xuICAgIHZFcnJvcnM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInZFcnJvcnNcIiksIC8vIG51bGwgb3IgYXJyYXkgb2YgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICBlcnJvcnM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImVycm9yc1wiKSwgLy8gY291bnRlciBvZiB2YWxpZGF0aW9uIGVycm9yc1xuICAgIHRoaXM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInRoaXNcIiksXG4gICAgLy8gXCJnbG9iYWxzXCJcbiAgICBzZWxmOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJzZWxmXCIpLFxuICAgIHNjb3BlOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJzY29wZVwiKSxcbiAgICAvLyBKVEQgc2VyaWFsaXplL3BhcnNlIG5hbWUgZm9yIEpTT04gc3RyaW5nIGFuZCBwb3NpdGlvblxuICAgIGpzb246IG5ldyBjb2RlZ2VuXzEuTmFtZShcImpzb25cIiksXG4gICAganNvblBvczogbmV3IGNvZGVnZW5fMS5OYW1lKFwianNvblBvc1wiKSxcbiAgICBqc29uTGVuOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJqc29uTGVuXCIpLFxuICAgIGpzb25QYXJ0OiBuZXcgY29kZWdlbl8xLk5hbWUoXCJqc29uUGFydFwiKSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBuYW1lcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hbWVzLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4dGVuZEVycm9ycyA9IGV4cG9ydHMucmVzZXRFcnJvcnNDb3VudCA9IGV4cG9ydHMucmVwb3J0RXh0cmFFcnJvciA9IGV4cG9ydHMucmVwb3J0RXJyb3IgPSBleHBvcnRzLmtleXdvcmQkRGF0YUVycm9yID0gZXhwb3J0cy5rZXl3b3JkRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi9uYW1lc1wiKTtcbmV4cG9ydHMua2V5d29yZEVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IGtleXdvcmQgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IHBhc3MgXCIke2tleXdvcmR9XCIga2V5d29yZCB2YWxpZGF0aW9uYCxcbn07XG5leHBvcnRzLmtleXdvcmQkRGF0YUVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IGtleXdvcmQsIHNjaGVtYVR5cGUgfSkgPT4gc2NoZW1hVHlwZVxuICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuc3RyKSBgXCIke2tleXdvcmR9XCIga2V5d29yZCBtdXN0IGJlICR7c2NoZW1hVHlwZX0gKCRkYXRhKWBcbiAgICAgICAgOiAoMCwgY29kZWdlbl8xLnN0cikgYFwiJHtrZXl3b3JkfVwiIGtleXdvcmQgaXMgaW52YWxpZCAoJGRhdGEpYCxcbn07XG5mdW5jdGlvbiByZXBvcnRFcnJvcihjeHQsIGVycm9yID0gZXhwb3J0cy5rZXl3b3JkRXJyb3IsIGVycm9yUGF0aHMsIG92ZXJyaWRlQWxsRXJyb3JzKSB7XG4gICAgY29uc3QgeyBpdCB9ID0gY3h0O1xuICAgIGNvbnN0IHsgZ2VuLCBjb21wb3NpdGVSdWxlLCBhbGxFcnJvcnMgfSA9IGl0O1xuICAgIGNvbnN0IGVyck9iaiA9IGVycm9yT2JqZWN0Q29kZShjeHQsIGVycm9yLCBlcnJvclBhdGhzKTtcbiAgICBpZiAob3ZlcnJpZGVBbGxFcnJvcnMgIT09IG51bGwgJiYgb3ZlcnJpZGVBbGxFcnJvcnMgIT09IHZvaWQgMCA/IG92ZXJyaWRlQWxsRXJyb3JzIDogKGNvbXBvc2l0ZVJ1bGUgfHwgYWxsRXJyb3JzKSkge1xuICAgICAgICBhZGRFcnJvcihnZW4sIGVyck9iaik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm5FcnJvcnMoaXQsICgwLCBjb2RlZ2VuXzEuXykgYFske2Vyck9ian1dYCk7XG4gICAgfVxufVxuZXhwb3J0cy5yZXBvcnRFcnJvciA9IHJlcG9ydEVycm9yO1xuZnVuY3Rpb24gcmVwb3J0RXh0cmFFcnJvcihjeHQsIGVycm9yID0gZXhwb3J0cy5rZXl3b3JkRXJyb3IsIGVycm9yUGF0aHMpIHtcbiAgICBjb25zdCB7IGl0IH0gPSBjeHQ7XG4gICAgY29uc3QgeyBnZW4sIGNvbXBvc2l0ZVJ1bGUsIGFsbEVycm9ycyB9ID0gaXQ7XG4gICAgY29uc3QgZXJyT2JqID0gZXJyb3JPYmplY3RDb2RlKGN4dCwgZXJyb3IsIGVycm9yUGF0aHMpO1xuICAgIGFkZEVycm9yKGdlbiwgZXJyT2JqKTtcbiAgICBpZiAoIShjb21wb3NpdGVSdWxlIHx8IGFsbEVycm9ycykpIHtcbiAgICAgICAgcmV0dXJuRXJyb3JzKGl0LCBuYW1lc18xLmRlZmF1bHQudkVycm9ycyk7XG4gICAgfVxufVxuZXhwb3J0cy5yZXBvcnRFeHRyYUVycm9yID0gcmVwb3J0RXh0cmFFcnJvcjtcbmZ1bmN0aW9uIHJlc2V0RXJyb3JzQ291bnQoZ2VuLCBlcnJzQ291bnQpIHtcbiAgICBnZW4uYXNzaWduKG5hbWVzXzEuZGVmYXVsdC5lcnJvcnMsIGVycnNDb3VudCk7XG4gICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9ICE9PSBudWxsYCwgKCkgPT4gZ2VuLmlmKGVycnNDb3VudCwgKCkgPT4gZ2VuLmFzc2lnbigoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfS5sZW5ndGhgLCBlcnJzQ291bnQpLCAoKSA9PiBnZW4uYXNzaWduKG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCBudWxsKSkpO1xufVxuZXhwb3J0cy5yZXNldEVycm9yc0NvdW50ID0gcmVzZXRFcnJvcnNDb3VudDtcbmZ1bmN0aW9uIGV4dGVuZEVycm9ycyh7IGdlbiwga2V5d29yZCwgc2NoZW1hVmFsdWUsIGRhdGEsIGVycnNDb3VudCwgaXQsIH0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoZXJyc0NvdW50ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFqdiBpbXBsZW1lbnRhdGlvbiBlcnJvclwiKTtcbiAgICBjb25zdCBlcnIgPSBnZW4ubmFtZShcImVyclwiKTtcbiAgICBnZW4uZm9yUmFuZ2UoXCJpXCIsIGVycnNDb3VudCwgbmFtZXNfMS5kZWZhdWx0LmVycm9ycywgKGkpID0+IHtcbiAgICAgICAgZ2VuLmNvbnN0KGVyciwgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudkVycm9yc31bJHtpfV1gKTtcbiAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZXJyfS5pbnN0YW5jZVBhdGggPT09IHVuZGVmaW5lZGAsICgpID0+IGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtlcnJ9Lmluc3RhbmNlUGF0aGAsICgwLCBjb2RlZ2VuXzEuc3RyQ29uY2F0KShuYW1lc18xLmRlZmF1bHQuaW5zdGFuY2VQYXRoLCBpdC5lcnJvclBhdGgpKSk7XG4gICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtlcnJ9LnNjaGVtYVBhdGhgLCAoMCwgY29kZWdlbl8xLnN0cikgYCR7aXQuZXJyU2NoZW1hUGF0aH0vJHtrZXl3b3JkfWApO1xuICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZXJyfS5zY2hlbWFgLCBzY2hlbWFWYWx1ZSk7XG4gICAgICAgICAgICBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZXJyfS5kYXRhYCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZXh0ZW5kRXJyb3JzID0gZXh0ZW5kRXJyb3JzO1xuZnVuY3Rpb24gYWRkRXJyb3IoZ2VuLCBlcnJPYmopIHtcbiAgICBjb25zdCBlcnIgPSBnZW4uY29uc3QoXCJlcnJcIiwgZXJyT2JqKTtcbiAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudkVycm9yc30gPT09IG51bGxgLCAoKSA9PiBnZW4uYXNzaWduKG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCAoMCwgY29kZWdlbl8xLl8pIGBbJHtlcnJ9XWApLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfS5wdXNoKCR7ZXJyfSlgKTtcbiAgICBnZW4uY29kZSgoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC5lcnJvcnN9KytgKTtcbn1cbmZ1bmN0aW9uIHJldHVybkVycm9ycyhpdCwgZXJycykge1xuICAgIGNvbnN0IHsgZ2VuLCB2YWxpZGF0ZU5hbWUsIHNjaGVtYUVudiB9ID0gaXQ7XG4gICAgaWYgKHNjaGVtYUVudi4kYXN5bmMpIHtcbiAgICAgICAgZ2VuLnRocm93KCgwLCBjb2RlZ2VuXzEuXykgYG5ldyAke2l0LlZhbGlkYXRpb25FcnJvcn0oJHtlcnJzfSlgKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHt2YWxpZGF0ZU5hbWV9LmVycm9yc2AsIGVycnMpO1xuICAgICAgICBnZW4ucmV0dXJuKGZhbHNlKTtcbiAgICB9XG59XG5jb25zdCBFID0ge1xuICAgIGtleXdvcmQ6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImtleXdvcmRcIiksXG4gICAgc2NoZW1hUGF0aDogbmV3IGNvZGVnZW5fMS5OYW1lKFwic2NoZW1hUGF0aFwiKSwgLy8gYWxzbyB1c2VkIGluIEpURCBlcnJvcnNcbiAgICBwYXJhbXM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInBhcmFtc1wiKSxcbiAgICBwcm9wZXJ0eU5hbWU6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInByb3BlcnR5TmFtZVwiKSxcbiAgICBtZXNzYWdlOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJtZXNzYWdlXCIpLFxuICAgIHNjaGVtYTogbmV3IGNvZGVnZW5fMS5OYW1lKFwic2NoZW1hXCIpLFxuICAgIHBhcmVudFNjaGVtYTogbmV3IGNvZGVnZW5fMS5OYW1lKFwicGFyZW50U2NoZW1hXCIpLFxufTtcbmZ1bmN0aW9uIGVycm9yT2JqZWN0Q29kZShjeHQsIGVycm9yLCBlcnJvclBhdGhzKSB7XG4gICAgY29uc3QgeyBjcmVhdGVFcnJvcnMgfSA9IGN4dC5pdDtcbiAgICBpZiAoY3JlYXRlRXJyb3JzID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYHt9YDtcbiAgICByZXR1cm4gZXJyb3JPYmplY3QoY3h0LCBlcnJvciwgZXJyb3JQYXRocyk7XG59XG5mdW5jdGlvbiBlcnJvck9iamVjdChjeHQsIGVycm9yLCBlcnJvclBhdGhzID0ge30pIHtcbiAgICBjb25zdCB7IGdlbiwgaXQgfSA9IGN4dDtcbiAgICBjb25zdCBrZXlWYWx1ZXMgPSBbXG4gICAgICAgIGVycm9ySW5zdGFuY2VQYXRoKGl0LCBlcnJvclBhdGhzKSxcbiAgICAgICAgZXJyb3JTY2hlbWFQYXRoKGN4dCwgZXJyb3JQYXRocyksXG4gICAgXTtcbiAgICBleHRyYUVycm9yUHJvcHMoY3h0LCBlcnJvciwga2V5VmFsdWVzKTtcbiAgICByZXR1cm4gZ2VuLm9iamVjdCguLi5rZXlWYWx1ZXMpO1xufVxuZnVuY3Rpb24gZXJyb3JJbnN0YW5jZVBhdGgoeyBlcnJvclBhdGggfSwgeyBpbnN0YW5jZVBhdGggfSkge1xuICAgIGNvbnN0IGluc3RQYXRoID0gaW5zdGFuY2VQYXRoXG4gICAgICAgID8gKDAsIGNvZGVnZW5fMS5zdHIpIGAke2Vycm9yUGF0aH0keygwLCB1dGlsXzEuZ2V0RXJyb3JQYXRoKShpbnN0YW5jZVBhdGgsIHV0aWxfMS5UeXBlLlN0cil9YFxuICAgICAgICA6IGVycm9yUGF0aDtcbiAgICByZXR1cm4gW25hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGgsICgwLCBjb2RlZ2VuXzEuc3RyQ29uY2F0KShuYW1lc18xLmRlZmF1bHQuaW5zdGFuY2VQYXRoLCBpbnN0UGF0aCldO1xufVxuZnVuY3Rpb24gZXJyb3JTY2hlbWFQYXRoKHsga2V5d29yZCwgaXQ6IHsgZXJyU2NoZW1hUGF0aCB9IH0sIHsgc2NoZW1hUGF0aCwgcGFyZW50U2NoZW1hIH0pIHtcbiAgICBsZXQgc2NoUGF0aCA9IHBhcmVudFNjaGVtYSA/IGVyclNjaGVtYVBhdGggOiAoMCwgY29kZWdlbl8xLnN0cikgYCR7ZXJyU2NoZW1hUGF0aH0vJHtrZXl3b3JkfWA7XG4gICAgaWYgKHNjaGVtYVBhdGgpIHtcbiAgICAgICAgc2NoUGF0aCA9ICgwLCBjb2RlZ2VuXzEuc3RyKSBgJHtzY2hQYXRofSR7KDAsIHV0aWxfMS5nZXRFcnJvclBhdGgpKHNjaGVtYVBhdGgsIHV0aWxfMS5UeXBlLlN0cil9YDtcbiAgICB9XG4gICAgcmV0dXJuIFtFLnNjaGVtYVBhdGgsIHNjaFBhdGhdO1xufVxuZnVuY3Rpb24gZXh0cmFFcnJvclByb3BzKGN4dCwgeyBwYXJhbXMsIG1lc3NhZ2UgfSwga2V5VmFsdWVzKSB7XG4gICAgY29uc3QgeyBrZXl3b3JkLCBkYXRhLCBzY2hlbWFWYWx1ZSwgaXQgfSA9IGN4dDtcbiAgICBjb25zdCB7IG9wdHMsIHByb3BlcnR5TmFtZSwgdG9wU2NoZW1hUmVmLCBzY2hlbWFQYXRoIH0gPSBpdDtcbiAgICBrZXlWYWx1ZXMucHVzaChbRS5rZXl3b3JkLCBrZXl3b3JkXSwgW0UucGFyYW1zLCB0eXBlb2YgcGFyYW1zID09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyhjeHQpIDogcGFyYW1zIHx8ICgwLCBjb2RlZ2VuXzEuXykgYHt9YF0pO1xuICAgIGlmIChvcHRzLm1lc3NhZ2VzKSB7XG4gICAgICAgIGtleVZhbHVlcy5wdXNoKFtFLm1lc3NhZ2UsIHR5cGVvZiBtZXNzYWdlID09IFwiZnVuY3Rpb25cIiA/IG1lc3NhZ2UoY3h0KSA6IG1lc3NhZ2VdKTtcbiAgICB9XG4gICAgaWYgKG9wdHMudmVyYm9zZSkge1xuICAgICAgICBrZXlWYWx1ZXMucHVzaChbRS5zY2hlbWEsIHNjaGVtYVZhbHVlXSwgW0UucGFyZW50U2NoZW1hLCAoMCwgY29kZWdlbl8xLl8pIGAke3RvcFNjaGVtYVJlZn0ke3NjaGVtYVBhdGh9YF0sIFtuYW1lc18xLmRlZmF1bHQuZGF0YSwgZGF0YV0pO1xuICAgIH1cbiAgICBpZiAocHJvcGVydHlOYW1lKVxuICAgICAgICBrZXlWYWx1ZXMucHVzaChbRS5wcm9wZXJ0eU5hbWUsIHByb3BlcnR5TmFtZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJvb2xPckVtcHR5U2NoZW1hID0gZXhwb3J0cy50b3BCb29sT3JFbXB0eVNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi9jb2RlZ2VuXCIpO1xuY29uc3QgbmFtZXNfMSA9IHJlcXVpcmUoXCIuLi9uYW1lc1wiKTtcbmNvbnN0IGJvb2xFcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcImJvb2xlYW4gc2NoZW1hIGlzIGZhbHNlXCIsXG59O1xuZnVuY3Rpb24gdG9wQm9vbE9yRW1wdHlTY2hlbWEoaXQpIHtcbiAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCB2YWxpZGF0ZU5hbWUgfSA9IGl0O1xuICAgIGlmIChzY2hlbWEgPT09IGZhbHNlKSB7XG4gICAgICAgIGZhbHNlU2NoZW1hRXJyb3IoaXQsIGZhbHNlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHNjaGVtYSA9PSBcIm9iamVjdFwiICYmIHNjaGVtYS4kYXN5bmMgPT09IHRydWUpIHtcbiAgICAgICAgZ2VuLnJldHVybihuYW1lc18xLmRlZmF1bHQuZGF0YSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7dmFsaWRhdGVOYW1lfS5lcnJvcnNgLCBudWxsKTtcbiAgICAgICAgZ2VuLnJldHVybih0cnVlKTtcbiAgICB9XG59XG5leHBvcnRzLnRvcEJvb2xPckVtcHR5U2NoZW1hID0gdG9wQm9vbE9yRW1wdHlTY2hlbWE7XG5mdW5jdGlvbiBib29sT3JFbXB0eVNjaGVtYShpdCwgdmFsaWQpIHtcbiAgICBjb25zdCB7IGdlbiwgc2NoZW1hIH0gPSBpdDtcbiAgICBpZiAoc2NoZW1hID09PSBmYWxzZSkge1xuICAgICAgICBnZW4udmFyKHZhbGlkLCBmYWxzZSk7IC8vIFRPRE8gdmFyXG4gICAgICAgIGZhbHNlU2NoZW1hRXJyb3IoaXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2VuLnZhcih2YWxpZCwgdHJ1ZSk7IC8vIFRPRE8gdmFyXG4gICAgfVxufVxuZXhwb3J0cy5ib29sT3JFbXB0eVNjaGVtYSA9IGJvb2xPckVtcHR5U2NoZW1hO1xuZnVuY3Rpb24gZmFsc2VTY2hlbWFFcnJvcihpdCwgb3ZlcnJpZGVBbGxFcnJvcnMpIHtcbiAgICBjb25zdCB7IGdlbiwgZGF0YSB9ID0gaXQ7XG4gICAgLy8gVE9ETyBtYXliZSBzb21lIG90aGVyIGludGVyZmFjZSBzaG91bGQgYmUgdXNlZCBmb3Igbm9uLWtleXdvcmQgdmFsaWRhdGlvbiBlcnJvcnMuLi5cbiAgICBjb25zdCBjeHQgPSB7XG4gICAgICAgIGdlbixcbiAgICAgICAga2V5d29yZDogXCJmYWxzZSBzY2hlbWFcIixcbiAgICAgICAgZGF0YSxcbiAgICAgICAgc2NoZW1hOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hQ29kZTogZmFsc2UsXG4gICAgICAgIHNjaGVtYVZhbHVlOiBmYWxzZSxcbiAgICAgICAgcGFyYW1zOiB7fSxcbiAgICAgICAgaXQsXG4gICAgfTtcbiAgICAoMCwgZXJyb3JzXzEucmVwb3J0RXJyb3IpKGN4dCwgYm9vbEVycm9yLCB1bmRlZmluZWQsIG92ZXJyaWRlQWxsRXJyb3JzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb2xTY2hlbWEuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UnVsZXMgPSBleHBvcnRzLmlzSlNPTlR5cGUgPSB2b2lkIDA7XG5jb25zdCBfanNvblR5cGVzID0gW1wic3RyaW5nXCIsIFwibnVtYmVyXCIsIFwiaW50ZWdlclwiLCBcImJvb2xlYW5cIiwgXCJudWxsXCIsIFwib2JqZWN0XCIsIFwiYXJyYXlcIl07XG5jb25zdCBqc29uVHlwZXMgPSBuZXcgU2V0KF9qc29uVHlwZXMpO1xuZnVuY3Rpb24gaXNKU09OVHlwZSh4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09IFwic3RyaW5nXCIgJiYganNvblR5cGVzLmhhcyh4KTtcbn1cbmV4cG9ydHMuaXNKU09OVHlwZSA9IGlzSlNPTlR5cGU7XG5mdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICBjb25zdCBncm91cHMgPSB7XG4gICAgICAgIG51bWJlcjogeyB0eXBlOiBcIm51bWJlclwiLCBydWxlczogW10gfSxcbiAgICAgICAgc3RyaW5nOiB7IHR5cGU6IFwic3RyaW5nXCIsIHJ1bGVzOiBbXSB9LFxuICAgICAgICBhcnJheTogeyB0eXBlOiBcImFycmF5XCIsIHJ1bGVzOiBbXSB9LFxuICAgICAgICBvYmplY3Q6IHsgdHlwZTogXCJvYmplY3RcIiwgcnVsZXM6IFtdIH0sXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlczogeyAuLi5ncm91cHMsIGludGVnZXI6IHRydWUsIGJvb2xlYW46IHRydWUsIG51bGw6IHRydWUgfSxcbiAgICAgICAgcnVsZXM6IFt7IHJ1bGVzOiBbXSB9LCBncm91cHMubnVtYmVyLCBncm91cHMuc3RyaW5nLCBncm91cHMuYXJyYXksIGdyb3Vwcy5vYmplY3RdLFxuICAgICAgICBwb3N0OiB7IHJ1bGVzOiBbXSB9LFxuICAgICAgICBhbGw6IHt9LFxuICAgICAgICBrZXl3b3Jkczoge30sXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0UnVsZXMgPSBnZXRSdWxlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bGVzLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNob3VsZFVzZVJ1bGUgPSBleHBvcnRzLnNob3VsZFVzZUdyb3VwID0gZXhwb3J0cy5zY2hlbWFIYXNSdWxlc0ZvclR5cGUgPSB2b2lkIDA7XG5mdW5jdGlvbiBzY2hlbWFIYXNSdWxlc0ZvclR5cGUoeyBzY2hlbWEsIHNlbGYgfSwgdHlwZSkge1xuICAgIGNvbnN0IGdyb3VwID0gc2VsZi5SVUxFUy50eXBlc1t0eXBlXTtcbiAgICByZXR1cm4gZ3JvdXAgJiYgZ3JvdXAgIT09IHRydWUgJiYgc2hvdWxkVXNlR3JvdXAoc2NoZW1hLCBncm91cCk7XG59XG5leHBvcnRzLnNjaGVtYUhhc1J1bGVzRm9yVHlwZSA9IHNjaGVtYUhhc1J1bGVzRm9yVHlwZTtcbmZ1bmN0aW9uIHNob3VsZFVzZUdyb3VwKHNjaGVtYSwgZ3JvdXApIHtcbiAgICByZXR1cm4gZ3JvdXAucnVsZXMuc29tZSgocnVsZSkgPT4gc2hvdWxkVXNlUnVsZShzY2hlbWEsIHJ1bGUpKTtcbn1cbmV4cG9ydHMuc2hvdWxkVXNlR3JvdXAgPSBzaG91bGRVc2VHcm91cDtcbmZ1bmN0aW9uIHNob3VsZFVzZVJ1bGUoc2NoZW1hLCBydWxlKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoc2NoZW1hW3J1bGUua2V5d29yZF0gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAoKF9hID0gcnVsZS5kZWZpbml0aW9uLmltcGxlbWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zb21lKChrd2QpID0+IHNjaGVtYVtrd2RdICE9PSB1bmRlZmluZWQpKSk7XG59XG5leHBvcnRzLnNob3VsZFVzZVJ1bGUgPSBzaG91bGRVc2VSdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbGljYWJpbGl0eS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXBvcnRUeXBlRXJyb3IgPSBleHBvcnRzLmNoZWNrRGF0YVR5cGVzID0gZXhwb3J0cy5jaGVja0RhdGFUeXBlID0gZXhwb3J0cy5jb2VyY2VBbmRDaGVja0RhdGFUeXBlID0gZXhwb3J0cy5nZXRKU09OVHlwZXMgPSBleHBvcnRzLmdldFNjaGVtYVR5cGVzID0gZXhwb3J0cy5EYXRhVHlwZSA9IHZvaWQgMDtcbmNvbnN0IHJ1bGVzXzEgPSByZXF1aXJlKFwiLi4vcnVsZXNcIik7XG5jb25zdCBhcHBsaWNhYmlsaXR5XzEgPSByZXF1aXJlKFwiLi9hcHBsaWNhYmlsaXR5XCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbnZhciBEYXRhVHlwZTtcbihmdW5jdGlvbiAoRGF0YVR5cGUpIHtcbiAgICBEYXRhVHlwZVtEYXRhVHlwZVtcIkNvcnJlY3RcIl0gPSAwXSA9IFwiQ29ycmVjdFwiO1xuICAgIERhdGFUeXBlW0RhdGFUeXBlW1wiV3JvbmdcIl0gPSAxXSA9IFwiV3JvbmdcIjtcbn0pKERhdGFUeXBlIHx8IChleHBvcnRzLkRhdGFUeXBlID0gRGF0YVR5cGUgPSB7fSkpO1xuZnVuY3Rpb24gZ2V0U2NoZW1hVHlwZXMoc2NoZW1hKSB7XG4gICAgY29uc3QgdHlwZXMgPSBnZXRKU09OVHlwZXMoc2NoZW1hLnR5cGUpO1xuICAgIGNvbnN0IGhhc051bGwgPSB0eXBlcy5pbmNsdWRlcyhcIm51bGxcIik7XG4gICAgaWYgKGhhc051bGwpIHtcbiAgICAgICAgaWYgKHNjaGVtYS5udWxsYWJsZSA9PT0gZmFsc2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0eXBlOiBudWxsIGNvbnRyYWRpY3RzIG51bGxhYmxlOiBmYWxzZVwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghdHlwZXMubGVuZ3RoICYmIHNjaGVtYS5udWxsYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wibnVsbGFibGVcIiBjYW5ub3QgYmUgdXNlZCB3aXRob3V0IFwidHlwZVwiJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVtYS5udWxsYWJsZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHR5cGVzLnB1c2goXCJudWxsXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZXM7XG59XG5leHBvcnRzLmdldFNjaGVtYVR5cGVzID0gZ2V0U2NoZW1hVHlwZXM7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZHVuZGFudC10eXBlLWNvbnN0aXR1ZW50c1xuZnVuY3Rpb24gZ2V0SlNPTlR5cGVzKHRzKSB7XG4gICAgY29uc3QgdHlwZXMgPSBBcnJheS5pc0FycmF5KHRzKSA/IHRzIDogdHMgPyBbdHNdIDogW107XG4gICAgaWYgKHR5cGVzLmV2ZXJ5KHJ1bGVzXzEuaXNKU09OVHlwZSkpXG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0eXBlIG11c3QgYmUgSlNPTlR5cGUgb3IgSlNPTlR5cGVbXTogXCIgKyB0eXBlcy5qb2luKFwiLFwiKSk7XG59XG5leHBvcnRzLmdldEpTT05UeXBlcyA9IGdldEpTT05UeXBlcztcbmZ1bmN0aW9uIGNvZXJjZUFuZENoZWNrRGF0YVR5cGUoaXQsIHR5cGVzKSB7XG4gICAgY29uc3QgeyBnZW4sIGRhdGEsIG9wdHMgfSA9IGl0O1xuICAgIGNvbnN0IGNvZXJjZVRvID0gY29lcmNlVG9UeXBlcyh0eXBlcywgb3B0cy5jb2VyY2VUeXBlcyk7XG4gICAgY29uc3QgY2hlY2tUeXBlcyA9IHR5cGVzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgIShjb2VyY2VUby5sZW5ndGggPT09IDAgJiYgdHlwZXMubGVuZ3RoID09PSAxICYmICgwLCBhcHBsaWNhYmlsaXR5XzEuc2NoZW1hSGFzUnVsZXNGb3JUeXBlKShpdCwgdHlwZXNbMF0pKTtcbiAgICBpZiAoY2hlY2tUeXBlcykge1xuICAgICAgICBjb25zdCB3cm9uZ1R5cGUgPSBjaGVja0RhdGFUeXBlcyh0eXBlcywgZGF0YSwgb3B0cy5zdHJpY3ROdW1iZXJzLCBEYXRhVHlwZS5Xcm9uZyk7XG4gICAgICAgIGdlbi5pZih3cm9uZ1R5cGUsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjb2VyY2VUby5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY29lcmNlRGF0YShpdCwgdHlwZXMsIGNvZXJjZVRvKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXBvcnRUeXBlRXJyb3IoaXQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrVHlwZXM7XG59XG5leHBvcnRzLmNvZXJjZUFuZENoZWNrRGF0YVR5cGUgPSBjb2VyY2VBbmRDaGVja0RhdGFUeXBlO1xuY29uc3QgQ09FUkNJQkxFID0gbmV3IFNldChbXCJzdHJpbmdcIiwgXCJudW1iZXJcIiwgXCJpbnRlZ2VyXCIsIFwiYm9vbGVhblwiLCBcIm51bGxcIl0pO1xuZnVuY3Rpb24gY29lcmNlVG9UeXBlcyh0eXBlcywgY29lcmNlVHlwZXMpIHtcbiAgICByZXR1cm4gY29lcmNlVHlwZXNcbiAgICAgICAgPyB0eXBlcy5maWx0ZXIoKHQpID0+IENPRVJDSUJMRS5oYXModCkgfHwgKGNvZXJjZVR5cGVzID09PSBcImFycmF5XCIgJiYgdCA9PT0gXCJhcnJheVwiKSlcbiAgICAgICAgOiBbXTtcbn1cbmZ1bmN0aW9uIGNvZXJjZURhdGEoaXQsIHR5cGVzLCBjb2VyY2VUbykge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBvcHRzIH0gPSBpdDtcbiAgICBjb25zdCBkYXRhVHlwZSA9IGdlbi5sZXQoXCJkYXRhVHlwZVwiLCAoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtkYXRhfWApO1xuICAgIGNvbnN0IGNvZXJjZWQgPSBnZW4ubGV0KFwiY29lcmNlZFwiLCAoMCwgY29kZWdlbl8xLl8pIGB1bmRlZmluZWRgKTtcbiAgICBpZiAob3B0cy5jb2VyY2VUeXBlcyA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGFUeXBlfSA9PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KCR7ZGF0YX0pICYmICR7ZGF0YX0ubGVuZ3RoID09IDFgLCAoKSA9PiBnZW5cbiAgICAgICAgICAgIC5hc3NpZ24oZGF0YSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfVswXWApXG4gICAgICAgICAgICAuYXNzaWduKGRhdGFUeXBlLCAoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtkYXRhfWApXG4gICAgICAgICAgICAuaWYoY2hlY2tEYXRhVHlwZXModHlwZXMsIGRhdGEsIG9wdHMuc3RyaWN0TnVtYmVycyksICgpID0+IGdlbi5hc3NpZ24oY29lcmNlZCwgZGF0YSkpKTtcbiAgICB9XG4gICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Y29lcmNlZH0gIT09IHVuZGVmaW5lZGApO1xuICAgIGZvciAoY29uc3QgdCBvZiBjb2VyY2VUbykge1xuICAgICAgICBpZiAoQ09FUkNJQkxFLmhhcyh0KSB8fCAodCA9PT0gXCJhcnJheVwiICYmIG9wdHMuY29lcmNlVHlwZXMgPT09IFwiYXJyYXlcIikpIHtcbiAgICAgICAgICAgIGNvZXJjZVNwZWNpZmljVHlwZSh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZW4uZWxzZSgpO1xuICAgIHJlcG9ydFR5cGVFcnJvcihpdCk7XG4gICAgZ2VuLmVuZElmKCk7XG4gICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Y29lcmNlZH0gIT09IHVuZGVmaW5lZGAsICgpID0+IHtcbiAgICAgICAgZ2VuLmFzc2lnbihkYXRhLCBjb2VyY2VkKTtcbiAgICAgICAgYXNzaWduUGFyZW50RGF0YShpdCwgY29lcmNlZCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY29lcmNlU3BlY2lmaWNUeXBlKHQpIHtcbiAgICAgICAgc3dpdGNoICh0KSB7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgIC5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhVHlwZX0gPT0gXCJudW1iZXJcIiB8fCAke2RhdGFUeXBlfSA9PSBcImJvb2xlYW5cImApXG4gICAgICAgICAgICAgICAgICAgIC5hc3NpZ24oY29lcmNlZCwgKDAsIGNvZGVnZW5fMS5fKSBgXCJcIiArICR7ZGF0YX1gKVxuICAgICAgICAgICAgICAgICAgICAuZWxzZUlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0gPT09IG51bGxgKVxuICAgICAgICAgICAgICAgICAgICAuYXNzaWduKGNvZXJjZWQsICgwLCBjb2RlZ2VuXzEuXykgYFwiXCJgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgIC5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhVHlwZX0gPT0gXCJib29sZWFuXCIgfHwgJHtkYXRhfSA9PT0gbnVsbFxuICAgICAgICAgICAgICB8fCAoJHtkYXRhVHlwZX0gPT0gXCJzdHJpbmdcIiAmJiAke2RhdGF9ICYmICR7ZGF0YX0gPT0gKyR7ZGF0YX0pYClcbiAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihjb2VyY2VkLCAoMCwgY29kZWdlbl8xLl8pIGArJHtkYXRhfWApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgXCJpbnRlZ2VyXCI6XG4gICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgIC5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhVHlwZX0gPT09IFwiYm9vbGVhblwiIHx8ICR7ZGF0YX0gPT09IG51bGxcbiAgICAgICAgICAgICAgfHwgKCR7ZGF0YVR5cGV9ID09PSBcInN0cmluZ1wiICYmICR7ZGF0YX0gJiYgJHtkYXRhfSA9PSArJHtkYXRhfSAmJiAhKCR7ZGF0YX0gJSAxKSlgKVxuICAgICAgICAgICAgICAgICAgICAuYXNzaWduKGNvZXJjZWQsICgwLCBjb2RlZ2VuXzEuXykgYCske2RhdGF9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAgICAgLmVsc2VJZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9ID09PSBcImZhbHNlXCIgfHwgJHtkYXRhfSA9PT0gMCB8fCAke2RhdGF9ID09PSBudWxsYClcbiAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihjb2VyY2VkLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLmVsc2VJZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9ID09PSBcInRydWVcIiB8fCAke2RhdGF9ID09PSAxYClcbiAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihjb2VyY2VkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwibnVsbFwiOlxuICAgICAgICAgICAgICAgIGdlbi5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSA9PT0gXCJcIiB8fCAke2RhdGF9ID09PSAwIHx8ICR7ZGF0YX0gPT09IGZhbHNlYCk7XG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbihjb2VyY2VkLCBudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAgICAgLmVsc2VJZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGFUeXBlfSA9PT0gXCJzdHJpbmdcIiB8fCAke2RhdGFUeXBlfSA9PT0gXCJudW1iZXJcIlxuICAgICAgICAgICAgICB8fCAke2RhdGFUeXBlfSA9PT0gXCJib29sZWFuXCIgfHwgJHtkYXRhfSA9PT0gbnVsbGApXG4gICAgICAgICAgICAgICAgICAgIC5hc3NpZ24oY29lcmNlZCwgKDAsIGNvZGVnZW5fMS5fKSBgWyR7ZGF0YX1dYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhc3NpZ25QYXJlbnREYXRhKHsgZ2VuLCBwYXJlbnREYXRhLCBwYXJlbnREYXRhUHJvcGVydHkgfSwgZXhwcikge1xuICAgIC8vIFRPRE8gdXNlIGdlbi5wcm9wZXJ0eVxuICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke3BhcmVudERhdGF9ICE9PSB1bmRlZmluZWRgLCAoKSA9PiBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7cGFyZW50RGF0YX1bJHtwYXJlbnREYXRhUHJvcGVydHl9XWAsIGV4cHIpKTtcbn1cbmZ1bmN0aW9uIGNoZWNrRGF0YVR5cGUoZGF0YVR5cGUsIGRhdGEsIHN0cmljdE51bXMsIGNvcnJlY3QgPSBEYXRhVHlwZS5Db3JyZWN0KSB7XG4gICAgY29uc3QgRVEgPSBjb3JyZWN0ID09PSBEYXRhVHlwZS5Db3JyZWN0ID8gY29kZWdlbl8xLm9wZXJhdG9ycy5FUSA6IGNvZGVnZW5fMS5vcGVyYXRvcnMuTkVRO1xuICAgIGxldCBjb25kO1xuICAgIHN3aXRjaCAoZGF0YVR5cGUpIHtcbiAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9ICR7RVF9IG51bGxgO1xuICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgIGNvbmQgPSAoMCwgY29kZWdlbl8xLl8pIGBBcnJheS5pc0FycmF5KCR7ZGF0YX0pYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBjb25kID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSAmJiB0eXBlb2YgJHtkYXRhfSA9PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KCR7ZGF0YX0pYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiaW50ZWdlclwiOlxuICAgICAgICAgICAgY29uZCA9IG51bUNvbmQoKDAsIGNvZGVnZW5fMS5fKSBgISgke2RhdGF9ICUgMSkgJiYgIWlzTmFOKCR7ZGF0YX0pYCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgY29uZCA9IG51bUNvbmQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYHR5cGVvZiAke2RhdGF9ICR7RVF9ICR7ZGF0YVR5cGV9YDtcbiAgICB9XG4gICAgcmV0dXJuIGNvcnJlY3QgPT09IERhdGFUeXBlLkNvcnJlY3QgPyBjb25kIDogKDAsIGNvZGVnZW5fMS5ub3QpKGNvbmQpO1xuICAgIGZ1bmN0aW9uIG51bUNvbmQoX2NvbmQgPSBjb2RlZ2VuXzEubmlsKSB7XG4gICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLmFuZCkoKDAsIGNvZGVnZW5fMS5fKSBgdHlwZW9mICR7ZGF0YX0gPT0gXCJudW1iZXJcImAsIF9jb25kLCBzdHJpY3ROdW1zID8gKDAsIGNvZGVnZW5fMS5fKSBgaXNGaW5pdGUoJHtkYXRhfSlgIDogY29kZWdlbl8xLm5pbCk7XG4gICAgfVxufVxuZXhwb3J0cy5jaGVja0RhdGFUeXBlID0gY2hlY2tEYXRhVHlwZTtcbmZ1bmN0aW9uIGNoZWNrRGF0YVR5cGVzKGRhdGFUeXBlcywgZGF0YSwgc3RyaWN0TnVtcywgY29ycmVjdCkge1xuICAgIGlmIChkYXRhVHlwZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBjaGVja0RhdGFUeXBlKGRhdGFUeXBlc1swXSwgZGF0YSwgc3RyaWN0TnVtcywgY29ycmVjdCk7XG4gICAgfVxuICAgIGxldCBjb25kO1xuICAgIGNvbnN0IHR5cGVzID0gKDAsIHV0aWxfMS50b0hhc2gpKGRhdGFUeXBlcyk7XG4gICAgaWYgKHR5cGVzLmFycmF5ICYmIHR5cGVzLm9iamVjdCkge1xuICAgICAgICBjb25zdCBub3RPYmogPSAoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtkYXRhfSAhPSBcIm9iamVjdFwiYDtcbiAgICAgICAgY29uZCA9IHR5cGVzLm51bGwgPyBub3RPYmogOiAoMCwgY29kZWdlbl8xLl8pIGAhJHtkYXRhfSB8fCAke25vdE9ian1gO1xuICAgICAgICBkZWxldGUgdHlwZXMubnVsbDtcbiAgICAgICAgZGVsZXRlIHR5cGVzLmFycmF5O1xuICAgICAgICBkZWxldGUgdHlwZXMub2JqZWN0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uZCA9IGNvZGVnZW5fMS5uaWw7XG4gICAgfVxuICAgIGlmICh0eXBlcy5udW1iZXIpXG4gICAgICAgIGRlbGV0ZSB0eXBlcy5pbnRlZ2VyO1xuICAgIGZvciAoY29uc3QgdCBpbiB0eXBlcylcbiAgICAgICAgY29uZCA9ICgwLCBjb2RlZ2VuXzEuYW5kKShjb25kLCBjaGVja0RhdGFUeXBlKHQsIGRhdGEsIHN0cmljdE51bXMsIGNvcnJlY3QpKTtcbiAgICByZXR1cm4gY29uZDtcbn1cbmV4cG9ydHMuY2hlY2tEYXRhVHlwZXMgPSBjaGVja0RhdGFUeXBlcztcbmNvbnN0IHR5cGVFcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBzY2hlbWEgfSkgPT4gYG11c3QgYmUgJHtzY2hlbWF9YCxcbiAgICBwYXJhbXM6ICh7IHNjaGVtYSwgc2NoZW1hVmFsdWUgfSkgPT4gdHlwZW9mIHNjaGVtYSA9PSBcInN0cmluZ1wiID8gKDAsIGNvZGVnZW5fMS5fKSBge3R5cGU6ICR7c2NoZW1hfX1gIDogKDAsIGNvZGVnZW5fMS5fKSBge3R5cGU6ICR7c2NoZW1hVmFsdWV9fWAsXG59O1xuZnVuY3Rpb24gcmVwb3J0VHlwZUVycm9yKGl0KSB7XG4gICAgY29uc3QgY3h0ID0gZ2V0VHlwZUVycm9yQ29udGV4dChpdCk7XG4gICAgKDAsIGVycm9yc18xLnJlcG9ydEVycm9yKShjeHQsIHR5cGVFcnJvcik7XG59XG5leHBvcnRzLnJlcG9ydFR5cGVFcnJvciA9IHJlcG9ydFR5cGVFcnJvcjtcbmZ1bmN0aW9uIGdldFR5cGVFcnJvckNvbnRleHQoaXQpIHtcbiAgICBjb25zdCB7IGdlbiwgZGF0YSwgc2NoZW1hIH0gPSBpdDtcbiAgICBjb25zdCBzY2hlbWFDb2RlID0gKDAsIHV0aWxfMS5zY2hlbWFSZWZPclZhbCkoaXQsIHNjaGVtYSwgXCJ0eXBlXCIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGdlbixcbiAgICAgICAga2V5d29yZDogXCJ0eXBlXCIsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHNjaGVtYTogc2NoZW1hLnR5cGUsXG4gICAgICAgIHNjaGVtYUNvZGUsXG4gICAgICAgIHNjaGVtYVZhbHVlOiBzY2hlbWFDb2RlLFxuICAgICAgICBwYXJlbnRTY2hlbWE6IHNjaGVtYSxcbiAgICAgICAgcGFyYW1zOiB7fSxcbiAgICAgICAgaXQsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGFUeXBlLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzc2lnbkRlZmF1bHRzID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbmZ1bmN0aW9uIGFzc2lnbkRlZmF1bHRzKGl0LCB0eSkge1xuICAgIGNvbnN0IHsgcHJvcGVydGllcywgaXRlbXMgfSA9IGl0LnNjaGVtYTtcbiAgICBpZiAodHkgPT09IFwib2JqZWN0XCIgJiYgcHJvcGVydGllcykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBhc3NpZ25EZWZhdWx0KGl0LCBrZXksIHByb3BlcnRpZXNba2V5XS5kZWZhdWx0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eSA9PT0gXCJhcnJheVwiICYmIEFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgICAgIGl0ZW1zLmZvckVhY2goKHNjaCwgaSkgPT4gYXNzaWduRGVmYXVsdChpdCwgaSwgc2NoLmRlZmF1bHQpKTtcbiAgICB9XG59XG5leHBvcnRzLmFzc2lnbkRlZmF1bHRzID0gYXNzaWduRGVmYXVsdHM7XG5mdW5jdGlvbiBhc3NpZ25EZWZhdWx0KGl0LCBwcm9wLCBkZWZhdWx0VmFsdWUpIHtcbiAgICBjb25zdCB7IGdlbiwgY29tcG9zaXRlUnVsZSwgZGF0YSwgb3B0cyB9ID0gaXQ7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgY2hpbGREYXRhID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkocHJvcCl9YDtcbiAgICBpZiAoY29tcG9zaXRlUnVsZSkge1xuICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIGBkZWZhdWx0IGlzIGlnbm9yZWQgZm9yOiAke2NoaWxkRGF0YX1gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgY29uZGl0aW9uID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtjaGlsZERhdGF9ID09PSB1bmRlZmluZWRgO1xuICAgIGlmIChvcHRzLnVzZURlZmF1bHRzID09PSBcImVtcHR5XCIpIHtcbiAgICAgICAgY29uZGl0aW9uID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtjb25kaXRpb259IHx8ICR7Y2hpbGREYXRhfSA9PT0gbnVsbCB8fCAke2NoaWxkRGF0YX0gPT09IFwiXCJgO1xuICAgIH1cbiAgICAvLyBgJHtjaGlsZERhdGF9ID09PSB1bmRlZmluZWRgICtcbiAgICAvLyAob3B0cy51c2VEZWZhdWx0cyA9PT0gXCJlbXB0eVwiID8gYCB8fCAke2NoaWxkRGF0YX0gPT09IG51bGwgfHwgJHtjaGlsZERhdGF9ID09PSBcIlwiYCA6IFwiXCIpXG4gICAgZ2VuLmlmKGNvbmRpdGlvbiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtjaGlsZERhdGF9ID0gJHsoMCwgY29kZWdlbl8xLnN0cmluZ2lmeSkoZGVmYXVsdFZhbHVlKX1gKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRzLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlVW5pb24gPSBleHBvcnRzLnZhbGlkYXRlQXJyYXkgPSBleHBvcnRzLnVzZVBhdHRlcm4gPSBleHBvcnRzLmNhbGxWYWxpZGF0ZUNvZGUgPSBleHBvcnRzLnNjaGVtYVByb3BlcnRpZXMgPSBleHBvcnRzLmFsbFNjaGVtYVByb3BlcnRpZXMgPSBleHBvcnRzLm5vUHJvcGVydHlJbkRhdGEgPSBleHBvcnRzLnByb3BlcnR5SW5EYXRhID0gZXhwb3J0cy5pc093blByb3BlcnR5ID0gZXhwb3J0cy5oYXNQcm9wRnVuYyA9IGV4cG9ydHMucmVwb3J0TWlzc2luZ1Byb3AgPSBleHBvcnRzLmNoZWNrTWlzc2luZ1Byb3AgPSBleHBvcnRzLmNoZWNrUmVwb3J0TWlzc2luZ1Byb3AgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi4vY29tcGlsZS9uYW1lc1wiKTtcbmNvbnN0IHV0aWxfMiA9IHJlcXVpcmUoXCIuLi9jb21waWxlL3V0aWxcIik7XG5mdW5jdGlvbiBjaGVja1JlcG9ydE1pc3NpbmdQcm9wKGN4dCwgcHJvcCkge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBpdCB9ID0gY3h0O1xuICAgIGdlbi5pZihub1Byb3BlcnR5SW5EYXRhKGdlbiwgZGF0YSwgcHJvcCwgaXQub3B0cy5vd25Qcm9wZXJ0aWVzKSwgKCkgPT4ge1xuICAgICAgICBjeHQuc2V0UGFyYW1zKHsgbWlzc2luZ1Byb3BlcnR5OiAoMCwgY29kZWdlbl8xLl8pIGAke3Byb3B9YCB9LCB0cnVlKTtcbiAgICAgICAgY3h0LmVycm9yKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmNoZWNrUmVwb3J0TWlzc2luZ1Byb3AgPSBjaGVja1JlcG9ydE1pc3NpbmdQcm9wO1xuZnVuY3Rpb24gY2hlY2tNaXNzaW5nUHJvcCh7IGdlbiwgZGF0YSwgaXQ6IHsgb3B0cyB9IH0sIHByb3BlcnRpZXMsIG1pc3NpbmcpIHtcbiAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5vcikoLi4ucHJvcGVydGllcy5tYXAoKHByb3ApID0+ICgwLCBjb2RlZ2VuXzEuYW5kKShub1Byb3BlcnR5SW5EYXRhKGdlbiwgZGF0YSwgcHJvcCwgb3B0cy5vd25Qcm9wZXJ0aWVzKSwgKDAsIGNvZGVnZW5fMS5fKSBgJHttaXNzaW5nfSA9ICR7cHJvcH1gKSkpO1xufVxuZXhwb3J0cy5jaGVja01pc3NpbmdQcm9wID0gY2hlY2tNaXNzaW5nUHJvcDtcbmZ1bmN0aW9uIHJlcG9ydE1pc3NpbmdQcm9wKGN4dCwgbWlzc2luZykge1xuICAgIGN4dC5zZXRQYXJhbXMoeyBtaXNzaW5nUHJvcGVydHk6IG1pc3NpbmcgfSwgdHJ1ZSk7XG4gICAgY3h0LmVycm9yKCk7XG59XG5leHBvcnRzLnJlcG9ydE1pc3NpbmdQcm9wID0gcmVwb3J0TWlzc2luZ1Byb3A7XG5mdW5jdGlvbiBoYXNQcm9wRnVuYyhnZW4pIHtcbiAgICByZXR1cm4gZ2VuLnNjb3BlVmFsdWUoXCJmdW5jXCIsIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICByZWY6IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gICAgICAgIGNvZGU6ICgwLCBjb2RlZ2VuXzEuXykgYE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlgLFxuICAgIH0pO1xufVxuZXhwb3J0cy5oYXNQcm9wRnVuYyA9IGhhc1Byb3BGdW5jO1xuZnVuY3Rpb24gaXNPd25Qcm9wZXJ0eShnZW4sIGRhdGEsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7aGFzUHJvcEZ1bmMoZ2VuKX0uY2FsbCgke2RhdGF9LCAke3Byb3BlcnR5fSlgO1xufVxuZXhwb3J0cy5pc093blByb3BlcnR5ID0gaXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIHByb3BlcnR5SW5EYXRhKGdlbiwgZGF0YSwgcHJvcGVydHksIG93blByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBjb25kID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkocHJvcGVydHkpfSAhPT0gdW5kZWZpbmVkYDtcbiAgICByZXR1cm4gb3duUHJvcGVydGllcyA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7Y29uZH0gJiYgJHtpc093blByb3BlcnR5KGdlbiwgZGF0YSwgcHJvcGVydHkpfWAgOiBjb25kO1xufVxuZXhwb3J0cy5wcm9wZXJ0eUluRGF0YSA9IHByb3BlcnR5SW5EYXRhO1xuZnVuY3Rpb24gbm9Qcm9wZXJ0eUluRGF0YShnZW4sIGRhdGEsIHByb3BlcnR5LCBvd25Qcm9wZXJ0aWVzKSB7XG4gICAgY29uc3QgY29uZCA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKHByb3BlcnR5KX0gPT09IHVuZGVmaW5lZGA7XG4gICAgcmV0dXJuIG93blByb3BlcnRpZXMgPyAoMCwgY29kZWdlbl8xLm9yKShjb25kLCAoMCwgY29kZWdlbl8xLm5vdCkoaXNPd25Qcm9wZXJ0eShnZW4sIGRhdGEsIHByb3BlcnR5KSkpIDogY29uZDtcbn1cbmV4cG9ydHMubm9Qcm9wZXJ0eUluRGF0YSA9IG5vUHJvcGVydHlJbkRhdGE7XG5mdW5jdGlvbiBhbGxTY2hlbWFQcm9wZXJ0aWVzKHNjaGVtYU1hcCkge1xuICAgIHJldHVybiBzY2hlbWFNYXAgPyBPYmplY3Qua2V5cyhzY2hlbWFNYXApLmZpbHRlcigocCkgPT4gcCAhPT0gXCJfX3Byb3RvX19cIikgOiBbXTtcbn1cbmV4cG9ydHMuYWxsU2NoZW1hUHJvcGVydGllcyA9IGFsbFNjaGVtYVByb3BlcnRpZXM7XG5mdW5jdGlvbiBzY2hlbWFQcm9wZXJ0aWVzKGl0LCBzY2hlbWFNYXApIHtcbiAgICByZXR1cm4gYWxsU2NoZW1hUHJvcGVydGllcyhzY2hlbWFNYXApLmZpbHRlcigocCkgPT4gISgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWFNYXBbcF0pKTtcbn1cbmV4cG9ydHMuc2NoZW1hUHJvcGVydGllcyA9IHNjaGVtYVByb3BlcnRpZXM7XG5mdW5jdGlvbiBjYWxsVmFsaWRhdGVDb2RlKHsgc2NoZW1hQ29kZSwgZGF0YSwgaXQ6IHsgZ2VuLCB0b3BTY2hlbWFSZWYsIHNjaGVtYVBhdGgsIGVycm9yUGF0aCB9LCBpdCB9LCBmdW5jLCBjb250ZXh0LCBwYXNzU2NoZW1hKSB7XG4gICAgY29uc3QgZGF0YUFuZFNjaGVtYSA9IHBhc3NTY2hlbWEgPyAoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYUNvZGV9LCAke2RhdGF9LCAke3RvcFNjaGVtYVJlZn0ke3NjaGVtYVBhdGh9YCA6IGRhdGE7XG4gICAgY29uc3QgdmFsQ3h0ID0gW1xuICAgICAgICBbbmFtZXNfMS5kZWZhdWx0Lmluc3RhbmNlUGF0aCwgKDAsIGNvZGVnZW5fMS5zdHJDb25jYXQpKG5hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGgsIGVycm9yUGF0aCldLFxuICAgICAgICBbbmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGEsIGl0LnBhcmVudERhdGFdLFxuICAgICAgICBbbmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGFQcm9wZXJ0eSwgaXQucGFyZW50RGF0YVByb3BlcnR5XSxcbiAgICAgICAgW25hbWVzXzEuZGVmYXVsdC5yb290RGF0YSwgbmFtZXNfMS5kZWZhdWx0LnJvb3REYXRhXSxcbiAgICBdO1xuICAgIGlmIChpdC5vcHRzLmR5bmFtaWNSZWYpXG4gICAgICAgIHZhbEN4dC5wdXNoKFtuYW1lc18xLmRlZmF1bHQuZHluYW1pY0FuY2hvcnMsIG5hbWVzXzEuZGVmYXVsdC5keW5hbWljQW5jaG9yc10pO1xuICAgIGNvbnN0IGFyZ3MgPSAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGFBbmRTY2hlbWF9LCAke2dlbi5vYmplY3QoLi4udmFsQ3h0KX1gO1xuICAgIHJldHVybiBjb250ZXh0ICE9PSBjb2RlZ2VuXzEubmlsID8gKDAsIGNvZGVnZW5fMS5fKSBgJHtmdW5jfS5jYWxsKCR7Y29udGV4dH0sICR7YXJnc30pYCA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZnVuY30oJHthcmdzfSlgO1xufVxuZXhwb3J0cy5jYWxsVmFsaWRhdGVDb2RlID0gY2FsbFZhbGlkYXRlQ29kZTtcbmNvbnN0IG5ld1JlZ0V4cCA9ICgwLCBjb2RlZ2VuXzEuXykgYG5ldyBSZWdFeHBgO1xuZnVuY3Rpb24gdXNlUGF0dGVybih7IGdlbiwgaXQ6IHsgb3B0cyB9IH0sIHBhdHRlcm4pIHtcbiAgICBjb25zdCB1ID0gb3B0cy51bmljb2RlUmVnRXhwID8gXCJ1XCIgOiBcIlwiO1xuICAgIGNvbnN0IHsgcmVnRXhwIH0gPSBvcHRzLmNvZGU7XG4gICAgY29uc3QgcnggPSByZWdFeHAocGF0dGVybiwgdSk7XG4gICAgcmV0dXJuIGdlbi5zY29wZVZhbHVlKFwicGF0dGVyblwiLCB7XG4gICAgICAgIGtleTogcngudG9TdHJpbmcoKSxcbiAgICAgICAgcmVmOiByeCxcbiAgICAgICAgY29kZTogKDAsIGNvZGVnZW5fMS5fKSBgJHtyZWdFeHAuY29kZSA9PT0gXCJuZXcgUmVnRXhwXCIgPyBuZXdSZWdFeHAgOiAoMCwgdXRpbF8yLnVzZUZ1bmMpKGdlbiwgcmVnRXhwKX0oJHtwYXR0ZXJufSwgJHt1fSlgLFxuICAgIH0pO1xufVxuZXhwb3J0cy51c2VQYXR0ZXJuID0gdXNlUGF0dGVybjtcbmZ1bmN0aW9uIHZhbGlkYXRlQXJyYXkoY3h0KSB7XG4gICAgY29uc3QgeyBnZW4sIGRhdGEsIGtleXdvcmQsIGl0IH0gPSBjeHQ7XG4gICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgIGlmIChpdC5hbGxFcnJvcnMpIHtcbiAgICAgICAgY29uc3QgdmFsaWRBcnIgPSBnZW4ubGV0KFwidmFsaWRcIiwgdHJ1ZSk7XG4gICAgICAgIHZhbGlkYXRlSXRlbXMoKCkgPT4gZ2VuLmFzc2lnbih2YWxpZEFyciwgZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkQXJyO1xuICAgIH1cbiAgICBnZW4udmFyKHZhbGlkLCB0cnVlKTtcbiAgICB2YWxpZGF0ZUl0ZW1zKCgpID0+IGdlbi5icmVhaygpKTtcbiAgICByZXR1cm4gdmFsaWQ7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVJdGVtcyhub3RWYWxpZCkge1xuICAgICAgICBjb25zdCBsZW4gPSBnZW4uY29uc3QoXCJsZW5cIiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfS5sZW5ndGhgKTtcbiAgICAgICAgZ2VuLmZvclJhbmdlKFwiaVwiLCAwLCBsZW4sIChpKSA9PiB7XG4gICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkLFxuICAgICAgICAgICAgICAgIGRhdGFQcm9wOiBpLFxuICAgICAgICAgICAgICAgIGRhdGFQcm9wVHlwZTogdXRpbF8xLlR5cGUuTnVtLFxuICAgICAgICAgICAgfSwgdmFsaWQpO1xuICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSh2YWxpZCksIG5vdFZhbGlkKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy52YWxpZGF0ZUFycmF5ID0gdmFsaWRhdGVBcnJheTtcbmZ1bmN0aW9uIHZhbGlkYXRlVW5pb24oY3h0KSB7XG4gICAgY29uc3QgeyBnZW4sIHNjaGVtYSwga2V5d29yZCwgaXQgfSA9IGN4dDtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NoZW1hKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgIGNvbnN0IGFsd2F5c1ZhbGlkID0gc2NoZW1hLnNvbWUoKHNjaCkgPT4gKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaCkpO1xuICAgIGlmIChhbHdheXNWYWxpZCAmJiAhaXQub3B0cy51bmV2YWx1YXRlZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIsIGZhbHNlKTtcbiAgICBjb25zdCBzY2hWYWxpZCA9IGdlbi5uYW1lKFwiX3ZhbGlkXCIpO1xuICAgIGdlbi5ibG9jaygoKSA9PiBzY2hlbWEuZm9yRWFjaCgoX3NjaCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgIGtleXdvcmQsXG4gICAgICAgICAgICBzY2hlbWFQcm9wOiBpLFxuICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgfSwgc2NoVmFsaWQpO1xuICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCAoMCwgY29kZWdlbl8xLl8pIGAke3ZhbGlkfSB8fCAke3NjaFZhbGlkfWApO1xuICAgICAgICBjb25zdCBtZXJnZWQgPSBjeHQubWVyZ2VWYWxpZEV2YWx1YXRlZChzY2hDeHQsIHNjaFZhbGlkKTtcbiAgICAgICAgLy8gY2FuIHNob3J0LWNpcmN1aXQgaWYgYHVuZXZhbHVhdGVkUHJvcGVydGllcy9JdGVtc2Agbm90IHN1cHBvcnRlZCAob3B0cy51bmV2YWx1YXRlZCAhPT0gdHJ1ZSlcbiAgICAgICAgLy8gb3IgaWYgYWxsIHByb3BlcnRpZXMgYW5kIGl0ZW1zIHdlcmUgZXZhbHVhdGVkIChpdC5wcm9wcyA9PT0gdHJ1ZSAmJiBpdC5pdGVtcyA9PT0gdHJ1ZSlcbiAgICAgICAgaWYgKCFtZXJnZWQpXG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSk7XG4gICAgfSkpO1xuICAgIGN4dC5yZXN1bHQodmFsaWQsICgpID0+IGN4dC5yZXNldCgpLCAoKSA9PiBjeHQuZXJyb3IodHJ1ZSkpO1xufVxuZXhwb3J0cy52YWxpZGF0ZVVuaW9uID0gdmFsaWRhdGVVbmlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvZGUuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVLZXl3b3JkVXNhZ2UgPSBleHBvcnRzLnZhbGlkU2NoZW1hVHlwZSA9IGV4cG9ydHMuZnVuY0tleXdvcmRDb2RlID0gZXhwb3J0cy5tYWNyb0tleXdvcmRDb2RlID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uL2NvZGVnZW5cIik7XG5jb25zdCBuYW1lc18xID0gcmVxdWlyZShcIi4uL25hbWVzXCIpO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uLy4uL3ZvY2FidWxhcmllcy9jb2RlXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuZnVuY3Rpb24gbWFjcm9LZXl3b3JkQ29kZShjeHQsIGRlZikge1xuICAgIGNvbnN0IHsgZ2VuLCBrZXl3b3JkLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICBjb25zdCBtYWNyb1NjaGVtYSA9IGRlZi5tYWNyby5jYWxsKGl0LnNlbGYsIHNjaGVtYSwgcGFyZW50U2NoZW1hLCBpdCk7XG4gICAgY29uc3Qgc2NoZW1hUmVmID0gdXNlS2V5d29yZChnZW4sIGtleXdvcmQsIG1hY3JvU2NoZW1hKTtcbiAgICBpZiAoaXQub3B0cy52YWxpZGF0ZVNjaGVtYSAhPT0gZmFsc2UpXG4gICAgICAgIGl0LnNlbGYudmFsaWRhdGVTY2hlbWEobWFjcm9TY2hlbWEsIHRydWUpO1xuICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgc2NoZW1hOiBtYWNyb1NjaGVtYSxcbiAgICAgICAgc2NoZW1hUGF0aDogY29kZWdlbl8xLm5pbCxcbiAgICAgICAgZXJyU2NoZW1hUGF0aDogYCR7aXQuZXJyU2NoZW1hUGF0aH0vJHtrZXl3b3JkfWAsXG4gICAgICAgIHRvcFNjaGVtYVJlZjogc2NoZW1hUmVmLFxuICAgICAgICBjb21wb3NpdGVSdWxlOiB0cnVlLFxuICAgIH0sIHZhbGlkKTtcbiAgICBjeHQucGFzcyh2YWxpZCwgKCkgPT4gY3h0LmVycm9yKHRydWUpKTtcbn1cbmV4cG9ydHMubWFjcm9LZXl3b3JkQ29kZSA9IG1hY3JvS2V5d29yZENvZGU7XG5mdW5jdGlvbiBmdW5jS2V5d29yZENvZGUoY3h0LCBkZWYpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgeyBnZW4sIGtleXdvcmQsIHNjaGVtYSwgcGFyZW50U2NoZW1hLCAkZGF0YSwgaXQgfSA9IGN4dDtcbiAgICBjaGVja0FzeW5jS2V5d29yZChpdCwgZGVmKTtcbiAgICBjb25zdCB2YWxpZGF0ZSA9ICEkZGF0YSAmJiBkZWYuY29tcGlsZSA/IGRlZi5jb21waWxlLmNhbGwoaXQuc2VsZiwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGl0KSA6IGRlZi52YWxpZGF0ZTtcbiAgICBjb25zdCB2YWxpZGF0ZVJlZiA9IHVzZUtleXdvcmQoZ2VuLCBrZXl3b3JkLCB2YWxpZGF0ZSk7XG4gICAgY29uc3QgdmFsaWQgPSBnZW4ubGV0KFwidmFsaWRcIik7XG4gICAgY3h0LmJsb2NrJGRhdGEodmFsaWQsIHZhbGlkYXRlS2V5d29yZCk7XG4gICAgY3h0Lm9rKChfYSA9IGRlZi52YWxpZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdmFsaWQpO1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlS2V5d29yZCgpIHtcbiAgICAgICAgaWYgKGRlZi5lcnJvcnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhc3NpZ25WYWxpZCgpO1xuICAgICAgICAgICAgaWYgKGRlZi5tb2RpZnlpbmcpXG4gICAgICAgICAgICAgICAgbW9kaWZ5RGF0YShjeHQpO1xuICAgICAgICAgICAgcmVwb3J0RXJycygoKSA9PiBjeHQuZXJyb3IoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBydWxlRXJycyA9IGRlZi5hc3luYyA/IHZhbGlkYXRlQXN5bmMoKSA6IHZhbGlkYXRlU3luYygpO1xuICAgICAgICAgICAgaWYgKGRlZi5tb2RpZnlpbmcpXG4gICAgICAgICAgICAgICAgbW9kaWZ5RGF0YShjeHQpO1xuICAgICAgICAgICAgcmVwb3J0RXJycygoKSA9PiBhZGRFcnJzKGN4dCwgcnVsZUVycnMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUFzeW5jKCkge1xuICAgICAgICBjb25zdCBydWxlRXJycyA9IGdlbi5sZXQoXCJydWxlRXJyc1wiLCBudWxsKTtcbiAgICAgICAgZ2VuLnRyeSgoKSA9PiBhc3NpZ25WYWxpZCgoMCwgY29kZWdlbl8xLl8pIGBhd2FpdCBgKSwgKGUpID0+IGdlbi5hc3NpZ24odmFsaWQsIGZhbHNlKS5pZigoMCwgY29kZWdlbl8xLl8pIGAke2V9IGluc3RhbmNlb2YgJHtpdC5WYWxpZGF0aW9uRXJyb3J9YCwgKCkgPT4gZ2VuLmFzc2lnbihydWxlRXJycywgKDAsIGNvZGVnZW5fMS5fKSBgJHtlfS5lcnJvcnNgKSwgKCkgPT4gZ2VuLnRocm93KGUpKSk7XG4gICAgICAgIHJldHVybiBydWxlRXJycztcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVTeW5jKCkge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZUVycnMgPSAoMCwgY29kZWdlbl8xLl8pIGAke3ZhbGlkYXRlUmVmfS5lcnJvcnNgO1xuICAgICAgICBnZW4uYXNzaWduKHZhbGlkYXRlRXJycywgbnVsbCk7XG4gICAgICAgIGFzc2lnblZhbGlkKGNvZGVnZW5fMS5uaWwpO1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVFcnJzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWxpZChfYXdhaXQgPSBkZWYuYXN5bmMgPyAoMCwgY29kZWdlbl8xLl8pIGBhd2FpdCBgIDogY29kZWdlbl8xLm5pbCkge1xuICAgICAgICBjb25zdCBwYXNzQ3h0ID0gaXQub3B0cy5wYXNzQ29udGV4dCA/IG5hbWVzXzEuZGVmYXVsdC50aGlzIDogbmFtZXNfMS5kZWZhdWx0LnNlbGY7XG4gICAgICAgIGNvbnN0IHBhc3NTY2hlbWEgPSAhKChcImNvbXBpbGVcIiBpbiBkZWYgJiYgISRkYXRhKSB8fCBkZWYuc2NoZW1hID09PSBmYWxzZSk7XG4gICAgICAgIGdlbi5hc3NpZ24odmFsaWQsICgwLCBjb2RlZ2VuXzEuXykgYCR7X2F3YWl0fSR7KDAsIGNvZGVfMS5jYWxsVmFsaWRhdGVDb2RlKShjeHQsIHZhbGlkYXRlUmVmLCBwYXNzQ3h0LCBwYXNzU2NoZW1hKX1gLCBkZWYubW9kaWZ5aW5nKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVwb3J0RXJycyhlcnJvcnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKChfYSA9IGRlZi52YWxpZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdmFsaWQpLCBlcnJvcnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZnVuY0tleXdvcmRDb2RlID0gZnVuY0tleXdvcmRDb2RlO1xuZnVuY3Rpb24gbW9kaWZ5RGF0YShjeHQpIHtcbiAgICBjb25zdCB7IGdlbiwgZGF0YSwgaXQgfSA9IGN4dDtcbiAgICBnZW4uaWYoaXQucGFyZW50RGF0YSwgKCkgPT4gZ2VuLmFzc2lnbihkYXRhLCAoMCwgY29kZWdlbl8xLl8pIGAke2l0LnBhcmVudERhdGF9WyR7aXQucGFyZW50RGF0YVByb3BlcnR5fV1gKSk7XG59XG5mdW5jdGlvbiBhZGRFcnJzKGN4dCwgZXJycykge1xuICAgIGNvbnN0IHsgZ2VuIH0gPSBjeHQ7XG4gICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYEFycmF5LmlzQXJyYXkoJHtlcnJzfSlgLCAoKSA9PiB7XG4gICAgICAgIGdlblxuICAgICAgICAgICAgLmFzc2lnbihuYW1lc18xLmRlZmF1bHQudkVycm9ycywgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudkVycm9yc30gPT09IG51bGwgPyAke2VycnN9IDogJHtuYW1lc18xLmRlZmF1bHQudkVycm9yc30uY29uY2F0KCR7ZXJyc30pYClcbiAgICAgICAgICAgIC5hc3NpZ24obmFtZXNfMS5kZWZhdWx0LmVycm9ycywgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudkVycm9yc30ubGVuZ3RoYCk7XG4gICAgICAgICgwLCBlcnJvcnNfMS5leHRlbmRFcnJvcnMpKGN4dCk7XG4gICAgfSwgKCkgPT4gY3h0LmVycm9yKCkpO1xufVxuZnVuY3Rpb24gY2hlY2tBc3luY0tleXdvcmQoeyBzY2hlbWFFbnYgfSwgZGVmKSB7XG4gICAgaWYgKGRlZi5hc3luYyAmJiAhc2NoZW1hRW52LiRhc3luYylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXN5bmMga2V5d29yZCBpbiBzeW5jIHNjaGVtYVwiKTtcbn1cbmZ1bmN0aW9uIHVzZUtleXdvcmQoZ2VuLCBrZXl3b3JkLCByZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihga2V5d29yZCBcIiR7a2V5d29yZH1cIiBmYWlsZWQgdG8gY29tcGlsZWApO1xuICAgIHJldHVybiBnZW4uc2NvcGVWYWx1ZShcImtleXdvcmRcIiwgdHlwZW9mIHJlc3VsdCA9PSBcImZ1bmN0aW9uXCIgPyB7IHJlZjogcmVzdWx0IH0gOiB7IHJlZjogcmVzdWx0LCBjb2RlOiAoMCwgY29kZWdlbl8xLnN0cmluZ2lmeSkocmVzdWx0KSB9KTtcbn1cbmZ1bmN0aW9uIHZhbGlkU2NoZW1hVHlwZShzY2hlbWEsIHNjaGVtYVR5cGUsIGFsbG93VW5kZWZpbmVkID0gZmFsc2UpIHtcbiAgICAvLyBUT0RPIGFkZCB0ZXN0c1xuICAgIHJldHVybiAoIXNjaGVtYVR5cGUubGVuZ3RoIHx8XG4gICAgICAgIHNjaGVtYVR5cGUuc29tZSgoc3QpID0+IHN0ID09PSBcImFycmF5XCJcbiAgICAgICAgICAgID8gQXJyYXkuaXNBcnJheShzY2hlbWEpXG4gICAgICAgICAgICA6IHN0ID09PSBcIm9iamVjdFwiXG4gICAgICAgICAgICAgICAgPyBzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYSA9PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHNjaGVtYSlcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBzY2hlbWEgPT0gc3QgfHwgKGFsbG93VW5kZWZpbmVkICYmIHR5cGVvZiBzY2hlbWEgPT0gXCJ1bmRlZmluZWRcIikpKTtcbn1cbmV4cG9ydHMudmFsaWRTY2hlbWFUeXBlID0gdmFsaWRTY2hlbWFUeXBlO1xuZnVuY3Rpb24gdmFsaWRhdGVLZXl3b3JkVXNhZ2UoeyBzY2hlbWEsIG9wdHMsIHNlbGYsIGVyclNjaGVtYVBhdGggfSwgZGVmLCBrZXl3b3JkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmLmtleXdvcmQpID8gIWRlZi5rZXl3b3JkLmluY2x1ZGVzKGtleXdvcmQpIDogZGVmLmtleXdvcmQgIT09IGtleXdvcmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgIH1cbiAgICBjb25zdCBkZXBzID0gZGVmLmRlcGVuZGVuY2llcztcbiAgICBpZiAoZGVwcyA9PT0gbnVsbCB8fCBkZXBzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZXBzLnNvbWUoKGt3ZCkgPT4gIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzY2hlbWEsIGt3ZCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgcGFyZW50IHNjaGVtYSBtdXN0IGhhdmUgZGVwZW5kZW5jaWVzIG9mICR7a2V5d29yZH06ICR7ZGVwcy5qb2luKFwiLFwiKX1gKTtcbiAgICB9XG4gICAgaWYgKGRlZi52YWxpZGF0ZVNjaGVtYSkge1xuICAgICAgICBjb25zdCB2YWxpZCA9IGRlZi52YWxpZGF0ZVNjaGVtYShzY2hlbWFba2V5d29yZF0pO1xuICAgICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBga2V5d29yZCBcIiR7a2V5d29yZH1cIiB2YWx1ZSBpcyBpbnZhbGlkIGF0IHBhdGggXCIke2VyclNjaGVtYVBhdGh9XCI6IGAgK1xuICAgICAgICAgICAgICAgIHNlbGYuZXJyb3JzVGV4dChkZWYudmFsaWRhdGVTY2hlbWEuZXJyb3JzKTtcbiAgICAgICAgICAgIGlmIChvcHRzLnZhbGlkYXRlU2NoZW1hID09PSBcImxvZ1wiKVxuICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKG1zZyk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlS2V5d29yZFVzYWdlID0gdmFsaWRhdGVLZXl3b3JkVXNhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXl3b3JkLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4dGVuZFN1YnNjaGVtYU1vZGUgPSBleHBvcnRzLmV4dGVuZFN1YnNjaGVtYURhdGEgPSBleHBvcnRzLmdldFN1YnNjaGVtYSA9IHZvaWQgMDtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG5mdW5jdGlvbiBnZXRTdWJzY2hlbWEoaXQsIHsga2V5d29yZCwgc2NoZW1hUHJvcCwgc2NoZW1hLCBzY2hlbWFQYXRoLCBlcnJTY2hlbWFQYXRoLCB0b3BTY2hlbWFSZWYgfSkge1xuICAgIGlmIChrZXl3b3JkICE9PSB1bmRlZmluZWQgJiYgc2NoZW1hICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdib3RoIFwia2V5d29yZFwiIGFuZCBcInNjaGVtYVwiIHBhc3NlZCwgb25seSBvbmUgYWxsb3dlZCcpO1xuICAgIH1cbiAgICBpZiAoa2V5d29yZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHNjaCA9IGl0LnNjaGVtYVtrZXl3b3JkXTtcbiAgICAgICAgcmV0dXJuIHNjaGVtYVByb3AgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgc2NoZW1hOiBzY2gsXG4gICAgICAgICAgICAgICAgc2NoZW1hUGF0aDogKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5zY2hlbWFQYXRofSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkoa2V5d29yZCl9YCxcbiAgICAgICAgICAgICAgICBlcnJTY2hlbWFQYXRoOiBgJHtpdC5lcnJTY2hlbWFQYXRofS8ke2tleXdvcmR9YCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIHNjaGVtYTogc2NoW3NjaGVtYVByb3BdLFxuICAgICAgICAgICAgICAgIHNjaGVtYVBhdGg6ICgwLCBjb2RlZ2VuXzEuXykgYCR7aXQuc2NoZW1hUGF0aH0keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKGtleXdvcmQpfSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkoc2NoZW1hUHJvcCl9YCxcbiAgICAgICAgICAgICAgICBlcnJTY2hlbWFQYXRoOiBgJHtpdC5lcnJTY2hlbWFQYXRofS8ke2tleXdvcmR9LyR7KDAsIHV0aWxfMS5lc2NhcGVGcmFnbWVudCkoc2NoZW1hUHJvcCl9YCxcbiAgICAgICAgICAgIH07XG4gICAgfVxuICAgIGlmIChzY2hlbWEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoc2NoZW1hUGF0aCA9PT0gdW5kZWZpbmVkIHx8IGVyclNjaGVtYVBhdGggPT09IHVuZGVmaW5lZCB8fCB0b3BTY2hlbWFSZWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInNjaGVtYVBhdGhcIiwgXCJlcnJTY2hlbWFQYXRoXCIgYW5kIFwidG9wU2NoZW1hUmVmXCIgYXJlIHJlcXVpcmVkIHdpdGggXCJzY2hlbWFcIicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgICBzY2hlbWFQYXRoLFxuICAgICAgICAgICAgdG9wU2NoZW1hUmVmLFxuICAgICAgICAgICAgZXJyU2NoZW1hUGF0aCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdlaXRoZXIgXCJrZXl3b3JkXCIgb3IgXCJzY2hlbWFcIiBtdXN0IGJlIHBhc3NlZCcpO1xufVxuZXhwb3J0cy5nZXRTdWJzY2hlbWEgPSBnZXRTdWJzY2hlbWE7XG5mdW5jdGlvbiBleHRlbmRTdWJzY2hlbWFEYXRhKHN1YnNjaGVtYSwgaXQsIHsgZGF0YVByb3AsIGRhdGFQcm9wVHlwZTogZHBUeXBlLCBkYXRhLCBkYXRhVHlwZXMsIHByb3BlcnR5TmFtZSB9KSB7XG4gICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCAmJiBkYXRhUHJvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYm90aCBcImRhdGFcIiBhbmQgXCJkYXRhUHJvcFwiIHBhc3NlZCwgb25seSBvbmUgYWxsb3dlZCcpO1xuICAgIH1cbiAgICBjb25zdCB7IGdlbiB9ID0gaXQ7XG4gICAgaWYgKGRhdGFQcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgeyBlcnJvclBhdGgsIGRhdGFQYXRoQXJyLCBvcHRzIH0gPSBpdDtcbiAgICAgICAgY29uc3QgbmV4dERhdGEgPSBnZW4ubGV0KFwiZGF0YVwiLCAoMCwgY29kZWdlbl8xLl8pIGAke2l0LmRhdGF9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KShkYXRhUHJvcCl9YCwgdHJ1ZSk7XG4gICAgICAgIGRhdGFDb250ZXh0UHJvcHMobmV4dERhdGEpO1xuICAgICAgICBzdWJzY2hlbWEuZXJyb3JQYXRoID0gKDAsIGNvZGVnZW5fMS5zdHIpIGAke2Vycm9yUGF0aH0keygwLCB1dGlsXzEuZ2V0RXJyb3JQYXRoKShkYXRhUHJvcCwgZHBUeXBlLCBvcHRzLmpzUHJvcGVydHlTeW50YXgpfWA7XG4gICAgICAgIHN1YnNjaGVtYS5wYXJlbnREYXRhUHJvcGVydHkgPSAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGFQcm9wfWA7XG4gICAgICAgIHN1YnNjaGVtYS5kYXRhUGF0aEFyciA9IFsuLi5kYXRhUGF0aEFyciwgc3Vic2NoZW1hLnBhcmVudERhdGFQcm9wZXJ0eV07XG4gICAgfVxuICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgbmV4dERhdGEgPSBkYXRhIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUgPyBkYXRhIDogZ2VuLmxldChcImRhdGFcIiwgZGF0YSwgdHJ1ZSk7IC8vIHJlcGxhY2VhYmxlIGlmIHVzZWQgb25jZT9cbiAgICAgICAgZGF0YUNvbnRleHRQcm9wcyhuZXh0RGF0YSk7XG4gICAgICAgIGlmIChwcm9wZXJ0eU5hbWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHN1YnNjaGVtYS5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICAgIC8vIFRPRE8gc29tZXRoaW5nIGlzIHBvc3NpYmx5IHdyb25nIGhlcmUgd2l0aCBub3QgY2hhbmdpbmcgcGFyZW50RGF0YVByb3BlcnR5IGFuZCBub3QgYXBwZW5kaW5nIGRhdGFQYXRoQXJyXG4gICAgfVxuICAgIGlmIChkYXRhVHlwZXMpXG4gICAgICAgIHN1YnNjaGVtYS5kYXRhVHlwZXMgPSBkYXRhVHlwZXM7XG4gICAgZnVuY3Rpb24gZGF0YUNvbnRleHRQcm9wcyhfbmV4dERhdGEpIHtcbiAgICAgICAgc3Vic2NoZW1hLmRhdGEgPSBfbmV4dERhdGE7XG4gICAgICAgIHN1YnNjaGVtYS5kYXRhTGV2ZWwgPSBpdC5kYXRhTGV2ZWwgKyAxO1xuICAgICAgICBzdWJzY2hlbWEuZGF0YVR5cGVzID0gW107XG4gICAgICAgIGl0LmRlZmluZWRQcm9wZXJ0aWVzID0gbmV3IFNldCgpO1xuICAgICAgICBzdWJzY2hlbWEucGFyZW50RGF0YSA9IGl0LmRhdGE7XG4gICAgICAgIHN1YnNjaGVtYS5kYXRhTmFtZXMgPSBbLi4uaXQuZGF0YU5hbWVzLCBfbmV4dERhdGFdO1xuICAgIH1cbn1cbmV4cG9ydHMuZXh0ZW5kU3Vic2NoZW1hRGF0YSA9IGV4dGVuZFN1YnNjaGVtYURhdGE7XG5mdW5jdGlvbiBleHRlbmRTdWJzY2hlbWFNb2RlKHN1YnNjaGVtYSwgeyBqdGREaXNjcmltaW5hdG9yLCBqdGRNZXRhZGF0YSwgY29tcG9zaXRlUnVsZSwgY3JlYXRlRXJyb3JzLCBhbGxFcnJvcnMgfSkge1xuICAgIGlmIChjb21wb3NpdGVSdWxlICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHN1YnNjaGVtYS5jb21wb3NpdGVSdWxlID0gY29tcG9zaXRlUnVsZTtcbiAgICBpZiAoY3JlYXRlRXJyb3JzICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHN1YnNjaGVtYS5jcmVhdGVFcnJvcnMgPSBjcmVhdGVFcnJvcnM7XG4gICAgaWYgKGFsbEVycm9ycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBzdWJzY2hlbWEuYWxsRXJyb3JzID0gYWxsRXJyb3JzO1xuICAgIHN1YnNjaGVtYS5qdGREaXNjcmltaW5hdG9yID0ganRkRGlzY3JpbWluYXRvcjsgLy8gbm90IGluaGVyaXRlZFxuICAgIHN1YnNjaGVtYS5qdGRNZXRhZGF0YSA9IGp0ZE1ldGFkYXRhOyAvLyBub3QgaW5oZXJpdGVkXG59XG5leHBvcnRzLmV4dGVuZFN1YnNjaGVtYU1vZGUgPSBleHRlbmRTdWJzY2hlbWFNb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NoZW1hLmpzLm1hcCIsCiAgICAiJ3VzZSBzdHJpY3QnO1xuXG4vLyBkbyBub3QgZWRpdCAuanMgZmlsZXMgZGlyZWN0bHkgLSBlZGl0IHNyYy9pbmRleC5qc3RcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIGlmIChhLmNvbnN0cnVjdG9yICE9PSBiLmNvbnN0cnVjdG9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbGVuZ3RoLCBpLCBrZXlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG5cblxuICAgIGlmIChhLmNvbnN0cnVjdG9yID09PSBSZWdFeHApIHJldHVybiBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncztcbiAgICBpZiAoYS52YWx1ZU9mICE9PSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YpIHJldHVybiBhLnZhbHVlT2YoKSA9PT0gYi52YWx1ZU9mKCk7XG4gICAgaWYgKGEudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIWVxdWFsKGFba2V5XSwgYltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gdHJ1ZSBpZiBib3RoIE5hTiwgZmFsc2Ugb3RoZXJ3aXNlXG4gIHJldHVybiBhIT09YSAmJiBiIT09Yjtcbn07XG4iLAogICAgIid1c2Ugc3RyaWN0JztcblxudmFyIHRyYXZlcnNlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2NoZW1hLCBvcHRzLCBjYikge1xuICAvLyBMZWdhY3kgc3VwcG9ydCBmb3IgdjAuMy4xIGFuZCBlYXJsaWVyLlxuICBpZiAodHlwZW9mIG9wdHMgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cblxuICBjYiA9IG9wdHMuY2IgfHwgY2I7XG4gIHZhciBwcmUgPSAodHlwZW9mIGNiID09ICdmdW5jdGlvbicpID8gY2IgOiBjYi5wcmUgfHwgZnVuY3Rpb24oKSB7fTtcbiAgdmFyIHBvc3QgPSBjYi5wb3N0IHx8IGZ1bmN0aW9uKCkge307XG5cbiAgX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoZW1hLCAnJywgc2NoZW1hKTtcbn07XG5cblxudHJhdmVyc2Uua2V5d29yZHMgPSB7XG4gIGFkZGl0aW9uYWxJdGVtczogdHJ1ZSxcbiAgaXRlbXM6IHRydWUsXG4gIGNvbnRhaW5zOiB0cnVlLFxuICBhZGRpdGlvbmFsUHJvcGVydGllczogdHJ1ZSxcbiAgcHJvcGVydHlOYW1lczogdHJ1ZSxcbiAgbm90OiB0cnVlLFxuICBpZjogdHJ1ZSxcbiAgdGhlbjogdHJ1ZSxcbiAgZWxzZTogdHJ1ZVxufTtcblxudHJhdmVyc2UuYXJyYXlLZXl3b3JkcyA9IHtcbiAgaXRlbXM6IHRydWUsXG4gIGFsbE9mOiB0cnVlLFxuICBhbnlPZjogdHJ1ZSxcbiAgb25lT2Y6IHRydWVcbn07XG5cbnRyYXZlcnNlLnByb3BzS2V5d29yZHMgPSB7XG4gICRkZWZzOiB0cnVlLFxuICBkZWZpbml0aW9uczogdHJ1ZSxcbiAgcHJvcGVydGllczogdHJ1ZSxcbiAgcGF0dGVyblByb3BlcnRpZXM6IHRydWUsXG4gIGRlcGVuZGVuY2llczogdHJ1ZVxufTtcblxudHJhdmVyc2Uuc2tpcEtleXdvcmRzID0ge1xuICBkZWZhdWx0OiB0cnVlLFxuICBlbnVtOiB0cnVlLFxuICBjb25zdDogdHJ1ZSxcbiAgcmVxdWlyZWQ6IHRydWUsXG4gIG1heGltdW06IHRydWUsXG4gIG1pbmltdW06IHRydWUsXG4gIGV4Y2x1c2l2ZU1heGltdW06IHRydWUsXG4gIGV4Y2x1c2l2ZU1pbmltdW06IHRydWUsXG4gIG11bHRpcGxlT2Y6IHRydWUsXG4gIG1heExlbmd0aDogdHJ1ZSxcbiAgbWluTGVuZ3RoOiB0cnVlLFxuICBwYXR0ZXJuOiB0cnVlLFxuICBmb3JtYXQ6IHRydWUsXG4gIG1heEl0ZW1zOiB0cnVlLFxuICBtaW5JdGVtczogdHJ1ZSxcbiAgdW5pcXVlSXRlbXM6IHRydWUsXG4gIG1heFByb3BlcnRpZXM6IHRydWUsXG4gIG1pblByb3BlcnRpZXM6IHRydWVcbn07XG5cblxuZnVuY3Rpb24gX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoZW1hLCBqc29uUHRyLCByb290U2NoZW1hLCBwYXJlbnRKc29uUHRyLCBwYXJlbnRLZXl3b3JkLCBwYXJlbnRTY2hlbWEsIGtleUluZGV4KSB7XG4gIGlmIChzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYSA9PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShzY2hlbWEpKSB7XG4gICAgcHJlKHNjaGVtYSwganNvblB0ciwgcm9vdFNjaGVtYSwgcGFyZW50SnNvblB0ciwgcGFyZW50S2V5d29yZCwgcGFyZW50U2NoZW1hLCBrZXlJbmRleCk7XG4gICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkge1xuICAgICAgdmFyIHNjaCA9IHNjaGVtYVtrZXldO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoKSkge1xuICAgICAgICBpZiAoa2V5IGluIHRyYXZlcnNlLmFycmF5S2V5d29yZHMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8c2NoLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoW2ldLCBqc29uUHRyICsgJy8nICsga2V5ICsgJy8nICsgaSwgcm9vdFNjaGVtYSwganNvblB0ciwga2V5LCBzY2hlbWEsIGkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSBpbiB0cmF2ZXJzZS5wcm9wc0tleXdvcmRzKSB7XG4gICAgICAgIGlmIChzY2ggJiYgdHlwZW9mIHNjaCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc2NoKVxuICAgICAgICAgICAgX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoW3Byb3BdLCBqc29uUHRyICsgJy8nICsga2V5ICsgJy8nICsgZXNjYXBlSnNvblB0cihwcm9wKSwgcm9vdFNjaGVtYSwganNvblB0ciwga2V5LCBzY2hlbWEsIHByb3ApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSBpbiB0cmF2ZXJzZS5rZXl3b3JkcyB8fCAob3B0cy5hbGxLZXlzICYmICEoa2V5IGluIHRyYXZlcnNlLnNraXBLZXl3b3JkcykpKSB7XG4gICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaCwganNvblB0ciArICcvJyArIGtleSwgcm9vdFNjaGVtYSwganNvblB0ciwga2V5LCBzY2hlbWEpO1xuICAgICAgfVxuICAgIH1cbiAgICBwb3N0KHNjaGVtYSwganNvblB0ciwgcm9vdFNjaGVtYSwgcGFyZW50SnNvblB0ciwgcGFyZW50S2V5d29yZCwgcGFyZW50U2NoZW1hLCBrZXlJbmRleCk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBlc2NhcGVKc29uUHRyKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL34vZywgJ34wJykucmVwbGFjZSgvXFwvL2csICd+MScpO1xufVxuIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0U2NoZW1hUmVmcyA9IGV4cG9ydHMucmVzb2x2ZVVybCA9IGV4cG9ydHMubm9ybWFsaXplSWQgPSBleHBvcnRzLl9nZXRGdWxsUGF0aCA9IGV4cG9ydHMuZ2V0RnVsbFBhdGggPSBleHBvcnRzLmlubGluZVJlZiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCBlcXVhbCA9IHJlcXVpcmUoXCJmYXN0LWRlZXAtZXF1YWxcIik7XG5jb25zdCB0cmF2ZXJzZSA9IHJlcXVpcmUoXCJqc29uLXNjaGVtYS10cmF2ZXJzZVwiKTtcbi8vIFRPRE8gcmVmYWN0b3IgdG8gdXNlIGtleXdvcmQgZGVmaW5pdGlvbnNcbmNvbnN0IFNJTVBMRV9JTkxJTkVEID0gbmV3IFNldChbXG4gICAgXCJ0eXBlXCIsXG4gICAgXCJmb3JtYXRcIixcbiAgICBcInBhdHRlcm5cIixcbiAgICBcIm1heExlbmd0aFwiLFxuICAgIFwibWluTGVuZ3RoXCIsXG4gICAgXCJtYXhQcm9wZXJ0aWVzXCIsXG4gICAgXCJtaW5Qcm9wZXJ0aWVzXCIsXG4gICAgXCJtYXhJdGVtc1wiLFxuICAgIFwibWluSXRlbXNcIixcbiAgICBcIm1heGltdW1cIixcbiAgICBcIm1pbmltdW1cIixcbiAgICBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgXCJtdWx0aXBsZU9mXCIsXG4gICAgXCJyZXF1aXJlZFwiLFxuICAgIFwiZW51bVwiLFxuICAgIFwiY29uc3RcIixcbl0pO1xuZnVuY3Rpb24gaW5saW5lUmVmKHNjaGVtYSwgbGltaXQgPSB0cnVlKSB7XG4gICAgaWYgKHR5cGVvZiBzY2hlbWEgPT0gXCJib29sZWFuXCIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChsaW1pdCA9PT0gdHJ1ZSlcbiAgICAgICAgcmV0dXJuICFoYXNSZWYoc2NoZW1hKTtcbiAgICBpZiAoIWxpbWl0KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGNvdW50S2V5cyhzY2hlbWEpIDw9IGxpbWl0O1xufVxuZXhwb3J0cy5pbmxpbmVSZWYgPSBpbmxpbmVSZWY7XG5jb25zdCBSRUZfS0VZV09SRFMgPSBuZXcgU2V0KFtcbiAgICBcIiRyZWZcIixcbiAgICBcIiRyZWN1cnNpdmVSZWZcIixcbiAgICBcIiRyZWN1cnNpdmVBbmNob3JcIixcbiAgICBcIiRkeW5hbWljUmVmXCIsXG4gICAgXCIkZHluYW1pY0FuY2hvclwiLFxuXSk7XG5mdW5jdGlvbiBoYXNSZWYoc2NoZW1hKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hKSB7XG4gICAgICAgIGlmIChSRUZfS0VZV09SRFMuaGFzKGtleSkpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY29uc3Qgc2NoID0gc2NoZW1hW2tleV07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaCkgJiYgc2NoLnNvbWUoaGFzUmVmKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAodHlwZW9mIHNjaCA9PSBcIm9iamVjdFwiICYmIGhhc1JlZihzY2gpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvdW50S2V5cyhzY2hlbWEpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYSkge1xuICAgICAgICBpZiAoa2V5ID09PSBcIiRyZWZcIilcbiAgICAgICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgaWYgKFNJTVBMRV9JTkxJTkVELmhhcyhrZXkpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hW2tleV0gPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5lYWNoSXRlbSkoc2NoZW1hW2tleV0sIChzY2gpID0+IChjb3VudCArPSBjb3VudEtleXMoc2NoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpXG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbn1cbmZ1bmN0aW9uIGdldEZ1bGxQYXRoKHJlc29sdmVyLCBpZCA9IFwiXCIsIG5vcm1hbGl6ZSkge1xuICAgIGlmIChub3JtYWxpemUgIT09IGZhbHNlKVxuICAgICAgICBpZCA9IG5vcm1hbGl6ZUlkKGlkKTtcbiAgICBjb25zdCBwID0gcmVzb2x2ZXIucGFyc2UoaWQpO1xuICAgIHJldHVybiBfZ2V0RnVsbFBhdGgocmVzb2x2ZXIsIHApO1xufVxuZXhwb3J0cy5nZXRGdWxsUGF0aCA9IGdldEZ1bGxQYXRoO1xuZnVuY3Rpb24gX2dldEZ1bGxQYXRoKHJlc29sdmVyLCBwKSB7XG4gICAgY29uc3Qgc2VyaWFsaXplZCA9IHJlc29sdmVyLnNlcmlhbGl6ZShwKTtcbiAgICByZXR1cm4gc2VyaWFsaXplZC5zcGxpdChcIiNcIilbMF0gKyBcIiNcIjtcbn1cbmV4cG9ydHMuX2dldEZ1bGxQYXRoID0gX2dldEZ1bGxQYXRoO1xuY29uc3QgVFJBSUxJTkdfU0xBU0hfSEFTSCA9IC8jXFwvPyQvO1xuZnVuY3Rpb24gbm9ybWFsaXplSWQoaWQpIHtcbiAgICByZXR1cm4gaWQgPyBpZC5yZXBsYWNlKFRSQUlMSU5HX1NMQVNIX0hBU0gsIFwiXCIpIDogXCJcIjtcbn1cbmV4cG9ydHMubm9ybWFsaXplSWQgPSBub3JtYWxpemVJZDtcbmZ1bmN0aW9uIHJlc29sdmVVcmwocmVzb2x2ZXIsIGJhc2VJZCwgaWQpIHtcbiAgICBpZCA9IG5vcm1hbGl6ZUlkKGlkKTtcbiAgICByZXR1cm4gcmVzb2x2ZXIucmVzb2x2ZShiYXNlSWQsIGlkKTtcbn1cbmV4cG9ydHMucmVzb2x2ZVVybCA9IHJlc29sdmVVcmw7XG5jb25zdCBBTkNIT1IgPSAvXlthLXpfXVstYS16MC05Ll9dKiQvaTtcbmZ1bmN0aW9uIGdldFNjaGVtYVJlZnMoc2NoZW1hLCBiYXNlSWQpIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcImJvb2xlYW5cIilcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIGNvbnN0IHsgc2NoZW1hSWQsIHVyaVJlc29sdmVyIH0gPSB0aGlzLm9wdHM7XG4gICAgY29uc3Qgc2NoSWQgPSBub3JtYWxpemVJZChzY2hlbWFbc2NoZW1hSWRdIHx8IGJhc2VJZCk7XG4gICAgY29uc3QgYmFzZUlkcyA9IHsgXCJcIjogc2NoSWQgfTtcbiAgICBjb25zdCBwYXRoUHJlZml4ID0gZ2V0RnVsbFBhdGgodXJpUmVzb2x2ZXIsIHNjaElkLCBmYWxzZSk7XG4gICAgY29uc3QgbG9jYWxSZWZzID0ge307XG4gICAgY29uc3Qgc2NoZW1hUmVmcyA9IG5ldyBTZXQoKTtcbiAgICB0cmF2ZXJzZShzY2hlbWEsIHsgYWxsS2V5czogdHJ1ZSB9LCAoc2NoLCBqc29uUHRyLCBfLCBwYXJlbnRKc29uUHRyKSA9PiB7XG4gICAgICAgIGlmIChwYXJlbnRKc29uUHRyID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gcGF0aFByZWZpeCArIGpzb25QdHI7XG4gICAgICAgIGxldCBpbm5lckJhc2VJZCA9IGJhc2VJZHNbcGFyZW50SnNvblB0cl07XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoW3NjaGVtYUlkXSA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgaW5uZXJCYXNlSWQgPSBhZGRSZWYuY2FsbCh0aGlzLCBzY2hbc2NoZW1hSWRdKTtcbiAgICAgICAgYWRkQW5jaG9yLmNhbGwodGhpcywgc2NoLiRhbmNob3IpO1xuICAgICAgICBhZGRBbmNob3IuY2FsbCh0aGlzLCBzY2guJGR5bmFtaWNBbmNob3IpO1xuICAgICAgICBiYXNlSWRzW2pzb25QdHJdID0gaW5uZXJCYXNlSWQ7XG4gICAgICAgIGZ1bmN0aW9uIGFkZFJlZihyZWYpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgICAgIGNvbnN0IF9yZXNvbHZlID0gdGhpcy5vcHRzLnVyaVJlc29sdmVyLnJlc29sdmU7XG4gICAgICAgICAgICByZWYgPSBub3JtYWxpemVJZChpbm5lckJhc2VJZCA/IF9yZXNvbHZlKGlubmVyQmFzZUlkLCByZWYpIDogcmVmKTtcbiAgICAgICAgICAgIGlmIChzY2hlbWFSZWZzLmhhcyhyZWYpKVxuICAgICAgICAgICAgICAgIHRocm93IGFtYmlndW9zKHJlZik7XG4gICAgICAgICAgICBzY2hlbWFSZWZzLmFkZChyZWYpO1xuICAgICAgICAgICAgbGV0IHNjaE9yUmVmID0gdGhpcy5yZWZzW3JlZl07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaE9yUmVmID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgc2NoT3JSZWYgPSB0aGlzLnJlZnNbc2NoT3JSZWZdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hPclJlZiA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tBbWJpZ3Vvc1JlZihzY2gsIHNjaE9yUmVmLnNjaGVtYSwgcmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlZiAhPT0gbm9ybWFsaXplSWQoZnVsbFBhdGgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlZlswXSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tBbWJpZ3Vvc1JlZihzY2gsIGxvY2FsUmVmc1tyZWZdLCByZWYpO1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFJlZnNbcmVmXSA9IHNjaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmc1tyZWZdID0gZnVsbFBhdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlZjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhZGRBbmNob3IoYW5jaG9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFuY2hvciA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBTkNIT1IudGVzdChhbmNob3IpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgYW5jaG9yIFwiJHthbmNob3J9XCJgKTtcbiAgICAgICAgICAgICAgICBhZGRSZWYuY2FsbCh0aGlzLCBgIyR7YW5jaG9yfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGxvY2FsUmVmcztcbiAgICBmdW5jdGlvbiBjaGVja0FtYmlndW9zUmVmKHNjaDEsIHNjaDIsIHJlZikge1xuICAgICAgICBpZiAoc2NoMiAhPT0gdW5kZWZpbmVkICYmICFlcXVhbChzY2gxLCBzY2gyKSlcbiAgICAgICAgICAgIHRocm93IGFtYmlndW9zKHJlZik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFtYmlndW9zKHJlZikge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKGByZWZlcmVuY2UgXCIke3JlZn1cIiByZXNvbHZlcyB0byBtb3JlIHRoYW4gb25lIHNjaGVtYWApO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0U2NoZW1hUmVmcyA9IGdldFNjaGVtYVJlZnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldERhdGEgPSBleHBvcnRzLktleXdvcmRDeHQgPSBleHBvcnRzLnZhbGlkYXRlRnVuY3Rpb25Db2RlID0gdm9pZCAwO1xuY29uc3QgYm9vbFNjaGVtYV8xID0gcmVxdWlyZShcIi4vYm9vbFNjaGVtYVwiKTtcbmNvbnN0IGRhdGFUeXBlXzEgPSByZXF1aXJlKFwiLi9kYXRhVHlwZVwiKTtcbmNvbnN0IGFwcGxpY2FiaWxpdHlfMSA9IHJlcXVpcmUoXCIuL2FwcGxpY2FiaWxpdHlcIik7XG5jb25zdCBkYXRhVHlwZV8yID0gcmVxdWlyZShcIi4vZGF0YVR5cGVcIik7XG5jb25zdCBkZWZhdWx0c18xID0gcmVxdWlyZShcIi4vZGVmYXVsdHNcIik7XG5jb25zdCBrZXl3b3JkXzEgPSByZXF1aXJlKFwiLi9rZXl3b3JkXCIpO1xuY29uc3Qgc3Vic2NoZW1hXzEgPSByZXF1aXJlKFwiLi9zdWJzY2hlbWFcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vY29kZWdlblwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi4vbmFtZXNcIik7XG5jb25zdCByZXNvbHZlXzEgPSByZXF1aXJlKFwiLi4vcmVzb2x2ZVwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuLy8gc2NoZW1hIGNvbXBpbGF0aW9uIC0gZ2VuZXJhdGVzIHZhbGlkYXRpb24gZnVuY3Rpb24sIHN1YnNjaGVtYUNvZGUgKGJlbG93KSBpcyB1c2VkIGZvciBzdWJzY2hlbWFzXG5mdW5jdGlvbiB2YWxpZGF0ZUZ1bmN0aW9uQ29kZShpdCkge1xuICAgIGlmIChpc1NjaGVtYU9iaihpdCkpIHtcbiAgICAgICAgY2hlY2tLZXl3b3JkcyhpdCk7XG4gICAgICAgIGlmIChzY2hlbWFDeHRIYXNSdWxlcyhpdCkpIHtcbiAgICAgICAgICAgIHRvcFNjaGVtYU9iakNvZGUoaXQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhbGlkYXRlRnVuY3Rpb24oaXQsICgpID0+ICgwLCBib29sU2NoZW1hXzEudG9wQm9vbE9yRW1wdHlTY2hlbWEpKGl0KSk7XG59XG5leHBvcnRzLnZhbGlkYXRlRnVuY3Rpb25Db2RlID0gdmFsaWRhdGVGdW5jdGlvbkNvZGU7XG5mdW5jdGlvbiB2YWxpZGF0ZUZ1bmN0aW9uKHsgZ2VuLCB2YWxpZGF0ZU5hbWUsIHNjaGVtYSwgc2NoZW1hRW52LCBvcHRzIH0sIGJvZHkpIHtcbiAgICBpZiAob3B0cy5jb2RlLmVzNSkge1xuICAgICAgICBnZW4uZnVuYyh2YWxpZGF0ZU5hbWUsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LmRhdGF9LCAke25hbWVzXzEuZGVmYXVsdC52YWxDeHR9YCwgc2NoZW1hRW52LiRhc3luYywgKCkgPT4ge1xuICAgICAgICAgICAgZ2VuLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgXCJ1c2Ugc3RyaWN0XCI7ICR7ZnVuY1NvdXJjZVVybChzY2hlbWEsIG9wdHMpfWApO1xuICAgICAgICAgICAgZGVzdHJ1Y3R1cmVWYWxDeHRFUzUoZ2VuLCBvcHRzKTtcbiAgICAgICAgICAgIGdlbi5jb2RlKGJvZHkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdlbi5mdW5jKHZhbGlkYXRlTmFtZSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQuZGF0YX0sICR7ZGVzdHJ1Y3R1cmVWYWxDeHQob3B0cyl9YCwgc2NoZW1hRW52LiRhc3luYywgKCkgPT4gZ2VuLmNvZGUoZnVuY1NvdXJjZVVybChzY2hlbWEsIG9wdHMpKS5jb2RlKGJvZHkpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXN0cnVjdHVyZVZhbEN4dChvcHRzKSB7XG4gICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYHske25hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGh9PVwiXCIsICR7bmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGF9LCAke25hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhUHJvcGVydHl9LCAke25hbWVzXzEuZGVmYXVsdC5yb290RGF0YX09JHtuYW1lc18xLmRlZmF1bHQuZGF0YX0ke29wdHMuZHluYW1pY1JlZiA/ICgwLCBjb2RlZ2VuXzEuXykgYCwgJHtuYW1lc18xLmRlZmF1bHQuZHluYW1pY0FuY2hvcnN9PXt9YCA6IGNvZGVnZW5fMS5uaWx9fT17fWA7XG59XG5mdW5jdGlvbiBkZXN0cnVjdHVyZVZhbEN4dEVTNShnZW4sIG9wdHMpIHtcbiAgICBnZW4uaWYobmFtZXNfMS5kZWZhdWx0LnZhbEN4dCwgKCkgPT4ge1xuICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGgsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZhbEN4dH0uJHtuYW1lc18xLmRlZmF1bHQuaW5zdGFuY2VQYXRofWApO1xuICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52YWxDeHR9LiR7bmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGF9YCk7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGFQcm9wZXJ0eSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudmFsQ3h0fS4ke25hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhUHJvcGVydHl9YCk7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LnJvb3REYXRhLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52YWxDeHR9LiR7bmFtZXNfMS5kZWZhdWx0LnJvb3REYXRhfWApO1xuICAgICAgICBpZiAob3B0cy5keW5hbWljUmVmKVxuICAgICAgICAgICAgZ2VuLnZhcihuYW1lc18xLmRlZmF1bHQuZHluYW1pY0FuY2hvcnMsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZhbEN4dH0uJHtuYW1lc18xLmRlZmF1bHQuZHluYW1pY0FuY2hvcnN9YCk7XG4gICAgfSwgKCkgPT4ge1xuICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGgsICgwLCBjb2RlZ2VuXzEuXykgYFwiXCJgKTtcbiAgICAgICAgZ2VuLnZhcihuYW1lc18xLmRlZmF1bHQucGFyZW50RGF0YSwgKDAsIGNvZGVnZW5fMS5fKSBgdW5kZWZpbmVkYCk7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGFQcm9wZXJ0eSwgKDAsIGNvZGVnZW5fMS5fKSBgdW5kZWZpbmVkYCk7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LnJvb3REYXRhLCBuYW1lc18xLmRlZmF1bHQuZGF0YSk7XG4gICAgICAgIGlmIChvcHRzLmR5bmFtaWNSZWYpXG4gICAgICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5keW5hbWljQW5jaG9ycywgKDAsIGNvZGVnZW5fMS5fKSBge31gKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvcFNjaGVtYU9iakNvZGUoaXQpIHtcbiAgICBjb25zdCB7IHNjaGVtYSwgb3B0cywgZ2VuIH0gPSBpdDtcbiAgICB2YWxpZGF0ZUZ1bmN0aW9uKGl0LCAoKSA9PiB7XG4gICAgICAgIGlmIChvcHRzLiRjb21tZW50ICYmIHNjaGVtYS4kY29tbWVudClcbiAgICAgICAgICAgIGNvbW1lbnRLZXl3b3JkKGl0KTtcbiAgICAgICAgY2hlY2tOb0RlZmF1bHQoaXQpO1xuICAgICAgICBnZW4ubGV0KG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCBudWxsKTtcbiAgICAgICAgZ2VuLmxldChuYW1lc18xLmRlZmF1bHQuZXJyb3JzLCAwKTtcbiAgICAgICAgaWYgKG9wdHMudW5ldmFsdWF0ZWQpXG4gICAgICAgICAgICByZXNldEV2YWx1YXRlZChpdCk7XG4gICAgICAgIHR5cGVBbmRLZXl3b3JkcyhpdCk7XG4gICAgICAgIHJldHVyblJlc3VsdHMoaXQpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbn1cbmZ1bmN0aW9uIHJlc2V0RXZhbHVhdGVkKGl0KSB7XG4gICAgLy8gVE9ETyBtYXliZSBzb21lIGhvb2sgdG8gZXhlY3V0ZSBpdCBpbiB0aGUgZW5kIHRvIGNoZWNrIHdoZXRoZXIgcHJvcHMvaXRlbXMgYXJlIE5hbWUsIGFzIGluIGFzc2lnbkV2YWx1YXRlZFxuICAgIGNvbnN0IHsgZ2VuLCB2YWxpZGF0ZU5hbWUgfSA9IGl0O1xuICAgIGl0LmV2YWx1YXRlZCA9IGdlbi5jb25zdChcImV2YWx1YXRlZFwiLCAoMCwgY29kZWdlbl8xLl8pIGAke3ZhbGlkYXRlTmFtZX0uZXZhbHVhdGVkYCk7XG4gICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7aXQuZXZhbHVhdGVkfS5keW5hbWljUHJvcHNgLCAoKSA9PiBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7aXQuZXZhbHVhdGVkfS5wcm9wc2AsICgwLCBjb2RlZ2VuXzEuXykgYHVuZGVmaW5lZGApKTtcbiAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5ldmFsdWF0ZWR9LmR5bmFtaWNJdGVtc2AsICgpID0+IGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5ldmFsdWF0ZWR9Lml0ZW1zYCwgKDAsIGNvZGVnZW5fMS5fKSBgdW5kZWZpbmVkYCkpO1xufVxuZnVuY3Rpb24gZnVuY1NvdXJjZVVybChzY2hlbWEsIG9wdHMpIHtcbiAgICBjb25zdCBzY2hJZCA9IHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIiAmJiBzY2hlbWFbb3B0cy5zY2hlbWFJZF07XG4gICAgcmV0dXJuIHNjaElkICYmIChvcHRzLmNvZGUuc291cmNlIHx8IG9wdHMuY29kZS5wcm9jZXNzKSA/ICgwLCBjb2RlZ2VuXzEuXykgYC8qIyBzb3VyY2VVUkw9JHtzY2hJZH0gKi9gIDogY29kZWdlbl8xLm5pbDtcbn1cbi8vIHNjaGVtYSBjb21waWxhdGlvbiAtIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCByZWN1cnNpdmVseSB0byBnZW5lcmF0ZSBjb2RlIGZvciBzdWItc2NoZW1hc1xuZnVuY3Rpb24gc3Vic2NoZW1hQ29kZShpdCwgdmFsaWQpIHtcbiAgICBpZiAoaXNTY2hlbWFPYmooaXQpKSB7XG4gICAgICAgIGNoZWNrS2V5d29yZHMoaXQpO1xuICAgICAgICBpZiAoc2NoZW1hQ3h0SGFzUnVsZXMoaXQpKSB7XG4gICAgICAgICAgICBzdWJTY2hlbWFPYmpDb2RlKGl0LCB2YWxpZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgKDAsIGJvb2xTY2hlbWFfMS5ib29sT3JFbXB0eVNjaGVtYSkoaXQsIHZhbGlkKTtcbn1cbmZ1bmN0aW9uIHNjaGVtYUN4dEhhc1J1bGVzKHsgc2NoZW1hLCBzZWxmIH0pIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcImJvb2xlYW5cIilcbiAgICAgICAgcmV0dXJuICFzY2hlbWE7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hKVxuICAgICAgICBpZiAoc2VsZi5SVUxFUy5hbGxba2V5XSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzU2NoZW1hT2JqKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdC5zY2hlbWEgIT0gXCJib29sZWFuXCI7XG59XG5mdW5jdGlvbiBzdWJTY2hlbWFPYmpDb2RlKGl0LCB2YWxpZCkge1xuICAgIGNvbnN0IHsgc2NoZW1hLCBnZW4sIG9wdHMgfSA9IGl0O1xuICAgIGlmIChvcHRzLiRjb21tZW50ICYmIHNjaGVtYS4kY29tbWVudClcbiAgICAgICAgY29tbWVudEtleXdvcmQoaXQpO1xuICAgIHVwZGF0ZUNvbnRleHQoaXQpO1xuICAgIGNoZWNrQXN5bmNTY2hlbWEoaXQpO1xuICAgIGNvbnN0IGVycnNDb3VudCA9IGdlbi5jb25zdChcIl9lcnJzXCIsIG5hbWVzXzEuZGVmYXVsdC5lcnJvcnMpO1xuICAgIHR5cGVBbmRLZXl3b3JkcyhpdCwgZXJyc0NvdW50KTtcbiAgICAvLyBUT0RPIHZhclxuICAgIGdlbi52YXIodmFsaWQsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZXJyc0NvdW50fSA9PT0gJHtuYW1lc18xLmRlZmF1bHQuZXJyb3JzfWApO1xufVxuZnVuY3Rpb24gY2hlY2tLZXl3b3JkcyhpdCkge1xuICAgICgwLCB1dGlsXzEuY2hlY2tVbmtub3duUnVsZXMpKGl0KTtcbiAgICBjaGVja1JlZnNBbmRLZXl3b3JkcyhpdCk7XG59XG5mdW5jdGlvbiB0eXBlQW5kS2V5d29yZHMoaXQsIGVycnNDb3VudCkge1xuICAgIGlmIChpdC5vcHRzLmp0ZClcbiAgICAgICAgcmV0dXJuIHNjaGVtYUtleXdvcmRzKGl0LCBbXSwgZmFsc2UsIGVycnNDb3VudCk7XG4gICAgY29uc3QgdHlwZXMgPSAoMCwgZGF0YVR5cGVfMS5nZXRTY2hlbWFUeXBlcykoaXQuc2NoZW1hKTtcbiAgICBjb25zdCBjaGVja2VkVHlwZXMgPSAoMCwgZGF0YVR5cGVfMS5jb2VyY2VBbmRDaGVja0RhdGFUeXBlKShpdCwgdHlwZXMpO1xuICAgIHNjaGVtYUtleXdvcmRzKGl0LCB0eXBlcywgIWNoZWNrZWRUeXBlcywgZXJyc0NvdW50KTtcbn1cbmZ1bmN0aW9uIGNoZWNrUmVmc0FuZEtleXdvcmRzKGl0KSB7XG4gICAgY29uc3QgeyBzY2hlbWEsIGVyclNjaGVtYVBhdGgsIG9wdHMsIHNlbGYgfSA9IGl0O1xuICAgIGlmIChzY2hlbWEuJHJlZiAmJiBvcHRzLmlnbm9yZUtleXdvcmRzV2l0aFJlZiAmJiAoMCwgdXRpbF8xLnNjaGVtYUhhc1J1bGVzQnV0UmVmKShzY2hlbWEsIHNlbGYuUlVMRVMpKSB7XG4gICAgICAgIHNlbGYubG9nZ2VyLndhcm4oYCRyZWY6IGtleXdvcmRzIGlnbm9yZWQgaW4gc2NoZW1hIGF0IHBhdGggXCIke2VyclNjaGVtYVBhdGh9XCJgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja05vRGVmYXVsdChpdCkge1xuICAgIGNvbnN0IHsgc2NoZW1hLCBvcHRzIH0gPSBpdDtcbiAgICBpZiAoc2NoZW1hLmRlZmF1bHQgIT09IHVuZGVmaW5lZCAmJiBvcHRzLnVzZURlZmF1bHRzICYmIG9wdHMuc3RyaWN0U2NoZW1hKSB7XG4gICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgXCJkZWZhdWx0IGlzIGlnbm9yZWQgaW4gdGhlIHNjaGVtYSByb290XCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbnRleHQoaXQpIHtcbiAgICBjb25zdCBzY2hJZCA9IGl0LnNjaGVtYVtpdC5vcHRzLnNjaGVtYUlkXTtcbiAgICBpZiAoc2NoSWQpXG4gICAgICAgIGl0LmJhc2VJZCA9ICgwLCByZXNvbHZlXzEucmVzb2x2ZVVybCkoaXQub3B0cy51cmlSZXNvbHZlciwgaXQuYmFzZUlkLCBzY2hJZCk7XG59XG5mdW5jdGlvbiBjaGVja0FzeW5jU2NoZW1hKGl0KSB7XG4gICAgaWYgKGl0LnNjaGVtYS4kYXN5bmMgJiYgIWl0LnNjaGVtYUVudi4kYXN5bmMpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFzeW5jIHNjaGVtYSBpbiBzeW5jIHNjaGVtYVwiKTtcbn1cbmZ1bmN0aW9uIGNvbW1lbnRLZXl3b3JkKHsgZ2VuLCBzY2hlbWFFbnYsIHNjaGVtYSwgZXJyU2NoZW1hUGF0aCwgb3B0cyB9KSB7XG4gICAgY29uc3QgbXNnID0gc2NoZW1hLiRjb21tZW50O1xuICAgIGlmIChvcHRzLiRjb21tZW50ID09PSB0cnVlKSB7XG4gICAgICAgIGdlbi5jb2RlKCgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnNlbGZ9LmxvZ2dlci5sb2coJHttc2d9KWApO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygb3B0cy4kY29tbWVudCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY29uc3Qgc2NoZW1hUGF0aCA9ICgwLCBjb2RlZ2VuXzEuc3RyKSBgJHtlcnJTY2hlbWFQYXRofS8kY29tbWVudGA7XG4gICAgICAgIGNvbnN0IHJvb3ROYW1lID0gZ2VuLnNjb3BlVmFsdWUoXCJyb290XCIsIHsgcmVmOiBzY2hlbWFFbnYucm9vdCB9KTtcbiAgICAgICAgZ2VuLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQuc2VsZn0ub3B0cy4kY29tbWVudCgke21zZ30sICR7c2NoZW1hUGF0aH0sICR7cm9vdE5hbWV9LnNjaGVtYSlgKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXR1cm5SZXN1bHRzKGl0KSB7XG4gICAgY29uc3QgeyBnZW4sIHNjaGVtYUVudiwgdmFsaWRhdGVOYW1lLCBWYWxpZGF0aW9uRXJyb3IsIG9wdHMgfSA9IGl0O1xuICAgIGlmIChzY2hlbWFFbnYuJGFzeW5jKSB7XG4gICAgICAgIC8vIFRPRE8gYXNzaWduIHVuZXZhbHVhdGVkXG4gICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC5lcnJvcnN9ID09PSAwYCwgKCkgPT4gZ2VuLnJldHVybihuYW1lc18xLmRlZmF1bHQuZGF0YSksICgpID0+IGdlbi50aHJvdygoMCwgY29kZWdlbl8xLl8pIGBuZXcgJHtWYWxpZGF0aW9uRXJyb3J9KCR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9KWApKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHt2YWxpZGF0ZU5hbWV9LmVycm9yc2AsIG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzKTtcbiAgICAgICAgaWYgKG9wdHMudW5ldmFsdWF0ZWQpXG4gICAgICAgICAgICBhc3NpZ25FdmFsdWF0ZWQoaXQpO1xuICAgICAgICBnZW4ucmV0dXJuKCgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LmVycm9yc30gPT09IDBgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NpZ25FdmFsdWF0ZWQoeyBnZW4sIGV2YWx1YXRlZCwgcHJvcHMsIGl0ZW1zIH0pIHtcbiAgICBpZiAocHJvcHMgaW5zdGFuY2VvZiBjb2RlZ2VuXzEuTmFtZSlcbiAgICAgICAgZ2VuLmFzc2lnbigoMCwgY29kZWdlbl8xLl8pIGAke2V2YWx1YXRlZH0ucHJvcHNgLCBwcm9wcyk7XG4gICAgaWYgKGl0ZW1zIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUpXG4gICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtldmFsdWF0ZWR9Lml0ZW1zYCwgaXRlbXMpO1xufVxuZnVuY3Rpb24gc2NoZW1hS2V5d29yZHMoaXQsIHR5cGVzLCB0eXBlRXJyb3JzLCBlcnJzQ291bnQpIHtcbiAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBkYXRhLCBhbGxFcnJvcnMsIG9wdHMsIHNlbGYgfSA9IGl0O1xuICAgIGNvbnN0IHsgUlVMRVMgfSA9IHNlbGY7XG4gICAgaWYgKHNjaGVtYS4kcmVmICYmIChvcHRzLmlnbm9yZUtleXdvcmRzV2l0aFJlZiB8fCAhKDAsIHV0aWxfMS5zY2hlbWFIYXNSdWxlc0J1dFJlZikoc2NoZW1hLCBSVUxFUykpKSB7XG4gICAgICAgIGdlbi5ibG9jaygoKSA9PiBrZXl3b3JkQ29kZShpdCwgXCIkcmVmXCIsIFJVTEVTLmFsbC4kcmVmLmRlZmluaXRpb24pKTsgLy8gVE9ETyB0eXBlY2FzdFxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghb3B0cy5qdGQpXG4gICAgICAgIGNoZWNrU3RyaWN0VHlwZXMoaXQsIHR5cGVzKTtcbiAgICBnZW4uYmxvY2soKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIFJVTEVTLnJ1bGVzKVxuICAgICAgICAgICAgZ3JvdXBLZXl3b3Jkcyhncm91cCk7XG4gICAgICAgIGdyb3VwS2V5d29yZHMoUlVMRVMucG9zdCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZ3JvdXBLZXl3b3Jkcyhncm91cCkge1xuICAgICAgICBpZiAoISgwLCBhcHBsaWNhYmlsaXR5XzEuc2hvdWxkVXNlR3JvdXApKHNjaGVtYSwgZ3JvdXApKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoZ3JvdXAudHlwZSkge1xuICAgICAgICAgICAgZ2VuLmlmKCgwLCBkYXRhVHlwZV8yLmNoZWNrRGF0YVR5cGUpKGdyb3VwLnR5cGUsIGRhdGEsIG9wdHMuc3RyaWN0TnVtYmVycykpO1xuICAgICAgICAgICAgaXRlcmF0ZUtleXdvcmRzKGl0LCBncm91cCk7XG4gICAgICAgICAgICBpZiAodHlwZXMubGVuZ3RoID09PSAxICYmIHR5cGVzWzBdID09PSBncm91cC50eXBlICYmIHR5cGVFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBnZW4uZWxzZSgpO1xuICAgICAgICAgICAgICAgICgwLCBkYXRhVHlwZV8yLnJlcG9ydFR5cGVFcnJvcikoaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2VuLmVuZElmKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpdGVyYXRlS2V5d29yZHMoaXQsIGdyb3VwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPIG1ha2UgaXQgXCJva1wiIGNhbGw/XG4gICAgICAgIGlmICghYWxsRXJyb3JzKVxuICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LmVycm9yc30gPT09ICR7ZXJyc0NvdW50IHx8IDB9YCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXRlcmF0ZUtleXdvcmRzKGl0LCBncm91cCkge1xuICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIG9wdHM6IHsgdXNlRGVmYXVsdHMgfSwgfSA9IGl0O1xuICAgIGlmICh1c2VEZWZhdWx0cylcbiAgICAgICAgKDAsIGRlZmF1bHRzXzEuYXNzaWduRGVmYXVsdHMpKGl0LCBncm91cC50eXBlKTtcbiAgICBnZW4uYmxvY2soKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgZ3JvdXAucnVsZXMpIHtcbiAgICAgICAgICAgIGlmICgoMCwgYXBwbGljYWJpbGl0eV8xLnNob3VsZFVzZVJ1bGUpKHNjaGVtYSwgcnVsZSkpIHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkQ29kZShpdCwgcnVsZS5rZXl3b3JkLCBydWxlLmRlZmluaXRpb24sIGdyb3VwLnR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjaGVja1N0cmljdFR5cGVzKGl0LCB0eXBlcykge1xuICAgIGlmIChpdC5zY2hlbWFFbnYubWV0YSB8fCAhaXQub3B0cy5zdHJpY3RUeXBlcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGNoZWNrQ29udGV4dFR5cGVzKGl0LCB0eXBlcyk7XG4gICAgaWYgKCFpdC5vcHRzLmFsbG93VW5pb25UeXBlcylcbiAgICAgICAgY2hlY2tNdWx0aXBsZVR5cGVzKGl0LCB0eXBlcyk7XG4gICAgY2hlY2tLZXl3b3JkVHlwZXMoaXQsIGl0LmRhdGFUeXBlcyk7XG59XG5mdW5jdGlvbiBjaGVja0NvbnRleHRUeXBlcyhpdCwgdHlwZXMpIHtcbiAgICBpZiAoIXR5cGVzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICghaXQuZGF0YVR5cGVzLmxlbmd0aCkge1xuICAgICAgICBpdC5kYXRhVHlwZXMgPSB0eXBlcztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0eXBlcy5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgIGlmICghaW5jbHVkZXNUeXBlKGl0LmRhdGFUeXBlcywgdCkpIHtcbiAgICAgICAgICAgIHN0cmljdFR5cGVzRXJyb3IoaXQsIGB0eXBlIFwiJHt0fVwiIG5vdCBhbGxvd2VkIGJ5IGNvbnRleHQgXCIke2l0LmRhdGFUeXBlcy5qb2luKFwiLFwiKX1cImApO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbmFycm93U2NoZW1hVHlwZXMoaXQsIHR5cGVzKTtcbn1cbmZ1bmN0aW9uIGNoZWNrTXVsdGlwbGVUeXBlcyhpdCwgdHMpIHtcbiAgICBpZiAodHMubGVuZ3RoID4gMSAmJiAhKHRzLmxlbmd0aCA9PT0gMiAmJiB0cy5pbmNsdWRlcyhcIm51bGxcIikpKSB7XG4gICAgICAgIHN0cmljdFR5cGVzRXJyb3IoaXQsIFwidXNlIGFsbG93VW5pb25UeXBlcyB0byBhbGxvdyB1bmlvbiB0eXBlIGtleXdvcmRcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tLZXl3b3JkVHlwZXMoaXQsIHRzKSB7XG4gICAgY29uc3QgcnVsZXMgPSBpdC5zZWxmLlJVTEVTLmFsbDtcbiAgICBmb3IgKGNvbnN0IGtleXdvcmQgaW4gcnVsZXMpIHtcbiAgICAgICAgY29uc3QgcnVsZSA9IHJ1bGVzW2tleXdvcmRdO1xuICAgICAgICBpZiAodHlwZW9mIHJ1bGUgPT0gXCJvYmplY3RcIiAmJiAoMCwgYXBwbGljYWJpbGl0eV8xLnNob3VsZFVzZVJ1bGUpKGl0LnNjaGVtYSwgcnVsZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdHlwZSB9ID0gcnVsZS5kZWZpbml0aW9uO1xuICAgICAgICAgICAgaWYgKHR5cGUubGVuZ3RoICYmICF0eXBlLnNvbWUoKHQpID0+IGhhc0FwcGxpY2FibGVUeXBlKHRzLCB0KSkpIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RUeXBlc0Vycm9yKGl0LCBgbWlzc2luZyB0eXBlIFwiJHt0eXBlLmpvaW4oXCIsXCIpfVwiIGZvciBrZXl3b3JkIFwiJHtrZXl3b3JkfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBoYXNBcHBsaWNhYmxlVHlwZShzY2hUcywga3dkVCkge1xuICAgIHJldHVybiBzY2hUcy5pbmNsdWRlcyhrd2RUKSB8fCAoa3dkVCA9PT0gXCJudW1iZXJcIiAmJiBzY2hUcy5pbmNsdWRlcyhcImludGVnZXJcIikpO1xufVxuZnVuY3Rpb24gaW5jbHVkZXNUeXBlKHRzLCB0KSB7XG4gICAgcmV0dXJuIHRzLmluY2x1ZGVzKHQpIHx8ICh0ID09PSBcImludGVnZXJcIiAmJiB0cy5pbmNsdWRlcyhcIm51bWJlclwiKSk7XG59XG5mdW5jdGlvbiBuYXJyb3dTY2hlbWFUeXBlcyhpdCwgd2l0aFR5cGVzKSB7XG4gICAgY29uc3QgdHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHQgb2YgaXQuZGF0YVR5cGVzKSB7XG4gICAgICAgIGlmIChpbmNsdWRlc1R5cGUod2l0aFR5cGVzLCB0KSlcbiAgICAgICAgICAgIHRzLnB1c2godCk7XG4gICAgICAgIGVsc2UgaWYgKHdpdGhUeXBlcy5pbmNsdWRlcyhcImludGVnZXJcIikgJiYgdCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRzLnB1c2goXCJpbnRlZ2VyXCIpO1xuICAgIH1cbiAgICBpdC5kYXRhVHlwZXMgPSB0cztcbn1cbmZ1bmN0aW9uIHN0cmljdFR5cGVzRXJyb3IoaXQsIG1zZykge1xuICAgIGNvbnN0IHNjaGVtYVBhdGggPSBpdC5zY2hlbWFFbnYuYmFzZUlkICsgaXQuZXJyU2NoZW1hUGF0aDtcbiAgICBtc2cgKz0gYCBhdCBcIiR7c2NoZW1hUGF0aH1cIiAoc3RyaWN0VHlwZXMpYDtcbiAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIG1zZywgaXQub3B0cy5zdHJpY3RUeXBlcyk7XG59XG5jbGFzcyBLZXl3b3JkQ3h0IHtcbiAgICBjb25zdHJ1Y3RvcihpdCwgZGVmLCBrZXl3b3JkKSB7XG4gICAgICAgICgwLCBrZXl3b3JkXzEudmFsaWRhdGVLZXl3b3JkVXNhZ2UpKGl0LCBkZWYsIGtleXdvcmQpO1xuICAgICAgICB0aGlzLmdlbiA9IGl0LmdlbjtcbiAgICAgICAgdGhpcy5hbGxFcnJvcnMgPSBpdC5hbGxFcnJvcnM7XG4gICAgICAgIHRoaXMua2V5d29yZCA9IGtleXdvcmQ7XG4gICAgICAgIHRoaXMuZGF0YSA9IGl0LmRhdGE7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gaXQuc2NoZW1hW2tleXdvcmRdO1xuICAgICAgICB0aGlzLiRkYXRhID0gZGVmLiRkYXRhICYmIGl0Lm9wdHMuJGRhdGEgJiYgdGhpcy5zY2hlbWEgJiYgdGhpcy5zY2hlbWEuJGRhdGE7XG4gICAgICAgIHRoaXMuc2NoZW1hVmFsdWUgPSAoMCwgdXRpbF8xLnNjaGVtYVJlZk9yVmFsKShpdCwgdGhpcy5zY2hlbWEsIGtleXdvcmQsIHRoaXMuJGRhdGEpO1xuICAgICAgICB0aGlzLnNjaGVtYVR5cGUgPSBkZWYuc2NoZW1hVHlwZTtcbiAgICAgICAgdGhpcy5wYXJlbnRTY2hlbWEgPSBpdC5zY2hlbWE7XG4gICAgICAgIHRoaXMucGFyYW1zID0ge307XG4gICAgICAgIHRoaXMuaXQgPSBpdDtcbiAgICAgICAgdGhpcy5kZWYgPSBkZWY7XG4gICAgICAgIGlmICh0aGlzLiRkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYUNvZGUgPSBpdC5nZW4uY29uc3QoXCJ2U2NoZW1hXCIsIGdldERhdGEodGhpcy4kZGF0YSwgaXQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hQ29kZSA9IHRoaXMuc2NoZW1hVmFsdWU7XG4gICAgICAgICAgICBpZiAoISgwLCBrZXl3b3JkXzEudmFsaWRTY2hlbWFUeXBlKSh0aGlzLnNjaGVtYSwgZGVmLnNjaGVtYVR5cGUsIGRlZi5hbGxvd1VuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7a2V5d29yZH0gdmFsdWUgbXVzdCBiZSAke0pTT04uc3RyaW5naWZ5KGRlZi5zY2hlbWFUeXBlKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJjb2RlXCIgaW4gZGVmID8gZGVmLnRyYWNrRXJyb3JzIDogZGVmLmVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyc0NvdW50ID0gaXQuZ2VuLmNvbnN0KFwiX2VycnNcIiwgbmFtZXNfMS5kZWZhdWx0LmVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0KGNvbmRpdGlvbiwgc3VjY2Vzc0FjdGlvbiwgZmFpbEFjdGlvbikge1xuICAgICAgICB0aGlzLmZhaWxSZXN1bHQoKDAsIGNvZGVnZW5fMS5ub3QpKGNvbmRpdGlvbiksIHN1Y2Nlc3NBY3Rpb24sIGZhaWxBY3Rpb24pO1xuICAgIH1cbiAgICBmYWlsUmVzdWx0KGNvbmRpdGlvbiwgc3VjY2Vzc0FjdGlvbiwgZmFpbEFjdGlvbikge1xuICAgICAgICB0aGlzLmdlbi5pZihjb25kaXRpb24pO1xuICAgICAgICBpZiAoZmFpbEFjdGlvbilcbiAgICAgICAgICAgIGZhaWxBY3Rpb24oKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5lcnJvcigpO1xuICAgICAgICBpZiAoc3VjY2Vzc0FjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5nZW4uZWxzZSgpO1xuICAgICAgICAgICAgc3VjY2Vzc0FjdGlvbigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWxsRXJyb3JzKVxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuLmVuZElmKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgdGhpcy5nZW4uZW5kSWYoKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmdlbi5lbHNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFzcyhjb25kaXRpb24sIGZhaWxBY3Rpb24pIHtcbiAgICAgICAgdGhpcy5mYWlsUmVzdWx0KCgwLCBjb2RlZ2VuXzEubm90KShjb25kaXRpb24pLCB1bmRlZmluZWQsIGZhaWxBY3Rpb24pO1xuICAgIH1cbiAgICBmYWlsKGNvbmRpdGlvbikge1xuICAgICAgICBpZiAoY29uZGl0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgdGhpcy5nZW4uaWYoZmFsc2UpOyAvLyB0aGlzIGJyYW5jaCB3aWxsIGJlIHJlbW92ZWQgYnkgZ2VuLm9wdGltaXplXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZW4uaWYoY29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy5lcnJvcigpO1xuICAgICAgICBpZiAodGhpcy5hbGxFcnJvcnMpXG4gICAgICAgICAgICB0aGlzLmdlbi5lbmRJZigpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmdlbi5lbHNlKCk7XG4gICAgfVxuICAgIGZhaWwkZGF0YShjb25kaXRpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLiRkYXRhKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbChjb25kaXRpb24pO1xuICAgICAgICBjb25zdCB7IHNjaGVtYUNvZGUgfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuZmFpbCgoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYUNvZGV9ICE9PSB1bmRlZmluZWQgJiYgKCR7KDAsIGNvZGVnZW5fMS5vcikodGhpcy5pbnZhbGlkJGRhdGEoKSwgY29uZGl0aW9uKX0pYCk7XG4gICAgfVxuICAgIGVycm9yKGFwcGVuZCwgZXJyb3JQYXJhbXMsIGVycm9yUGF0aHMpIHtcbiAgICAgICAgaWYgKGVycm9yUGFyYW1zKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBhcmFtcyhlcnJvclBhcmFtcyk7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihhcHBlbmQsIGVycm9yUGF0aHMpO1xuICAgICAgICAgICAgdGhpcy5zZXRQYXJhbXMoe30pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Vycm9yKGFwcGVuZCwgZXJyb3JQYXRocyk7XG4gICAgfVxuICAgIF9lcnJvcihhcHBlbmQsIGVycm9yUGF0aHMpIHtcbiAgICAgICAgO1xuICAgICAgICAoYXBwZW5kID8gZXJyb3JzXzEucmVwb3J0RXh0cmFFcnJvciA6IGVycm9yc18xLnJlcG9ydEVycm9yKSh0aGlzLCB0aGlzLmRlZi5lcnJvciwgZXJyb3JQYXRocyk7XG4gICAgfVxuICAgICRkYXRhRXJyb3IoKSB7XG4gICAgICAgICgwLCBlcnJvcnNfMS5yZXBvcnRFcnJvcikodGhpcywgdGhpcy5kZWYuJGRhdGFFcnJvciB8fCBlcnJvcnNfMS5rZXl3b3JkJERhdGFFcnJvcik7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICBpZiAodGhpcy5lcnJzQ291bnQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWRkIFwidHJhY2tFcnJvcnNcIiB0byBrZXl3b3JkIGRlZmluaXRpb24nKTtcbiAgICAgICAgKDAsIGVycm9yc18xLnJlc2V0RXJyb3JzQ291bnQpKHRoaXMuZ2VuLCB0aGlzLmVycnNDb3VudCk7XG4gICAgfVxuICAgIG9rKGNvbmQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFsbEVycm9ycylcbiAgICAgICAgICAgIHRoaXMuZ2VuLmlmKGNvbmQpO1xuICAgIH1cbiAgICBzZXRQYXJhbXMob2JqLCBhc3NpZ24pIHtcbiAgICAgICAgaWYgKGFzc2lnbilcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5wYXJhbXMsIG9iaik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMucGFyYW1zID0gb2JqO1xuICAgIH1cbiAgICBibG9jayRkYXRhKHZhbGlkLCBjb2RlQmxvY2ssICRkYXRhVmFsaWQgPSBjb2RlZ2VuXzEubmlsKSB7XG4gICAgICAgIHRoaXMuZ2VuLmJsb2NrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2skZGF0YSh2YWxpZCwgJGRhdGFWYWxpZCk7XG4gICAgICAgICAgICBjb2RlQmxvY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNoZWNrJGRhdGEodmFsaWQgPSBjb2RlZ2VuXzEubmlsLCAkZGF0YVZhbGlkID0gY29kZWdlbl8xLm5pbCkge1xuICAgICAgICBpZiAoIXRoaXMuJGRhdGEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWFDb2RlLCBzY2hlbWFUeXBlLCBkZWYgfSA9IHRoaXM7XG4gICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm9yKSgoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYUNvZGV9ID09PSB1bmRlZmluZWRgLCAkZGF0YVZhbGlkKSk7XG4gICAgICAgIGlmICh2YWxpZCAhPT0gY29kZWdlbl8xLm5pbClcbiAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIHRydWUpO1xuICAgICAgICBpZiAoc2NoZW1hVHlwZS5sZW5ndGggfHwgZGVmLnZhbGlkYXRlU2NoZW1hKSB7XG4gICAgICAgICAgICBnZW4uZWxzZUlmKHRoaXMuaW52YWxpZCRkYXRhKCkpO1xuICAgICAgICAgICAgdGhpcy4kZGF0YUVycm9yKCk7XG4gICAgICAgICAgICBpZiAodmFsaWQgIT09IGNvZGVnZW5fMS5uaWwpXG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGdlbi5lbHNlKCk7XG4gICAgfVxuICAgIGludmFsaWQkZGF0YSgpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYUNvZGUsIHNjaGVtYVR5cGUsIGRlZiwgaXQgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLm9yKSh3cm9uZyREYXRhVHlwZSgpLCBpbnZhbGlkJERhdGFTY2hlbWEoKSk7XG4gICAgICAgIGZ1bmN0aW9uIHdyb25nJERhdGFUeXBlKCkge1xuICAgICAgICAgICAgaWYgKHNjaGVtYVR5cGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKCEoc2NoZW1hQ29kZSBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ID0gQXJyYXkuaXNBcnJheShzY2hlbWFUeXBlKSA/IHNjaGVtYVR5cGUgOiBbc2NoZW1hVHlwZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7KDAsIGRhdGFUeXBlXzIuY2hlY2tEYXRhVHlwZXMpKHN0LCBzY2hlbWFDb2RlLCBpdC5vcHRzLnN0cmljdE51bWJlcnMsIGRhdGFUeXBlXzIuRGF0YVR5cGUuV3JvbmcpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29kZWdlbl8xLm5pbDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpbnZhbGlkJERhdGFTY2hlbWEoKSB7XG4gICAgICAgICAgICBpZiAoZGVmLnZhbGlkYXRlU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGVTY2hlbWFSZWYgPSBnZW4uc2NvcGVWYWx1ZShcInZhbGlkYXRlJGRhdGFcIiwgeyByZWY6IGRlZi52YWxpZGF0ZVNjaGVtYSB9KTsgLy8gVE9ETyB2YWx1ZS5jb2RlIGZvciBzdGFuZGFsb25lXG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCEke3ZhbGlkYXRlU2NoZW1hUmVmfSgke3NjaGVtYUNvZGV9KWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29kZWdlbl8xLm5pbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdWJzY2hlbWEoYXBwbCwgdmFsaWQpIHtcbiAgICAgICAgY29uc3Qgc3Vic2NoZW1hID0gKDAsIHN1YnNjaGVtYV8xLmdldFN1YnNjaGVtYSkodGhpcy5pdCwgYXBwbCk7XG4gICAgICAgICgwLCBzdWJzY2hlbWFfMS5leHRlbmRTdWJzY2hlbWFEYXRhKShzdWJzY2hlbWEsIHRoaXMuaXQsIGFwcGwpO1xuICAgICAgICAoMCwgc3Vic2NoZW1hXzEuZXh0ZW5kU3Vic2NoZW1hTW9kZSkoc3Vic2NoZW1hLCBhcHBsKTtcbiAgICAgICAgY29uc3QgbmV4dENvbnRleHQgPSB7IC4uLnRoaXMuaXQsIC4uLnN1YnNjaGVtYSwgaXRlbXM6IHVuZGVmaW5lZCwgcHJvcHM6IHVuZGVmaW5lZCB9O1xuICAgICAgICBzdWJzY2hlbWFDb2RlKG5leHRDb250ZXh0LCB2YWxpZCk7XG4gICAgICAgIHJldHVybiBuZXh0Q29udGV4dDtcbiAgICB9XG4gICAgbWVyZ2VFdmFsdWF0ZWQoc2NoZW1hQ3h0LCB0b05hbWUpIHtcbiAgICAgICAgY29uc3QgeyBpdCwgZ2VuIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWl0Lm9wdHMudW5ldmFsdWF0ZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChpdC5wcm9wcyAhPT0gdHJ1ZSAmJiBzY2hlbWFDeHQucHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaXQucHJvcHMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQucHJvcHMoZ2VuLCBzY2hlbWFDeHQucHJvcHMsIGl0LnByb3BzLCB0b05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdC5pdGVtcyAhPT0gdHJ1ZSAmJiBzY2hlbWFDeHQuaXRlbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaXQuaXRlbXMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQuaXRlbXMoZ2VuLCBzY2hlbWFDeHQuaXRlbXMsIGl0Lml0ZW1zLCB0b05hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1lcmdlVmFsaWRFdmFsdWF0ZWQoc2NoZW1hQ3h0LCB2YWxpZCkge1xuICAgICAgICBjb25zdCB7IGl0LCBnZW4gfSA9IHRoaXM7XG4gICAgICAgIGlmIChpdC5vcHRzLnVuZXZhbHVhdGVkICYmIChpdC5wcm9wcyAhPT0gdHJ1ZSB8fCBpdC5pdGVtcyAhPT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgIGdlbi5pZih2YWxpZCwgKCkgPT4gdGhpcy5tZXJnZUV2YWx1YXRlZChzY2hlbWFDeHQsIGNvZGVnZW5fMS5OYW1lKSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuS2V5d29yZEN4dCA9IEtleXdvcmRDeHQ7XG5mdW5jdGlvbiBrZXl3b3JkQ29kZShpdCwga2V5d29yZCwgZGVmLCBydWxlVHlwZSkge1xuICAgIGNvbnN0IGN4dCA9IG5ldyBLZXl3b3JkQ3h0KGl0LCBkZWYsIGtleXdvcmQpO1xuICAgIGlmIChcImNvZGVcIiBpbiBkZWYpIHtcbiAgICAgICAgZGVmLmNvZGUoY3h0LCBydWxlVHlwZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGN4dC4kZGF0YSAmJiBkZWYudmFsaWRhdGUpIHtcbiAgICAgICAgKDAsIGtleXdvcmRfMS5mdW5jS2V5d29yZENvZGUpKGN4dCwgZGVmKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoXCJtYWNyb1wiIGluIGRlZikge1xuICAgICAgICAoMCwga2V5d29yZF8xLm1hY3JvS2V5d29yZENvZGUpKGN4dCwgZGVmKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGVmLmNvbXBpbGUgfHwgZGVmLnZhbGlkYXRlKSB7XG4gICAgICAgICgwLCBrZXl3b3JkXzEuZnVuY0tleXdvcmRDb2RlKShjeHQsIGRlZik7XG4gICAgfVxufVxuY29uc3QgSlNPTl9QT0lOVEVSID0gL15cXC8oPzpbXn5dfH4wfH4xKSokLztcbmNvbnN0IFJFTEFUSVZFX0pTT05fUE9JTlRFUiA9IC9eKFswLTldKykoI3xcXC8oPzpbXn5dfH4wfH4xKSopPyQvO1xuZnVuY3Rpb24gZ2V0RGF0YSgkZGF0YSwgeyBkYXRhTGV2ZWwsIGRhdGFOYW1lcywgZGF0YVBhdGhBcnIgfSkge1xuICAgIGxldCBqc29uUG9pbnRlcjtcbiAgICBsZXQgZGF0YTtcbiAgICBpZiAoJGRhdGEgPT09IFwiXCIpXG4gICAgICAgIHJldHVybiBuYW1lc18xLmRlZmF1bHQucm9vdERhdGE7XG4gICAgaWYgKCRkYXRhWzBdID09PSBcIi9cIikge1xuICAgICAgICBpZiAoIUpTT05fUE9JTlRFUi50ZXN0KCRkYXRhKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBKU09OLXBvaW50ZXI6ICR7JGRhdGF9YCk7XG4gICAgICAgIGpzb25Qb2ludGVyID0gJGRhdGE7XG4gICAgICAgIGRhdGEgPSBuYW1lc18xLmRlZmF1bHQucm9vdERhdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gUkVMQVRJVkVfSlNPTl9QT0lOVEVSLmV4ZWMoJGRhdGEpO1xuICAgICAgICBpZiAoIW1hdGNoZXMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSlNPTi1wb2ludGVyOiAkeyRkYXRhfWApO1xuICAgICAgICBjb25zdCB1cCA9ICttYXRjaGVzWzFdO1xuICAgICAgICBqc29uUG9pbnRlciA9IG1hdGNoZXNbMl07XG4gICAgICAgIGlmIChqc29uUG9pbnRlciA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGlmICh1cCA+PSBkYXRhTGV2ZWwpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTXNnKFwicHJvcGVydHkvaW5kZXhcIiwgdXApKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhUGF0aEFycltkYXRhTGV2ZWwgLSB1cF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwID4gZGF0YUxldmVsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTXNnKFwiZGF0YVwiLCB1cCkpO1xuICAgICAgICBkYXRhID0gZGF0YU5hbWVzW2RhdGFMZXZlbCAtIHVwXTtcbiAgICAgICAgaWYgKCFqc29uUG9pbnRlcilcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBsZXQgZXhwciA9IGRhdGE7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBqc29uUG9pbnRlci5zcGxpdChcIi9cIik7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICBkYXRhID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkoKDAsIHV0aWxfMS51bmVzY2FwZUpzb25Qb2ludGVyKShzZWdtZW50KSl9YDtcbiAgICAgICAgICAgIGV4cHIgPSAoMCwgY29kZWdlbl8xLl8pIGAke2V4cHJ9ICYmICR7ZGF0YX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHByO1xuICAgIGZ1bmN0aW9uIGVycm9yTXNnKHBvaW50ZXJUeXBlLCB1cCkge1xuICAgICAgICByZXR1cm4gYENhbm5vdCBhY2Nlc3MgJHtwb2ludGVyVHlwZX0gJHt1cH0gbGV2ZWxzIHVwLCBjdXJyZW50IGxldmVsIGlzICR7ZGF0YUxldmVsfWA7XG4gICAgfVxufVxuZXhwb3J0cy5nZXREYXRhID0gZ2V0RGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoZXJyb3JzKSB7XG4gICAgICAgIHN1cGVyKFwidmFsaWRhdGlvbiBmYWlsZWRcIik7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICB0aGlzLmFqdiA9IHRoaXMudmFsaWRhdGlvbiA9IHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gVmFsaWRhdGlvbkVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGlvbl9lcnJvci5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcmVzb2x2ZV8xID0gcmVxdWlyZShcIi4vcmVzb2x2ZVwiKTtcbmNsYXNzIE1pc3NpbmdSZWZFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihyZXNvbHZlciwgYmFzZUlkLCByZWYsIG1zZykge1xuICAgICAgICBzdXBlcihtc2cgfHwgYGNhbid0IHJlc29sdmUgcmVmZXJlbmNlICR7cmVmfSBmcm9tIGlkICR7YmFzZUlkfWApO1xuICAgICAgICB0aGlzLm1pc3NpbmdSZWYgPSAoMCwgcmVzb2x2ZV8xLnJlc29sdmVVcmwpKHJlc29sdmVyLCBiYXNlSWQsIHJlZik7XG4gICAgICAgIHRoaXMubWlzc2luZ1NjaGVtYSA9ICgwLCByZXNvbHZlXzEubm9ybWFsaXplSWQpKCgwLCByZXNvbHZlXzEuZ2V0RnVsbFBhdGgpKHJlc29sdmVyLCB0aGlzLm1pc3NpbmdSZWYpKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNaXNzaW5nUmVmRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZfZXJyb3IuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVzb2x2ZVNjaGVtYSA9IGV4cG9ydHMuZ2V0Q29tcGlsaW5nU2NoZW1hID0gZXhwb3J0cy5yZXNvbHZlUmVmID0gZXhwb3J0cy5jb21waWxlU2NoZW1hID0gZXhwb3J0cy5TY2hlbWFFbnYgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi9jb2RlZ2VuXCIpO1xuY29uc3QgdmFsaWRhdGlvbl9lcnJvcl8xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvdmFsaWRhdGlvbl9lcnJvclwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi9uYW1lc1wiKTtcbmNvbnN0IHJlc29sdmVfMSA9IHJlcXVpcmUoXCIuL3Jlc29sdmVcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3QgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRlXCIpO1xuY2xhc3MgU2NoZW1hRW52IHtcbiAgICBjb25zdHJ1Y3RvcihlbnYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLnJlZnMgPSB7fTtcbiAgICAgICAgdGhpcy5keW5hbWljQW5jaG9ycyA9IHt9O1xuICAgICAgICBsZXQgc2NoZW1hO1xuICAgICAgICBpZiAodHlwZW9mIGVudi5zY2hlbWEgPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIHNjaGVtYSA9IGVudi5zY2hlbWE7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gZW52LnNjaGVtYTtcbiAgICAgICAgdGhpcy5zY2hlbWFJZCA9IGVudi5zY2hlbWFJZDtcbiAgICAgICAgdGhpcy5yb290ID0gZW52LnJvb3QgfHwgdGhpcztcbiAgICAgICAgdGhpcy5iYXNlSWQgPSAoX2EgPSBlbnYuYmFzZUlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoMCwgcmVzb2x2ZV8xLm5vcm1hbGl6ZUlkKShzY2hlbWEgPT09IG51bGwgfHwgc2NoZW1hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2hlbWFbZW52LnNjaGVtYUlkIHx8IFwiJGlkXCJdKTtcbiAgICAgICAgdGhpcy5zY2hlbWFQYXRoID0gZW52LnNjaGVtYVBhdGg7XG4gICAgICAgIHRoaXMubG9jYWxSZWZzID0gZW52LmxvY2FsUmVmcztcbiAgICAgICAgdGhpcy5tZXRhID0gZW52Lm1ldGE7XG4gICAgICAgIHRoaXMuJGFzeW5jID0gc2NoZW1hID09PSBudWxsIHx8IHNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NoZW1hLiRhc3luYztcbiAgICAgICAgdGhpcy5yZWZzID0ge307XG4gICAgfVxufVxuZXhwb3J0cy5TY2hlbWFFbnYgPSBTY2hlbWFFbnY7XG4vLyBsZXQgY29kZVNpemUgPSAwXG4vLyBsZXQgbm9kZUNvdW50ID0gMFxuLy8gQ29tcGlsZXMgc2NoZW1hIGluIFNjaGVtYUVudlxuZnVuY3Rpb24gY29tcGlsZVNjaGVtYShzY2gpIHtcbiAgICAvLyBUT0RPIHJlZmFjdG9yIC0gcmVtb3ZlIGNvbXBpbGF0aW9uc1xuICAgIGNvbnN0IF9zY2ggPSBnZXRDb21waWxpbmdTY2hlbWEuY2FsbCh0aGlzLCBzY2gpO1xuICAgIGlmIChfc2NoKVxuICAgICAgICByZXR1cm4gX3NjaDtcbiAgICBjb25zdCByb290SWQgPSAoMCwgcmVzb2x2ZV8xLmdldEZ1bGxQYXRoKSh0aGlzLm9wdHMudXJpUmVzb2x2ZXIsIHNjaC5yb290LmJhc2VJZCk7IC8vIFRPRE8gaWYgZ2V0RnVsbFBhdGggcmVtb3ZlZCAxIHRlc3RzIGZhaWxzXG4gICAgY29uc3QgeyBlczUsIGxpbmVzIH0gPSB0aGlzLm9wdHMuY29kZTtcbiAgICBjb25zdCB7IG93blByb3BlcnRpZXMgfSA9IHRoaXMub3B0cztcbiAgICBjb25zdCBnZW4gPSBuZXcgY29kZWdlbl8xLkNvZGVHZW4odGhpcy5zY29wZSwgeyBlczUsIGxpbmVzLCBvd25Qcm9wZXJ0aWVzIH0pO1xuICAgIGxldCBfVmFsaWRhdGlvbkVycm9yO1xuICAgIGlmIChzY2guJGFzeW5jKSB7XG4gICAgICAgIF9WYWxpZGF0aW9uRXJyb3IgPSBnZW4uc2NvcGVWYWx1ZShcIkVycm9yXCIsIHtcbiAgICAgICAgICAgIHJlZjogdmFsaWRhdGlvbl9lcnJvcl8xLmRlZmF1bHQsXG4gICAgICAgICAgICBjb2RlOiAoMCwgY29kZWdlbl8xLl8pIGByZXF1aXJlKFwiYWp2L2Rpc3QvcnVudGltZS92YWxpZGF0aW9uX2Vycm9yXCIpLmRlZmF1bHRgLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdGVOYW1lID0gZ2VuLnNjb3BlTmFtZShcInZhbGlkYXRlXCIpO1xuICAgIHNjaC52YWxpZGF0ZU5hbWUgPSB2YWxpZGF0ZU5hbWU7XG4gICAgY29uc3Qgc2NoZW1hQ3h0ID0ge1xuICAgICAgICBnZW4sXG4gICAgICAgIGFsbEVycm9yczogdGhpcy5vcHRzLmFsbEVycm9ycyxcbiAgICAgICAgZGF0YTogbmFtZXNfMS5kZWZhdWx0LmRhdGEsXG4gICAgICAgIHBhcmVudERhdGE6IG5hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhLFxuICAgICAgICBwYXJlbnREYXRhUHJvcGVydHk6IG5hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhUHJvcGVydHksXG4gICAgICAgIGRhdGFOYW1lczogW25hbWVzXzEuZGVmYXVsdC5kYXRhXSxcbiAgICAgICAgZGF0YVBhdGhBcnI6IFtjb2RlZ2VuXzEubmlsXSwgLy8gVE9ETyBjYW4gaXRzIGxlbmd0aCBiZSB1c2VkIGFzIGRhdGFMZXZlbCBpZiBuaWwgaXMgcmVtb3ZlZD9cbiAgICAgICAgZGF0YUxldmVsOiAwLFxuICAgICAgICBkYXRhVHlwZXM6IFtdLFxuICAgICAgICBkZWZpbmVkUHJvcGVydGllczogbmV3IFNldCgpLFxuICAgICAgICB0b3BTY2hlbWFSZWY6IGdlbi5zY29wZVZhbHVlKFwic2NoZW1hXCIsIHRoaXMub3B0cy5jb2RlLnNvdXJjZSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyB7IHJlZjogc2NoLnNjaGVtYSwgY29kZTogKDAsIGNvZGVnZW5fMS5zdHJpbmdpZnkpKHNjaC5zY2hlbWEpIH1cbiAgICAgICAgICAgIDogeyByZWY6IHNjaC5zY2hlbWEgfSksXG4gICAgICAgIHZhbGlkYXRlTmFtZSxcbiAgICAgICAgVmFsaWRhdGlvbkVycm9yOiBfVmFsaWRhdGlvbkVycm9yLFxuICAgICAgICBzY2hlbWE6IHNjaC5zY2hlbWEsXG4gICAgICAgIHNjaGVtYUVudjogc2NoLFxuICAgICAgICByb290SWQsXG4gICAgICAgIGJhc2VJZDogc2NoLmJhc2VJZCB8fCByb290SWQsXG4gICAgICAgIHNjaGVtYVBhdGg6IGNvZGVnZW5fMS5uaWwsXG4gICAgICAgIGVyclNjaGVtYVBhdGg6IHNjaC5zY2hlbWFQYXRoIHx8ICh0aGlzLm9wdHMuanRkID8gXCJcIiA6IFwiI1wiKSxcbiAgICAgICAgZXJyb3JQYXRoOiAoMCwgY29kZWdlbl8xLl8pIGBcIlwiYCxcbiAgICAgICAgb3B0czogdGhpcy5vcHRzLFxuICAgICAgICBzZWxmOiB0aGlzLFxuICAgIH07XG4gICAgbGV0IHNvdXJjZUNvZGU7XG4gICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fY29tcGlsYXRpb25zLmFkZChzY2gpO1xuICAgICAgICAoMCwgdmFsaWRhdGVfMS52YWxpZGF0ZUZ1bmN0aW9uQ29kZSkoc2NoZW1hQ3h0KTtcbiAgICAgICAgZ2VuLm9wdGltaXplKHRoaXMub3B0cy5jb2RlLm9wdGltaXplKTtcbiAgICAgICAgLy8gZ2VuLm9wdGltaXplKDEpXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlQ29kZSA9IGdlbi50b1N0cmluZygpO1xuICAgICAgICBzb3VyY2VDb2RlID0gYCR7Z2VuLnNjb3BlUmVmcyhuYW1lc18xLmRlZmF1bHQuc2NvcGUpfXJldHVybiAke3ZhbGlkYXRlQ29kZX1gO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygoY29kZVNpemUgKz0gc291cmNlQ29kZS5sZW5ndGgpLCAobm9kZUNvdW50ICs9IGdlbi5ub2RlQ291bnQpKVxuICAgICAgICBpZiAodGhpcy5vcHRzLmNvZGUucHJvY2VzcylcbiAgICAgICAgICAgIHNvdXJjZUNvZGUgPSB0aGlzLm9wdHMuY29kZS5wcm9jZXNzKHNvdXJjZUNvZGUsIHNjaCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiXFxuXFxuXFxuICoqKiBcXG5cIiwgc291cmNlQ29kZSlcbiAgICAgICAgY29uc3QgbWFrZVZhbGlkYXRlID0gbmV3IEZ1bmN0aW9uKGAke25hbWVzXzEuZGVmYXVsdC5zZWxmfWAsIGAke25hbWVzXzEuZGVmYXVsdC5zY29wZX1gLCBzb3VyY2VDb2RlKTtcbiAgICAgICAgY29uc3QgdmFsaWRhdGUgPSBtYWtlVmFsaWRhdGUodGhpcywgdGhpcy5zY29wZS5nZXQoKSk7XG4gICAgICAgIHRoaXMuc2NvcGUudmFsdWUodmFsaWRhdGVOYW1lLCB7IHJlZjogdmFsaWRhdGUgfSk7XG4gICAgICAgIHZhbGlkYXRlLmVycm9ycyA9IG51bGw7XG4gICAgICAgIHZhbGlkYXRlLnNjaGVtYSA9IHNjaC5zY2hlbWE7XG4gICAgICAgIHZhbGlkYXRlLnNjaGVtYUVudiA9IHNjaDtcbiAgICAgICAgaWYgKHNjaC4kYXN5bmMpXG4gICAgICAgICAgICB2YWxpZGF0ZS4kYXN5bmMgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5vcHRzLmNvZGUuc291cmNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZS5zb3VyY2UgPSB7IHZhbGlkYXRlTmFtZSwgdmFsaWRhdGVDb2RlLCBzY29wZVZhbHVlczogZ2VuLl92YWx1ZXMgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRzLnVuZXZhbHVhdGVkKSB7XG4gICAgICAgICAgICBjb25zdCB7IHByb3BzLCBpdGVtcyB9ID0gc2NoZW1hQ3h0O1xuICAgICAgICAgICAgdmFsaWRhdGUuZXZhbHVhdGVkID0ge1xuICAgICAgICAgICAgICAgIHByb3BzOiBwcm9wcyBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lID8gdW5kZWZpbmVkIDogcHJvcHMsXG4gICAgICAgICAgICAgICAgaXRlbXM6IGl0ZW1zIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUgPyB1bmRlZmluZWQgOiBpdGVtcyxcbiAgICAgICAgICAgICAgICBkeW5hbWljUHJvcHM6IHByb3BzIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUsXG4gICAgICAgICAgICAgICAgZHluYW1pY0l0ZW1zOiBpdGVtcyBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZS5zb3VyY2UpXG4gICAgICAgICAgICAgICAgdmFsaWRhdGUuc291cmNlLmV2YWx1YXRlZCA9ICgwLCBjb2RlZ2VuXzEuc3RyaW5naWZ5KSh2YWxpZGF0ZS5ldmFsdWF0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHNjaC52YWxpZGF0ZSA9IHZhbGlkYXRlO1xuICAgICAgICByZXR1cm4gc2NoO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBkZWxldGUgc2NoLnZhbGlkYXRlO1xuICAgICAgICBkZWxldGUgc2NoLnZhbGlkYXRlTmFtZTtcbiAgICAgICAgaWYgKHNvdXJjZUNvZGUpXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIkVycm9yIGNvbXBpbGluZyBzY2hlbWEsIGZ1bmN0aW9uIGNvZGU6XCIsIHNvdXJjZUNvZGUpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlxcblxcblxcbiAqKiogXFxuXCIsIHNvdXJjZUNvZGUsIHRoaXMub3B0cylcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRoaXMuX2NvbXBpbGF0aW9ucy5kZWxldGUoc2NoKTtcbiAgICB9XG59XG5leHBvcnRzLmNvbXBpbGVTY2hlbWEgPSBjb21waWxlU2NoZW1hO1xuZnVuY3Rpb24gcmVzb2x2ZVJlZihyb290LCBiYXNlSWQsIHJlZikge1xuICAgIHZhciBfYTtcbiAgICByZWYgPSAoMCwgcmVzb2x2ZV8xLnJlc29sdmVVcmwpKHRoaXMub3B0cy51cmlSZXNvbHZlciwgYmFzZUlkLCByZWYpO1xuICAgIGNvbnN0IHNjaE9yRnVuYyA9IHJvb3QucmVmc1tyZWZdO1xuICAgIGlmIChzY2hPckZ1bmMpXG4gICAgICAgIHJldHVybiBzY2hPckZ1bmM7XG4gICAgbGV0IF9zY2ggPSByZXNvbHZlLmNhbGwodGhpcywgcm9vdCwgcmVmKTtcbiAgICBpZiAoX3NjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IChfYSA9IHJvb3QubG9jYWxSZWZzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbcmVmXTsgLy8gVE9ETyBtYXliZSBsb2NhbFJlZnMgc2hvdWxkIGhvbGQgU2NoZW1hRW52XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hSWQgfSA9IHRoaXMub3B0cztcbiAgICAgICAgaWYgKHNjaGVtYSlcbiAgICAgICAgICAgIF9zY2ggPSBuZXcgU2NoZW1hRW52KHsgc2NoZW1hLCBzY2hlbWFJZCwgcm9vdCwgYmFzZUlkIH0pO1xuICAgIH1cbiAgICBpZiAoX3NjaCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIChyb290LnJlZnNbcmVmXSA9IGlubGluZU9yQ29tcGlsZS5jYWxsKHRoaXMsIF9zY2gpKTtcbn1cbmV4cG9ydHMucmVzb2x2ZVJlZiA9IHJlc29sdmVSZWY7XG5mdW5jdGlvbiBpbmxpbmVPckNvbXBpbGUoc2NoKSB7XG4gICAgaWYgKCgwLCByZXNvbHZlXzEuaW5saW5lUmVmKShzY2guc2NoZW1hLCB0aGlzLm9wdHMuaW5saW5lUmVmcykpXG4gICAgICAgIHJldHVybiBzY2guc2NoZW1hO1xuICAgIHJldHVybiBzY2gudmFsaWRhdGUgPyBzY2ggOiBjb21waWxlU2NoZW1hLmNhbGwodGhpcywgc2NoKTtcbn1cbi8vIEluZGV4IG9mIHNjaGVtYSBjb21waWxhdGlvbiBpbiB0aGUgY3VycmVudGx5IGNvbXBpbGVkIGxpc3RcbmZ1bmN0aW9uIGdldENvbXBpbGluZ1NjaGVtYShzY2hFbnYpIHtcbiAgICBmb3IgKGNvbnN0IHNjaCBvZiB0aGlzLl9jb21waWxhdGlvbnMpIHtcbiAgICAgICAgaWYgKHNhbWVTY2hlbWFFbnYoc2NoLCBzY2hFbnYpKVxuICAgICAgICAgICAgcmV0dXJuIHNjaDtcbiAgICB9XG59XG5leHBvcnRzLmdldENvbXBpbGluZ1NjaGVtYSA9IGdldENvbXBpbGluZ1NjaGVtYTtcbmZ1bmN0aW9uIHNhbWVTY2hlbWFFbnYoczEsIHMyKSB7XG4gICAgcmV0dXJuIHMxLnNjaGVtYSA9PT0gczIuc2NoZW1hICYmIHMxLnJvb3QgPT09IHMyLnJvb3QgJiYgczEuYmFzZUlkID09PSBzMi5iYXNlSWQ7XG59XG4vLyByZXNvbHZlIGFuZCBjb21waWxlIHRoZSByZWZlcmVuY2VzICgkcmVmKVxuLy8gVE9ETyByZXR1cm5zIEFueVNjaGVtYU9iamVjdCAoaWYgdGhlIHNjaGVtYSBjYW4gYmUgaW5saW5lZCkgb3IgdmFsaWRhdGlvbiBmdW5jdGlvblxuZnVuY3Rpb24gcmVzb2x2ZShyb290LCAvLyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcm9vdCBzY2hlbWEgZm9yIHRoZSBjdXJyZW50IHNjaGVtYVxucmVmIC8vIHJlZmVyZW5jZSB0byByZXNvbHZlXG4pIHtcbiAgICBsZXQgc2NoO1xuICAgIHdoaWxlICh0eXBlb2YgKHNjaCA9IHRoaXMucmVmc1tyZWZdKSA9PSBcInN0cmluZ1wiKVxuICAgICAgICByZWYgPSBzY2g7XG4gICAgcmV0dXJuIHNjaCB8fCB0aGlzLnNjaGVtYXNbcmVmXSB8fCByZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwgcmVmKTtcbn1cbi8vIFJlc29sdmUgc2NoZW1hLCBpdHMgcm9vdCBhbmQgYmFzZUlkXG5mdW5jdGlvbiByZXNvbHZlU2NoZW1hKHJvb3QsIC8vIHJvb3Qgb2JqZWN0IHdpdGggcHJvcGVydGllcyBzY2hlbWEsIHJlZnMgVE9ETyBiZWxvdyBTY2hlbWFFbnYgaXMgYXNzaWduZWQgdG8gaXRcbnJlZiAvLyByZWZlcmVuY2UgdG8gcmVzb2x2ZVxuKSB7XG4gICAgY29uc3QgcCA9IHRoaXMub3B0cy51cmlSZXNvbHZlci5wYXJzZShyZWYpO1xuICAgIGNvbnN0IHJlZlBhdGggPSAoMCwgcmVzb2x2ZV8xLl9nZXRGdWxsUGF0aCkodGhpcy5vcHRzLnVyaVJlc29sdmVyLCBwKTtcbiAgICBsZXQgYmFzZUlkID0gKDAsIHJlc29sdmVfMS5nZXRGdWxsUGF0aCkodGhpcy5vcHRzLnVyaVJlc29sdmVyLCByb290LmJhc2VJZCwgdW5kZWZpbmVkKTtcbiAgICAvLyBUT0RPIGBPYmplY3Qua2V5cyhyb290LnNjaGVtYSkubGVuZ3RoID4gMGAgc2hvdWxkIG5vdCBiZSBuZWVkZWQgLSBidXQgcmVtb3ZpbmcgYnJlYWtzIDIgdGVzdHNcbiAgICBpZiAoT2JqZWN0LmtleXMocm9vdC5zY2hlbWEpLmxlbmd0aCA+IDAgJiYgcmVmUGF0aCA9PT0gYmFzZUlkKSB7XG4gICAgICAgIHJldHVybiBnZXRKc29uUG9pbnRlci5jYWxsKHRoaXMsIHAsIHJvb3QpO1xuICAgIH1cbiAgICBjb25zdCBpZCA9ICgwLCByZXNvbHZlXzEubm9ybWFsaXplSWQpKHJlZlBhdGgpO1xuICAgIGNvbnN0IHNjaE9yUmVmID0gdGhpcy5yZWZzW2lkXSB8fCB0aGlzLnNjaGVtYXNbaWRdO1xuICAgIGlmICh0eXBlb2Ygc2NoT3JSZWYgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBzY2ggPSByZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwgc2NoT3JSZWYpO1xuICAgICAgICBpZiAodHlwZW9mIChzY2ggPT09IG51bGwgfHwgc2NoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2guc2NoZW1hKSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmV0dXJuIGdldEpzb25Qb2ludGVyLmNhbGwodGhpcywgcCwgc2NoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAoc2NoT3JSZWYgPT09IG51bGwgfHwgc2NoT3JSZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaE9yUmVmLnNjaGVtYSkgIT09IFwib2JqZWN0XCIpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoIXNjaE9yUmVmLnZhbGlkYXRlKVxuICAgICAgICBjb21waWxlU2NoZW1hLmNhbGwodGhpcywgc2NoT3JSZWYpO1xuICAgIGlmIChpZCA9PT0gKDAsIHJlc29sdmVfMS5ub3JtYWxpemVJZCkocmVmKSkge1xuICAgICAgICBjb25zdCB7IHNjaGVtYSB9ID0gc2NoT3JSZWY7XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hSWQgfSA9IHRoaXMub3B0cztcbiAgICAgICAgY29uc3Qgc2NoSWQgPSBzY2hlbWFbc2NoZW1hSWRdO1xuICAgICAgICBpZiAoc2NoSWQpXG4gICAgICAgICAgICBiYXNlSWQgPSAoMCwgcmVzb2x2ZV8xLnJlc29sdmVVcmwpKHRoaXMub3B0cy51cmlSZXNvbHZlciwgYmFzZUlkLCBzY2hJZCk7XG4gICAgICAgIHJldHVybiBuZXcgU2NoZW1hRW52KHsgc2NoZW1hLCBzY2hlbWFJZCwgcm9vdCwgYmFzZUlkIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0SnNvblBvaW50ZXIuY2FsbCh0aGlzLCBwLCBzY2hPclJlZik7XG59XG5leHBvcnRzLnJlc29sdmVTY2hlbWEgPSByZXNvbHZlU2NoZW1hO1xuY29uc3QgUFJFVkVOVF9TQ09QRV9DSEFOR0UgPSBuZXcgU2V0KFtcbiAgICBcInByb3BlcnRpZXNcIixcbiAgICBcInBhdHRlcm5Qcm9wZXJ0aWVzXCIsXG4gICAgXCJlbnVtXCIsXG4gICAgXCJkZXBlbmRlbmNpZXNcIixcbiAgICBcImRlZmluaXRpb25zXCIsXG5dKTtcbmZ1bmN0aW9uIGdldEpzb25Qb2ludGVyKHBhcnNlZFJlZiwgeyBiYXNlSWQsIHNjaGVtYSwgcm9vdCB9KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICgoKF9hID0gcGFyc2VkUmVmLmZyYWdtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbMF0pICE9PSBcIi9cIilcbiAgICAgICAgcmV0dXJuO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJzZWRSZWYuZnJhZ21lbnQuc2xpY2UoMSkuc3BsaXQoXCIvXCIpKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09PSBcImJvb2xlYW5cIilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgcGFydFNjaGVtYSA9IHNjaGVtYVsoMCwgdXRpbF8xLnVuZXNjYXBlRnJhZ21lbnQpKHBhcnQpXTtcbiAgICAgICAgaWYgKHBhcnRTY2hlbWEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc2NoZW1hID0gcGFydFNjaGVtYTtcbiAgICAgICAgLy8gVE9ETyBQUkVWRU5UX1NDT1BFX0NIQU5HRSBjb3VsZCBiZSBkZWZpbmVkIGluIGtleXdvcmQgZGVmP1xuICAgICAgICBjb25zdCBzY2hJZCA9IHR5cGVvZiBzY2hlbWEgPT09IFwib2JqZWN0XCIgJiYgc2NoZW1hW3RoaXMub3B0cy5zY2hlbWFJZF07XG4gICAgICAgIGlmICghUFJFVkVOVF9TQ09QRV9DSEFOR0UuaGFzKHBhcnQpICYmIHNjaElkKSB7XG4gICAgICAgICAgICBiYXNlSWQgPSAoMCwgcmVzb2x2ZV8xLnJlc29sdmVVcmwpKHRoaXMub3B0cy51cmlSZXNvbHZlciwgYmFzZUlkLCBzY2hJZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGVudjtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSAhPSBcImJvb2xlYW5cIiAmJiBzY2hlbWEuJHJlZiAmJiAhKDAsIHV0aWxfMS5zY2hlbWFIYXNSdWxlc0J1dFJlZikoc2NoZW1hLCB0aGlzLlJVTEVTKSkge1xuICAgICAgICBjb25zdCAkcmVmID0gKDAsIHJlc29sdmVfMS5yZXNvbHZlVXJsKSh0aGlzLm9wdHMudXJpUmVzb2x2ZXIsIGJhc2VJZCwgc2NoZW1hLiRyZWYpO1xuICAgICAgICBlbnYgPSByZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwgJHJlZik7XG4gICAgfVxuICAgIC8vIGV2ZW4gdGhvdWdoIHJlc29sdXRpb24gZmFpbGVkIHdlIG5lZWQgdG8gcmV0dXJuIFNjaGVtYUVudiB0byB0aHJvdyBleGNlcHRpb25cbiAgICAvLyBzbyB0aGF0IGNvbXBpbGVBc3luYyBsb2FkcyBtaXNzaW5nIHNjaGVtYS5cbiAgICBjb25zdCB7IHNjaGVtYUlkIH0gPSB0aGlzLm9wdHM7XG4gICAgZW52ID0gZW52IHx8IG5ldyBTY2hlbWFFbnYoeyBzY2hlbWEsIHNjaGVtYUlkLCByb290LCBiYXNlSWQgfSk7XG4gICAgaWYgKGVudi5zY2hlbWEgIT09IGVudi5yb290LnNjaGVtYSlcbiAgICAgICAgcmV0dXJuIGVudjtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwKICAgICIndXNlIHN0cmljdCdcblxuY29uc3QgSEVYID0ge1xuICAwOiAwLFxuICAxOiAxLFxuICAyOiAyLFxuICAzOiAzLFxuICA0OiA0LFxuICA1OiA1LFxuICA2OiA2LFxuICA3OiA3LFxuICA4OiA4LFxuICA5OiA5LFxuICBhOiAxMCxcbiAgQTogMTAsXG4gIGI6IDExLFxuICBCOiAxMSxcbiAgYzogMTIsXG4gIEM6IDEyLFxuICBkOiAxMyxcbiAgRDogMTMsXG4gIGU6IDE0LFxuICBFOiAxNCxcbiAgZjogMTUsXG4gIEY6IDE1XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBIRVhcbn1cbiIsCiAgICAiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgSEVYIH0gPSByZXF1aXJlKCcuL3Njb3BlZENoYXJzJylcblxuY29uc3QgSVBWNF9SRUcgPSAvXig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGR7Mn18WzEtOV1cXGR8XFxkKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkezJ9fFsxLTldXFxkfFxcZCkkL3VcblxuZnVuY3Rpb24gbm9ybWFsaXplSVB2NCAoaG9zdCkge1xuICBpZiAoZmluZFRva2VuKGhvc3QsICcuJykgPCAzKSB7IHJldHVybiB7IGhvc3QsIGlzSVBWNDogZmFsc2UgfSB9XG4gIGNvbnN0IG1hdGNoZXMgPSBob3N0Lm1hdGNoKElQVjRfUkVHKSB8fCBbXVxuICBjb25zdCBbYWRkcmVzc10gPSBtYXRjaGVzXG4gIGlmIChhZGRyZXNzKSB7XG4gICAgcmV0dXJuIHsgaG9zdDogc3RyaXBMZWFkaW5nWmVyb3MoYWRkcmVzcywgJy4nKSwgaXNJUFY0OiB0cnVlIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyBob3N0LCBpc0lQVjQ6IGZhbHNlIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGlucHV0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtrZWVwWmVybz1mYWxzZV1cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBzdHJpbmdBcnJheVRvSGV4U3RyaXBwZWQgKGlucHV0LCBrZWVwWmVybyA9IGZhbHNlKSB7XG4gIGxldCBhY2MgPSAnJ1xuICBsZXQgc3RyaXAgPSB0cnVlXG4gIGZvciAoY29uc3QgYyBvZiBpbnB1dCkge1xuICAgIGlmIChIRVhbY10gPT09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmIChjICE9PSAnMCcgJiYgc3RyaXAgPT09IHRydWUpIHN0cmlwID0gZmFsc2VcbiAgICBpZiAoIXN0cmlwKSBhY2MgKz0gY1xuICB9XG4gIGlmIChrZWVwWmVybyAmJiBhY2MubGVuZ3RoID09PSAwKSBhY2MgPSAnMCdcbiAgcmV0dXJuIGFjY1xufVxuXG5mdW5jdGlvbiBnZXRJUFY2IChpbnB1dCkge1xuICBsZXQgdG9rZW5Db3VudCA9IDBcbiAgY29uc3Qgb3V0cHV0ID0geyBlcnJvcjogZmFsc2UsIGFkZHJlc3M6ICcnLCB6b25lOiAnJyB9XG4gIGNvbnN0IGFkZHJlc3MgPSBbXVxuICBjb25zdCBidWZmZXIgPSBbXVxuICBsZXQgaXNab25lID0gZmFsc2VcbiAgbGV0IGVuZGlwdjZFbmNvdW50ZXJlZCA9IGZhbHNlXG4gIGxldCBlbmRJcHY2ID0gZmFsc2VcblxuICBmdW5jdGlvbiBjb25zdW1lICgpIHtcbiAgICBpZiAoYnVmZmVyLmxlbmd0aCkge1xuICAgICAgaWYgKGlzWm9uZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgaGV4ID0gc3RyaW5nQXJyYXlUb0hleFN0cmlwcGVkKGJ1ZmZlcilcbiAgICAgICAgaWYgKGhleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWRkcmVzcy5wdXNoKGhleClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXQuZXJyb3IgPSB0cnVlXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5sZW5ndGggPSAwXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY3Vyc29yID0gaW5wdXRbaV1cbiAgICBpZiAoY3Vyc29yID09PSAnWycgfHwgY3Vyc29yID09PSAnXScpIHsgY29udGludWUgfVxuICAgIGlmIChjdXJzb3IgPT09ICc6Jykge1xuICAgICAgaWYgKGVuZGlwdjZFbmNvdW50ZXJlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBlbmRJcHY2ID0gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKCFjb25zdW1lKCkpIHsgYnJlYWsgfVxuICAgICAgdG9rZW5Db3VudCsrXG4gICAgICBhZGRyZXNzLnB1c2goJzonKVxuICAgICAgaWYgKHRva2VuQ291bnQgPiA3KSB7XG4gICAgICAgIC8vIG5vdCB2YWxpZFxuICAgICAgICBvdXRwdXQuZXJyb3IgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAoaSAtIDEgPj0gMCAmJiBpbnB1dFtpIC0gMV0gPT09ICc6Jykge1xuICAgICAgICBlbmRpcHY2RW5jb3VudGVyZWQgPSB0cnVlXG4gICAgICB9XG4gICAgICBjb250aW51ZVxuICAgIH0gZWxzZSBpZiAoY3Vyc29yID09PSAnJScpIHtcbiAgICAgIGlmICghY29uc3VtZSgpKSB7IGJyZWFrIH1cbiAgICAgIC8vIHN3aXRjaCB0byB6b25lIGRldGVjdGlvblxuICAgICAgaXNab25lID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIucHVzaChjdXJzb3IpXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgfVxuICBpZiAoYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChpc1pvbmUpIHtcbiAgICAgIG91dHB1dC56b25lID0gYnVmZmVyLmpvaW4oJycpXG4gICAgfSBlbHNlIGlmIChlbmRJcHY2KSB7XG4gICAgICBhZGRyZXNzLnB1c2goYnVmZmVyLmpvaW4oJycpKVxuICAgIH0gZWxzZSB7XG4gICAgICBhZGRyZXNzLnB1c2goc3RyaW5nQXJyYXlUb0hleFN0cmlwcGVkKGJ1ZmZlcikpXG4gICAgfVxuICB9XG4gIG91dHB1dC5hZGRyZXNzID0gYWRkcmVzcy5qb2luKCcnKVxuICByZXR1cm4gb3V0cHV0XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUlQdjYgKGhvc3QpIHtcbiAgaWYgKGZpbmRUb2tlbihob3N0LCAnOicpIDwgMikgeyByZXR1cm4geyBob3N0LCBpc0lQVjY6IGZhbHNlIH0gfVxuICBjb25zdCBpcHY2ID0gZ2V0SVBWNihob3N0KVxuXG4gIGlmICghaXB2Ni5lcnJvcikge1xuICAgIGxldCBuZXdIb3N0ID0gaXB2Ni5hZGRyZXNzXG4gICAgbGV0IGVzY2FwZWRIb3N0ID0gaXB2Ni5hZGRyZXNzXG4gICAgaWYgKGlwdjYuem9uZSkge1xuICAgICAgbmV3SG9zdCArPSAnJScgKyBpcHY2LnpvbmVcbiAgICAgIGVzY2FwZWRIb3N0ICs9ICclMjUnICsgaXB2Ni56b25lXG4gICAgfVxuICAgIHJldHVybiB7IGhvc3Q6IG5ld0hvc3QsIGVzY2FwZWRIb3N0LCBpc0lQVjY6IHRydWUgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB7IGhvc3QsIGlzSVBWNjogZmFsc2UgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1plcm9zIChzdHIsIHRva2VuKSB7XG4gIGxldCBvdXQgPSAnJ1xuICBsZXQgc2tpcCA9IHRydWVcbiAgY29uc3QgbCA9IHN0ci5sZW5ndGhcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBjID0gc3RyW2ldXG4gICAgaWYgKGMgPT09ICcwJyAmJiBza2lwKSB7XG4gICAgICBpZiAoKGkgKyAxIDw9IGwgJiYgc3RyW2kgKyAxXSA9PT0gdG9rZW4pIHx8IGkgKyAxID09PSBsKSB7XG4gICAgICAgIG91dCArPSBjXG4gICAgICAgIHNraXAgPSBmYWxzZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYyA9PT0gdG9rZW4pIHtcbiAgICAgICAgc2tpcCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNraXAgPSBmYWxzZVxuICAgICAgfVxuICAgICAgb3V0ICs9IGNcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBmaW5kVG9rZW4gKHN0ciwgdG9rZW4pIHtcbiAgbGV0IGluZCA9IDBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3RyW2ldID09PSB0b2tlbikgaW5kKytcbiAgfVxuICByZXR1cm4gaW5kXG59XG5cbmNvbnN0IFJEUzEgPSAvXlxcLlxcLj9cXC8vdVxuY29uc3QgUkRTMiA9IC9eXFwvXFwuKD86XFwvfCQpL3VcbmNvbnN0IFJEUzMgPSAvXlxcL1xcLlxcLig/OlxcL3wkKS91XG5jb25zdCBSRFM1ID0gL15cXC8/KD86LnxcXG4pKj8oPz1cXC98JCkvdVxuXG5mdW5jdGlvbiByZW1vdmVEb3RTZWdtZW50cyAoaW5wdXQpIHtcbiAgY29uc3Qgb3V0cHV0ID0gW11cblxuICB3aGlsZSAoaW5wdXQubGVuZ3RoKSB7XG4gICAgaWYgKGlucHV0Lm1hdGNoKFJEUzEpKSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoUkRTMSwgJycpXG4gICAgfSBlbHNlIGlmIChpbnB1dC5tYXRjaChSRFMyKSkge1xuICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFJEUzIsICcvJylcbiAgICB9IGVsc2UgaWYgKGlucHV0Lm1hdGNoKFJEUzMpKSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoUkRTMywgJy8nKVxuICAgICAgb3V0cHV0LnBvcCgpXG4gICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gJy4nIHx8IGlucHV0ID09PSAnLi4nKSB7XG4gICAgICBpbnB1dCA9ICcnXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGltID0gaW5wdXQubWF0Y2goUkRTNSlcbiAgICAgIGlmIChpbSkge1xuICAgICAgICBjb25zdCBzID0gaW1bMF1cbiAgICAgICAgaW5wdXQgPSBpbnB1dC5zbGljZShzLmxlbmd0aClcbiAgICAgICAgb3V0cHV0LnB1c2gocylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBkb3Qgc2VnbWVudCBjb25kaXRpb24nKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudEVuY29kaW5nIChjb21wb25lbnRzLCBlc2MpIHtcbiAgY29uc3QgZnVuYyA9IGVzYyAhPT0gdHJ1ZSA/IGVzY2FwZSA6IHVuZXNjYXBlXG4gIGlmIChjb21wb25lbnRzLnNjaGVtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29tcG9uZW50cy5zY2hlbWUgPSBmdW5jKGNvbXBvbmVudHMuc2NoZW1lKVxuICB9XG4gIGlmIChjb21wb25lbnRzLnVzZXJpbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb21wb25lbnRzLnVzZXJpbmZvID0gZnVuYyhjb21wb25lbnRzLnVzZXJpbmZvKVxuICB9XG4gIGlmIChjb21wb25lbnRzLmhvc3QgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbXBvbmVudHMuaG9zdCA9IGZ1bmMoY29tcG9uZW50cy5ob3N0KVxuICB9XG4gIGlmIChjb21wb25lbnRzLnBhdGggIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbXBvbmVudHMucGF0aCA9IGZ1bmMoY29tcG9uZW50cy5wYXRoKVxuICB9XG4gIGlmIChjb21wb25lbnRzLnF1ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb21wb25lbnRzLnF1ZXJ5ID0gZnVuYyhjb21wb25lbnRzLnF1ZXJ5KVxuICB9XG4gIGlmIChjb21wb25lbnRzLmZyYWdtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb21wb25lbnRzLmZyYWdtZW50ID0gZnVuYyhjb21wb25lbnRzLmZyYWdtZW50KVxuICB9XG4gIHJldHVybiBjb21wb25lbnRzXG59XG5cbmZ1bmN0aW9uIHJlY29tcG9zZUF1dGhvcml0eSAoY29tcG9uZW50cykge1xuICBjb25zdCB1cmlUb2tlbnMgPSBbXVxuXG4gIGlmIChjb21wb25lbnRzLnVzZXJpbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICB1cmlUb2tlbnMucHVzaChjb21wb25lbnRzLnVzZXJpbmZvKVxuICAgIHVyaVRva2Vucy5wdXNoKCdAJylcbiAgfVxuXG4gIGlmIChjb21wb25lbnRzLmhvc3QgIT09IHVuZGVmaW5lZCkge1xuICAgIGxldCBob3N0ID0gdW5lc2NhcGUoY29tcG9uZW50cy5ob3N0KVxuICAgIGNvbnN0IGlwVjRyZXMgPSBub3JtYWxpemVJUHY0KGhvc3QpXG5cbiAgICBpZiAoaXBWNHJlcy5pc0lQVjQpIHtcbiAgICAgIGhvc3QgPSBpcFY0cmVzLmhvc3RcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaXBWNnJlcyA9IG5vcm1hbGl6ZUlQdjYoaXBWNHJlcy5ob3N0KVxuICAgICAgaWYgKGlwVjZyZXMuaXNJUFY2ID09PSB0cnVlKSB7XG4gICAgICAgIGhvc3QgPSBgWyR7aXBWNnJlcy5lc2NhcGVkSG9zdH1dYFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaG9zdCA9IGNvbXBvbmVudHMuaG9zdFxuICAgICAgfVxuICAgIH1cbiAgICB1cmlUb2tlbnMucHVzaChob3N0KVxuICB9XG5cbiAgaWYgKHR5cGVvZiBjb21wb25lbnRzLnBvcnQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBjb21wb25lbnRzLnBvcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdXJpVG9rZW5zLnB1c2goJzonKVxuICAgIHVyaVRva2Vucy5wdXNoKFN0cmluZyhjb21wb25lbnRzLnBvcnQpKVxuICB9XG5cbiAgcmV0dXJuIHVyaVRva2Vucy5sZW5ndGggPyB1cmlUb2tlbnMuam9pbignJykgOiB1bmRlZmluZWRcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWNvbXBvc2VBdXRob3JpdHksXG4gIG5vcm1hbGl6ZUNvbXBvbmVudEVuY29kaW5nLFxuICByZW1vdmVEb3RTZWdtZW50cyxcbiAgbm9ybWFsaXplSVB2NCxcbiAgbm9ybWFsaXplSVB2NixcbiAgc3RyaW5nQXJyYXlUb0hleFN0cmlwcGVkXG59XG4iLAogICAgIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBVVUlEX1JFRyA9IC9eW1xcZGEtZl17OH0tW1xcZGEtZl17NH0tW1xcZGEtZl17NH0tW1xcZGEtZl17NH0tW1xcZGEtZl17MTJ9JC9pdVxuY29uc3QgVVJOX1JFRyA9IC8oW1xcZGEtel1bXFxkXFwtYS16XXswLDMxfSk6KCg/OltcXHchJCcoKSorLFxcLS46Oz1AXXwlW1xcZGEtZl17Mn0pKykvaXVcblxuZnVuY3Rpb24gaXNTZWN1cmUgKHdzQ29tcG9uZW50cykge1xuICByZXR1cm4gdHlwZW9mIHdzQ29tcG9uZW50cy5zZWN1cmUgPT09ICdib29sZWFuJyA/IHdzQ29tcG9uZW50cy5zZWN1cmUgOiBTdHJpbmcod3NDb21wb25lbnRzLnNjaGVtZSkudG9Mb3dlckNhc2UoKSA9PT0gJ3dzcydcbn1cblxuZnVuY3Rpb24gaHR0cFBhcnNlIChjb21wb25lbnRzKSB7XG4gIGlmICghY29tcG9uZW50cy5ob3N0KSB7XG4gICAgY29tcG9uZW50cy5lcnJvciA9IGNvbXBvbmVudHMuZXJyb3IgfHwgJ0hUVFAgVVJJcyBtdXN0IGhhdmUgYSBob3N0LidcbiAgfVxuXG4gIHJldHVybiBjb21wb25lbnRzXG59XG5cbmZ1bmN0aW9uIGh0dHBTZXJpYWxpemUgKGNvbXBvbmVudHMpIHtcbiAgY29uc3Qgc2VjdXJlID0gU3RyaW5nKGNvbXBvbmVudHMuc2NoZW1lKS50b0xvd2VyQ2FzZSgpID09PSAnaHR0cHMnXG5cbiAgLy8gbm9ybWFsaXplIHRoZSBkZWZhdWx0IHBvcnRcbiAgaWYgKGNvbXBvbmVudHMucG9ydCA9PT0gKHNlY3VyZSA/IDQ0MyA6IDgwKSB8fCBjb21wb25lbnRzLnBvcnQgPT09ICcnKSB7XG4gICAgY29tcG9uZW50cy5wb3J0ID0gdW5kZWZpbmVkXG4gIH1cblxuICAvLyBub3JtYWxpemUgdGhlIGVtcHR5IHBhdGhcbiAgaWYgKCFjb21wb25lbnRzLnBhdGgpIHtcbiAgICBjb21wb25lbnRzLnBhdGggPSAnLydcbiAgfVxuXG4gIC8vIE5PVEU6IFdlIGRvIG5vdCBwYXJzZSBxdWVyeSBzdHJpbmdzIGZvciBIVFRQIFVSSXNcbiAgLy8gYXMgV1dXIEZvcm0gVXJsIEVuY29kZWQgcXVlcnkgc3RyaW5ncyBhcmUgcGFydCBvZiB0aGUgSFRNTDQrIHNwZWMsXG4gIC8vIGFuZCBub3QgdGhlIEhUVFAgc3BlYy5cblxuICByZXR1cm4gY29tcG9uZW50c1xufVxuXG5mdW5jdGlvbiB3c1BhcnNlICh3c0NvbXBvbmVudHMpIHtcbi8vIGluZGljYXRlIGlmIHRoZSBzZWN1cmUgZmxhZyBpcyBzZXRcbiAgd3NDb21wb25lbnRzLnNlY3VyZSA9IGlzU2VjdXJlKHdzQ29tcG9uZW50cylcblxuICAvLyBjb25zdHJ1Y3QgcmVzb3VjZSBuYW1lXG4gIHdzQ29tcG9uZW50cy5yZXNvdXJjZU5hbWUgPSAod3NDb21wb25lbnRzLnBhdGggfHwgJy8nKSArICh3c0NvbXBvbmVudHMucXVlcnkgPyAnPycgKyB3c0NvbXBvbmVudHMucXVlcnkgOiAnJylcbiAgd3NDb21wb25lbnRzLnBhdGggPSB1bmRlZmluZWRcbiAgd3NDb21wb25lbnRzLnF1ZXJ5ID0gdW5kZWZpbmVkXG5cbiAgcmV0dXJuIHdzQ29tcG9uZW50c1xufVxuXG5mdW5jdGlvbiB3c1NlcmlhbGl6ZSAod3NDb21wb25lbnRzKSB7XG4vLyBub3JtYWxpemUgdGhlIGRlZmF1bHQgcG9ydFxuICBpZiAod3NDb21wb25lbnRzLnBvcnQgPT09IChpc1NlY3VyZSh3c0NvbXBvbmVudHMpID8gNDQzIDogODApIHx8IHdzQ29tcG9uZW50cy5wb3J0ID09PSAnJykge1xuICAgIHdzQ29tcG9uZW50cy5wb3J0ID0gdW5kZWZpbmVkXG4gIH1cblxuICAvLyBlbnN1cmUgc2NoZW1lIG1hdGNoZXMgc2VjdXJlIGZsYWdcbiAgaWYgKHR5cGVvZiB3c0NvbXBvbmVudHMuc2VjdXJlID09PSAnYm9vbGVhbicpIHtcbiAgICB3c0NvbXBvbmVudHMuc2NoZW1lID0gKHdzQ29tcG9uZW50cy5zZWN1cmUgPyAnd3NzJyA6ICd3cycpXG4gICAgd3NDb21wb25lbnRzLnNlY3VyZSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLy8gcmVjb25zdHJ1Y3QgcGF0aCBmcm9tIHJlc291cmNlIG5hbWVcbiAgaWYgKHdzQ29tcG9uZW50cy5yZXNvdXJjZU5hbWUpIHtcbiAgICBjb25zdCBbcGF0aCwgcXVlcnldID0gd3NDb21wb25lbnRzLnJlc291cmNlTmFtZS5zcGxpdCgnPycpXG4gICAgd3NDb21wb25lbnRzLnBhdGggPSAocGF0aCAmJiBwYXRoICE9PSAnLycgPyBwYXRoIDogdW5kZWZpbmVkKVxuICAgIHdzQ29tcG9uZW50cy5xdWVyeSA9IHF1ZXJ5XG4gICAgd3NDb21wb25lbnRzLnJlc291cmNlTmFtZSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLy8gZm9yYmlkIGZyYWdtZW50IGNvbXBvbmVudFxuICB3c0NvbXBvbmVudHMuZnJhZ21lbnQgPSB1bmRlZmluZWRcblxuICByZXR1cm4gd3NDb21wb25lbnRzXG59XG5cbmZ1bmN0aW9uIHVyblBhcnNlICh1cm5Db21wb25lbnRzLCBvcHRpb25zKSB7XG4gIGlmICghdXJuQ29tcG9uZW50cy5wYXRoKSB7XG4gICAgdXJuQ29tcG9uZW50cy5lcnJvciA9ICdVUk4gY2FuIG5vdCBiZSBwYXJzZWQnXG4gICAgcmV0dXJuIHVybkNvbXBvbmVudHNcbiAgfVxuICBjb25zdCBtYXRjaGVzID0gdXJuQ29tcG9uZW50cy5wYXRoLm1hdGNoKFVSTl9SRUcpXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgY29uc3Qgc2NoZW1lID0gb3B0aW9ucy5zY2hlbWUgfHwgdXJuQ29tcG9uZW50cy5zY2hlbWUgfHwgJ3VybidcbiAgICB1cm5Db21wb25lbnRzLm5pZCA9IG1hdGNoZXNbMV0udG9Mb3dlckNhc2UoKVxuICAgIHVybkNvbXBvbmVudHMubnNzID0gbWF0Y2hlc1syXVxuICAgIGNvbnN0IHVyblNjaGVtZSA9IGAke3NjaGVtZX06JHtvcHRpb25zLm5pZCB8fCB1cm5Db21wb25lbnRzLm5pZH1gXG4gICAgY29uc3Qgc2NoZW1lSGFuZGxlciA9IFNDSEVNRVNbdXJuU2NoZW1lXVxuICAgIHVybkNvbXBvbmVudHMucGF0aCA9IHVuZGVmaW5lZFxuXG4gICAgaWYgKHNjaGVtZUhhbmRsZXIpIHtcbiAgICAgIHVybkNvbXBvbmVudHMgPSBzY2hlbWVIYW5kbGVyLnBhcnNlKHVybkNvbXBvbmVudHMsIG9wdGlvbnMpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHVybkNvbXBvbmVudHMuZXJyb3IgPSB1cm5Db21wb25lbnRzLmVycm9yIHx8ICdVUk4gY2FuIG5vdCBiZSBwYXJzZWQuJ1xuICB9XG5cbiAgcmV0dXJuIHVybkNvbXBvbmVudHNcbn1cblxuZnVuY3Rpb24gdXJuU2VyaWFsaXplICh1cm5Db21wb25lbnRzLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNjaGVtZSA9IG9wdGlvbnMuc2NoZW1lIHx8IHVybkNvbXBvbmVudHMuc2NoZW1lIHx8ICd1cm4nXG4gIGNvbnN0IG5pZCA9IHVybkNvbXBvbmVudHMubmlkLnRvTG93ZXJDYXNlKClcbiAgY29uc3QgdXJuU2NoZW1lID0gYCR7c2NoZW1lfToke29wdGlvbnMubmlkIHx8IG5pZH1gXG4gIGNvbnN0IHNjaGVtZUhhbmRsZXIgPSBTQ0hFTUVTW3VyblNjaGVtZV1cblxuICBpZiAoc2NoZW1lSGFuZGxlcikge1xuICAgIHVybkNvbXBvbmVudHMgPSBzY2hlbWVIYW5kbGVyLnNlcmlhbGl6ZSh1cm5Db21wb25lbnRzLCBvcHRpb25zKVxuICB9XG5cbiAgY29uc3QgdXJpQ29tcG9uZW50cyA9IHVybkNvbXBvbmVudHNcbiAgY29uc3QgbnNzID0gdXJuQ29tcG9uZW50cy5uc3NcbiAgdXJpQ29tcG9uZW50cy5wYXRoID0gYCR7bmlkIHx8IG9wdGlvbnMubmlkfToke25zc31gXG5cbiAgb3B0aW9ucy5za2lwRXNjYXBlID0gdHJ1ZVxuICByZXR1cm4gdXJpQ29tcG9uZW50c1xufVxuXG5mdW5jdGlvbiB1cm51dWlkUGFyc2UgKHVybkNvbXBvbmVudHMsIG9wdGlvbnMpIHtcbiAgY29uc3QgdXVpZENvbXBvbmVudHMgPSB1cm5Db21wb25lbnRzXG4gIHV1aWRDb21wb25lbnRzLnV1aWQgPSB1dWlkQ29tcG9uZW50cy5uc3NcbiAgdXVpZENvbXBvbmVudHMubnNzID0gdW5kZWZpbmVkXG5cbiAgaWYgKCFvcHRpb25zLnRvbGVyYW50ICYmICghdXVpZENvbXBvbmVudHMudXVpZCB8fCAhVVVJRF9SRUcudGVzdCh1dWlkQ29tcG9uZW50cy51dWlkKSkpIHtcbiAgICB1dWlkQ29tcG9uZW50cy5lcnJvciA9IHV1aWRDb21wb25lbnRzLmVycm9yIHx8ICdVVUlEIGlzIG5vdCB2YWxpZC4nXG4gIH1cblxuICByZXR1cm4gdXVpZENvbXBvbmVudHNcbn1cblxuZnVuY3Rpb24gdXJudXVpZFNlcmlhbGl6ZSAodXVpZENvbXBvbmVudHMpIHtcbiAgY29uc3QgdXJuQ29tcG9uZW50cyA9IHV1aWRDb21wb25lbnRzXG4gIC8vIG5vcm1hbGl6ZSBVVUlEXG4gIHVybkNvbXBvbmVudHMubnNzID0gKHV1aWRDb21wb25lbnRzLnV1aWQgfHwgJycpLnRvTG93ZXJDYXNlKClcbiAgcmV0dXJuIHVybkNvbXBvbmVudHNcbn1cblxuY29uc3QgaHR0cCA9IHtcbiAgc2NoZW1lOiAnaHR0cCcsXG4gIGRvbWFpbkhvc3Q6IHRydWUsXG4gIHBhcnNlOiBodHRwUGFyc2UsXG4gIHNlcmlhbGl6ZTogaHR0cFNlcmlhbGl6ZVxufVxuXG5jb25zdCBodHRwcyA9IHtcbiAgc2NoZW1lOiAnaHR0cHMnLFxuICBkb21haW5Ib3N0OiBodHRwLmRvbWFpbkhvc3QsXG4gIHBhcnNlOiBodHRwUGFyc2UsXG4gIHNlcmlhbGl6ZTogaHR0cFNlcmlhbGl6ZVxufVxuXG5jb25zdCB3cyA9IHtcbiAgc2NoZW1lOiAnd3MnLFxuICBkb21haW5Ib3N0OiB0cnVlLFxuICBwYXJzZTogd3NQYXJzZSxcbiAgc2VyaWFsaXplOiB3c1NlcmlhbGl6ZVxufVxuXG5jb25zdCB3c3MgPSB7XG4gIHNjaGVtZTogJ3dzcycsXG4gIGRvbWFpbkhvc3Q6IHdzLmRvbWFpbkhvc3QsXG4gIHBhcnNlOiB3cy5wYXJzZSxcbiAgc2VyaWFsaXplOiB3cy5zZXJpYWxpemVcbn1cblxuY29uc3QgdXJuID0ge1xuICBzY2hlbWU6ICd1cm4nLFxuICBwYXJzZTogdXJuUGFyc2UsXG4gIHNlcmlhbGl6ZTogdXJuU2VyaWFsaXplLFxuICBza2lwTm9ybWFsaXplOiB0cnVlXG59XG5cbmNvbnN0IHVybnV1aWQgPSB7XG4gIHNjaGVtZTogJ3Vybjp1dWlkJyxcbiAgcGFyc2U6IHVybnV1aWRQYXJzZSxcbiAgc2VyaWFsaXplOiB1cm51dWlkU2VyaWFsaXplLFxuICBza2lwTm9ybWFsaXplOiB0cnVlXG59XG5cbmNvbnN0IFNDSEVNRVMgPSB7XG4gIGh0dHAsXG4gIGh0dHBzLFxuICB3cyxcbiAgd3NzLFxuICB1cm4sXG4gICd1cm46dXVpZCc6IHVybnV1aWRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTQ0hFTUVTXG4iLAogICAgIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IG5vcm1hbGl6ZUlQdjYsIG5vcm1hbGl6ZUlQdjQsIHJlbW92ZURvdFNlZ21lbnRzLCByZWNvbXBvc2VBdXRob3JpdHksIG5vcm1hbGl6ZUNvbXBvbmVudEVuY29kaW5nIH0gPSByZXF1aXJlKCcuL2xpYi91dGlscycpXG5jb25zdCBTQ0hFTUVTID0gcmVxdWlyZSgnLi9saWIvc2NoZW1lcycpXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZSAodXJpLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnc3RyaW5nJykge1xuICAgIHVyaSA9IHNlcmlhbGl6ZShwYXJzZSh1cmksIG9wdGlvbnMpLCBvcHRpb25zKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7XG4gICAgdXJpID0gcGFyc2Uoc2VyaWFsaXplKHVyaSwgb3B0aW9ucyksIG9wdGlvbnMpXG4gIH1cbiAgcmV0dXJuIHVyaVxufVxuXG5mdW5jdGlvbiByZXNvbHZlIChiYXNlVVJJLCByZWxhdGl2ZVVSSSwgb3B0aW9ucykge1xuICBjb25zdCBzY2hlbWVsZXNzT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBzY2hlbWU6ICdudWxsJyB9LCBvcHRpb25zKVxuICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmVDb21wb25lbnRzKHBhcnNlKGJhc2VVUkksIHNjaGVtZWxlc3NPcHRpb25zKSwgcGFyc2UocmVsYXRpdmVVUkksIHNjaGVtZWxlc3NPcHRpb25zKSwgc2NoZW1lbGVzc09wdGlvbnMsIHRydWUpXG4gIHJldHVybiBzZXJpYWxpemUocmVzb2x2ZWQsIHsgLi4uc2NoZW1lbGVzc09wdGlvbnMsIHNraXBFc2NhcGU6IHRydWUgfSlcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudHMgKGJhc2UsIHJlbGF0aXZlLCBvcHRpb25zLCBza2lwTm9ybWFsaXphdGlvbikge1xuICBjb25zdCB0YXJnZXQgPSB7fVxuICBpZiAoIXNraXBOb3JtYWxpemF0aW9uKSB7XG4gICAgYmFzZSA9IHBhcnNlKHNlcmlhbGl6ZShiYXNlLCBvcHRpb25zKSwgb3B0aW9ucykgLy8gbm9ybWFsaXplIGJhc2UgY29tcG9uZW50c1xuICAgIHJlbGF0aXZlID0gcGFyc2Uoc2VyaWFsaXplKHJlbGF0aXZlLCBvcHRpb25zKSwgb3B0aW9ucykgLy8gbm9ybWFsaXplIHJlbGF0aXZlIGNvbXBvbmVudHNcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmICghb3B0aW9ucy50b2xlcmFudCAmJiByZWxhdGl2ZS5zY2hlbWUpIHtcbiAgICB0YXJnZXQuc2NoZW1lID0gcmVsYXRpdmUuc2NoZW1lXG4gICAgLy8gdGFyZ2V0LmF1dGhvcml0eSA9IHJlbGF0aXZlLmF1dGhvcml0eTtcbiAgICB0YXJnZXQudXNlcmluZm8gPSByZWxhdGl2ZS51c2VyaW5mb1xuICAgIHRhcmdldC5ob3N0ID0gcmVsYXRpdmUuaG9zdFxuICAgIHRhcmdldC5wb3J0ID0gcmVsYXRpdmUucG9ydFxuICAgIHRhcmdldC5wYXRoID0gcmVtb3ZlRG90U2VnbWVudHMocmVsYXRpdmUucGF0aCB8fCAnJylcbiAgICB0YXJnZXQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeVxuICB9IGVsc2Uge1xuICAgIGlmIChyZWxhdGl2ZS51c2VyaW5mbyAhPT0gdW5kZWZpbmVkIHx8IHJlbGF0aXZlLmhvc3QgIT09IHVuZGVmaW5lZCB8fCByZWxhdGl2ZS5wb3J0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHRhcmdldC5hdXRob3JpdHkgPSByZWxhdGl2ZS5hdXRob3JpdHk7XG4gICAgICB0YXJnZXQudXNlcmluZm8gPSByZWxhdGl2ZS51c2VyaW5mb1xuICAgICAgdGFyZ2V0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0XG4gICAgICB0YXJnZXQucG9ydCA9IHJlbGF0aXZlLnBvcnRcbiAgICAgIHRhcmdldC5wYXRoID0gcmVtb3ZlRG90U2VnbWVudHMocmVsYXRpdmUucGF0aCB8fCAnJylcbiAgICAgIHRhcmdldC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghcmVsYXRpdmUucGF0aCkge1xuICAgICAgICB0YXJnZXQucGF0aCA9IGJhc2UucGF0aFxuICAgICAgICBpZiAocmVsYXRpdmUucXVlcnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRhcmdldC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0LnF1ZXJ5ID0gYmFzZS5xdWVyeVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVsYXRpdmUucGF0aC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgICAgIHRhcmdldC5wYXRoID0gcmVtb3ZlRG90U2VnbWVudHMocmVsYXRpdmUucGF0aClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoKGJhc2UudXNlcmluZm8gIT09IHVuZGVmaW5lZCB8fCBiYXNlLmhvc3QgIT09IHVuZGVmaW5lZCB8fCBiYXNlLnBvcnQgIT09IHVuZGVmaW5lZCkgJiYgIWJhc2UucGF0aCkge1xuICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSAnLycgKyByZWxhdGl2ZS5wYXRoXG4gICAgICAgICAgfSBlbHNlIGlmICghYmFzZS5wYXRoKSB7XG4gICAgICAgICAgICB0YXJnZXQucGF0aCA9IHJlbGF0aXZlLnBhdGhcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSBiYXNlLnBhdGguc2xpY2UoMCwgYmFzZS5wYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKSArIHJlbGF0aXZlLnBhdGhcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFyZ2V0LnBhdGggPSByZW1vdmVEb3RTZWdtZW50cyh0YXJnZXQucGF0aClcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeVxuICAgICAgfVxuICAgICAgLy8gdGFyZ2V0LmF1dGhvcml0eSA9IGJhc2UuYXV0aG9yaXR5O1xuICAgICAgdGFyZ2V0LnVzZXJpbmZvID0gYmFzZS51c2VyaW5mb1xuICAgICAgdGFyZ2V0Lmhvc3QgPSBiYXNlLmhvc3RcbiAgICAgIHRhcmdldC5wb3J0ID0gYmFzZS5wb3J0XG4gICAgfVxuICAgIHRhcmdldC5zY2hlbWUgPSBiYXNlLnNjaGVtZVxuICB9XG5cbiAgdGFyZ2V0LmZyYWdtZW50ID0gcmVsYXRpdmUuZnJhZ21lbnRcblxuICByZXR1cm4gdGFyZ2V0XG59XG5cbmZ1bmN0aW9uIGVxdWFsICh1cmlBLCB1cmlCLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgdXJpQSA9PT0gJ3N0cmluZycpIHtcbiAgICB1cmlBID0gdW5lc2NhcGUodXJpQSlcbiAgICB1cmlBID0gc2VyaWFsaXplKG5vcm1hbGl6ZUNvbXBvbmVudEVuY29kaW5nKHBhcnNlKHVyaUEsIG9wdGlvbnMpLCB0cnVlKSwgeyAuLi5vcHRpb25zLCBza2lwRXNjYXBlOiB0cnVlIH0pXG4gIH0gZWxzZSBpZiAodHlwZW9mIHVyaUEgPT09ICdvYmplY3QnKSB7XG4gICAgdXJpQSA9IHNlcmlhbGl6ZShub3JtYWxpemVDb21wb25lbnRFbmNvZGluZyh1cmlBLCB0cnVlKSwgeyAuLi5vcHRpb25zLCBza2lwRXNjYXBlOiB0cnVlIH0pXG4gIH1cblxuICBpZiAodHlwZW9mIHVyaUIgPT09ICdzdHJpbmcnKSB7XG4gICAgdXJpQiA9IHVuZXNjYXBlKHVyaUIpXG4gICAgdXJpQiA9IHNlcmlhbGl6ZShub3JtYWxpemVDb21wb25lbnRFbmNvZGluZyhwYXJzZSh1cmlCLCBvcHRpb25zKSwgdHJ1ZSksIHsgLi4ub3B0aW9ucywgc2tpcEVzY2FwZTogdHJ1ZSB9KVxuICB9IGVsc2UgaWYgKHR5cGVvZiB1cmlCID09PSAnb2JqZWN0Jykge1xuICAgIHVyaUIgPSBzZXJpYWxpemUobm9ybWFsaXplQ29tcG9uZW50RW5jb2RpbmcodXJpQiwgdHJ1ZSksIHsgLi4ub3B0aW9ucywgc2tpcEVzY2FwZTogdHJ1ZSB9KVxuICB9XG5cbiAgcmV0dXJuIHVyaUEudG9Mb3dlckNhc2UoKSA9PT0gdXJpQi50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZSAoY21wdHMsIG9wdHMpIHtcbiAgY29uc3QgY29tcG9uZW50cyA9IHtcbiAgICBob3N0OiBjbXB0cy5ob3N0LFxuICAgIHNjaGVtZTogY21wdHMuc2NoZW1lLFxuICAgIHVzZXJpbmZvOiBjbXB0cy51c2VyaW5mbyxcbiAgICBwb3J0OiBjbXB0cy5wb3J0LFxuICAgIHBhdGg6IGNtcHRzLnBhdGgsXG4gICAgcXVlcnk6IGNtcHRzLnF1ZXJ5LFxuICAgIG5pZDogY21wdHMubmlkLFxuICAgIG5zczogY21wdHMubnNzLFxuICAgIHV1aWQ6IGNtcHRzLnV1aWQsXG4gICAgZnJhZ21lbnQ6IGNtcHRzLmZyYWdtZW50LFxuICAgIHJlZmVyZW5jZTogY21wdHMucmVmZXJlbmNlLFxuICAgIHJlc291cmNlTmFtZTogY21wdHMucmVzb3VyY2VOYW1lLFxuICAgIHNlY3VyZTogY21wdHMuc2VjdXJlLFxuICAgIGVycm9yOiAnJ1xuICB9XG4gIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzKVxuICBjb25zdCB1cmlUb2tlbnMgPSBbXVxuXG4gIC8vIGZpbmQgc2NoZW1lIGhhbmRsZXJcbiAgY29uc3Qgc2NoZW1lSGFuZGxlciA9IFNDSEVNRVNbKG9wdGlvbnMuc2NoZW1lIHx8IGNvbXBvbmVudHMuc2NoZW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpXVxuXG4gIC8vIHBlcmZvcm0gc2NoZW1lIHNwZWNpZmljIHNlcmlhbGl6YXRpb25cbiAgaWYgKHNjaGVtZUhhbmRsZXIgJiYgc2NoZW1lSGFuZGxlci5zZXJpYWxpemUpIHNjaGVtZUhhbmRsZXIuc2VyaWFsaXplKGNvbXBvbmVudHMsIG9wdGlvbnMpXG5cbiAgaWYgKGNvbXBvbmVudHMucGF0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFvcHRpb25zLnNraXBFc2NhcGUpIHtcbiAgICAgIGNvbXBvbmVudHMucGF0aCA9IGVzY2FwZShjb21wb25lbnRzLnBhdGgpXG5cbiAgICAgIGlmIChjb21wb25lbnRzLnNjaGVtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbXBvbmVudHMucGF0aCA9IGNvbXBvbmVudHMucGF0aC5zcGxpdCgnJTNBJykuam9pbignOicpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBvbmVudHMucGF0aCA9IHVuZXNjYXBlKGNvbXBvbmVudHMucGF0aClcbiAgICB9XG4gIH1cblxuICBpZiAob3B0aW9ucy5yZWZlcmVuY2UgIT09ICdzdWZmaXgnICYmIGNvbXBvbmVudHMuc2NoZW1lKSB7XG4gICAgdXJpVG9rZW5zLnB1c2goY29tcG9uZW50cy5zY2hlbWUsICc6JylcbiAgfVxuXG4gIGNvbnN0IGF1dGhvcml0eSA9IHJlY29tcG9zZUF1dGhvcml0eShjb21wb25lbnRzKVxuICBpZiAoYXV0aG9yaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2UgIT09ICdzdWZmaXgnKSB7XG4gICAgICB1cmlUb2tlbnMucHVzaCgnLy8nKVxuICAgIH1cblxuICAgIHVyaVRva2Vucy5wdXNoKGF1dGhvcml0eSlcblxuICAgIGlmIChjb21wb25lbnRzLnBhdGggJiYgY29tcG9uZW50cy5wYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICB1cmlUb2tlbnMucHVzaCgnLycpXG4gICAgfVxuICB9XG4gIGlmIChjb21wb25lbnRzLnBhdGggIT09IHVuZGVmaW5lZCkge1xuICAgIGxldCBzID0gY29tcG9uZW50cy5wYXRoXG5cbiAgICBpZiAoIW9wdGlvbnMuYWJzb2x1dGVQYXRoICYmICghc2NoZW1lSGFuZGxlciB8fCAhc2NoZW1lSGFuZGxlci5hYnNvbHV0ZVBhdGgpKSB7XG4gICAgICBzID0gcmVtb3ZlRG90U2VnbWVudHMocylcbiAgICB9XG5cbiAgICBpZiAoYXV0aG9yaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHMgPSBzLnJlcGxhY2UoL15cXC9cXC8vdSwgJy8lMkYnKSAvLyBkb24ndCBhbGxvdyB0aGUgcGF0aCB0byBzdGFydCB3aXRoIFwiLy9cIlxuICAgIH1cblxuICAgIHVyaVRva2Vucy5wdXNoKHMpXG4gIH1cblxuICBpZiAoY29tcG9uZW50cy5xdWVyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdXJpVG9rZW5zLnB1c2goJz8nLCBjb21wb25lbnRzLnF1ZXJ5KVxuICB9XG5cbiAgaWYgKGNvbXBvbmVudHMuZnJhZ21lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgIHVyaVRva2Vucy5wdXNoKCcjJywgY29tcG9uZW50cy5mcmFnbWVudClcbiAgfVxuICByZXR1cm4gdXJpVG9rZW5zLmpvaW4oJycpXG59XG5cbmNvbnN0IGhleExvb2tVcCA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEyNyB9LCAoX3YsIGspID0+IC9bXiFcIiQmJygpKissXFwtLjs9X2BhLXp7fX5dL3UudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGspKSlcblxuZnVuY3Rpb24gbm9uU2ltcGxlRG9tYWluICh2YWx1ZSkge1xuICBsZXQgY29kZSA9IDBcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoaSlcbiAgICBpZiAoY29kZSA+IDEyNiB8fCBoZXhMb29rVXBbY29kZV0pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5jb25zdCBVUklfUEFSU0UgPSAvXig/OihbXiMvOj9dKyk6KT8oPzpcXC9cXC8oKD86KFteIy8/QF0qKUApPyhcXFtbXiMvP1xcXV0rXFxdfFteIy86P10qKSg/OjooXFxkKikpPykpPyhbXiM/XSopKD86XFw/KFteI10qKSk/KD86IygoPzoufFtcXG5cXHJdKSopKT8vdVxuXG5mdW5jdGlvbiBwYXJzZSAodXJpLCBvcHRzKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzKVxuICBjb25zdCBwYXJzZWQgPSB7XG4gICAgc2NoZW1lOiB1bmRlZmluZWQsXG4gICAgdXNlcmluZm86IHVuZGVmaW5lZCxcbiAgICBob3N0OiAnJyxcbiAgICBwb3J0OiB1bmRlZmluZWQsXG4gICAgcGF0aDogJycsXG4gICAgcXVlcnk6IHVuZGVmaW5lZCxcbiAgICBmcmFnbWVudDogdW5kZWZpbmVkXG4gIH1cbiAgY29uc3QgZ290RW5jb2RpbmcgPSB1cmkuaW5kZXhPZignJScpICE9PSAtMVxuICBsZXQgaXNJUCA9IGZhbHNlXG4gIGlmIChvcHRpb25zLnJlZmVyZW5jZSA9PT0gJ3N1ZmZpeCcpIHVyaSA9IChvcHRpb25zLnNjaGVtZSA/IG9wdGlvbnMuc2NoZW1lICsgJzonIDogJycpICsgJy8vJyArIHVyaVxuXG4gIGNvbnN0IG1hdGNoZXMgPSB1cmkubWF0Y2goVVJJX1BBUlNFKVxuXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgLy8gc3RvcmUgZWFjaCBjb21wb25lbnRcbiAgICBwYXJzZWQuc2NoZW1lID0gbWF0Y2hlc1sxXVxuICAgIHBhcnNlZC51c2VyaW5mbyA9IG1hdGNoZXNbM11cbiAgICBwYXJzZWQuaG9zdCA9IG1hdGNoZXNbNF1cbiAgICBwYXJzZWQucG9ydCA9IHBhcnNlSW50KG1hdGNoZXNbNV0sIDEwKVxuICAgIHBhcnNlZC5wYXRoID0gbWF0Y2hlc1s2XSB8fCAnJ1xuICAgIHBhcnNlZC5xdWVyeSA9IG1hdGNoZXNbN11cbiAgICBwYXJzZWQuZnJhZ21lbnQgPSBtYXRjaGVzWzhdXG5cbiAgICAvLyBmaXggcG9ydCBudW1iZXJcbiAgICBpZiAoaXNOYU4ocGFyc2VkLnBvcnQpKSB7XG4gICAgICBwYXJzZWQucG9ydCA9IG1hdGNoZXNbNV1cbiAgICB9XG4gICAgaWYgKHBhcnNlZC5ob3N0KSB7XG4gICAgICBjb25zdCBpcHY0cmVzdWx0ID0gbm9ybWFsaXplSVB2NChwYXJzZWQuaG9zdClcbiAgICAgIGlmIChpcHY0cmVzdWx0LmlzSVBWNCA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgaXB2NnJlc3VsdCA9IG5vcm1hbGl6ZUlQdjYoaXB2NHJlc3VsdC5ob3N0KVxuICAgICAgICBwYXJzZWQuaG9zdCA9IGlwdjZyZXN1bHQuaG9zdC50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGlzSVAgPSBpcHY2cmVzdWx0LmlzSVBWNlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkLmhvc3QgPSBpcHY0cmVzdWx0Lmhvc3RcbiAgICAgICAgaXNJUCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcnNlZC5zY2hlbWUgPT09IHVuZGVmaW5lZCAmJiBwYXJzZWQudXNlcmluZm8gPT09IHVuZGVmaW5lZCAmJiBwYXJzZWQuaG9zdCA9PT0gdW5kZWZpbmVkICYmIHBhcnNlZC5wb3J0ID09PSB1bmRlZmluZWQgJiYgcGFyc2VkLnF1ZXJ5ID09PSB1bmRlZmluZWQgJiYgIXBhcnNlZC5wYXRoKSB7XG4gICAgICBwYXJzZWQucmVmZXJlbmNlID0gJ3NhbWUtZG9jdW1lbnQnXG4gICAgfSBlbHNlIGlmIChwYXJzZWQuc2NoZW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcnNlZC5yZWZlcmVuY2UgPSAncmVsYXRpdmUnXG4gICAgfSBlbHNlIGlmIChwYXJzZWQuZnJhZ21lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyc2VkLnJlZmVyZW5jZSA9ICdhYnNvbHV0ZSdcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkLnJlZmVyZW5jZSA9ICd1cmknXG4gICAgfVxuXG4gICAgLy8gY2hlY2sgZm9yIHJlZmVyZW5jZSBlcnJvcnNcbiAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2UgJiYgb3B0aW9ucy5yZWZlcmVuY2UgIT09ICdzdWZmaXgnICYmIG9wdGlvbnMucmVmZXJlbmNlICE9PSBwYXJzZWQucmVmZXJlbmNlKSB7XG4gICAgICBwYXJzZWQuZXJyb3IgPSBwYXJzZWQuZXJyb3IgfHwgJ1VSSSBpcyBub3QgYSAnICsgb3B0aW9ucy5yZWZlcmVuY2UgKyAnIHJlZmVyZW5jZS4nXG4gICAgfVxuXG4gICAgLy8gZmluZCBzY2hlbWUgaGFuZGxlclxuICAgIGNvbnN0IHNjaGVtZUhhbmRsZXIgPSBTQ0hFTUVTWyhvcHRpb25zLnNjaGVtZSB8fCBwYXJzZWQuc2NoZW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpXVxuXG4gICAgLy8gY2hlY2sgaWYgc2NoZW1lIGNhbid0IGhhbmRsZSBJUklzXG4gICAgaWYgKCFvcHRpb25zLnVuaWNvZGVTdXBwb3J0ICYmICghc2NoZW1lSGFuZGxlciB8fCAhc2NoZW1lSGFuZGxlci51bmljb2RlU3VwcG9ydCkpIHtcbiAgICAgIC8vIGlmIGhvc3QgY29tcG9uZW50IGlzIGEgZG9tYWluIG5hbWVcbiAgICAgIGlmIChwYXJzZWQuaG9zdCAmJiAob3B0aW9ucy5kb21haW5Ib3N0IHx8IChzY2hlbWVIYW5kbGVyICYmIHNjaGVtZUhhbmRsZXIuZG9tYWluSG9zdCkpICYmIGlzSVAgPT09IGZhbHNlICYmIG5vblNpbXBsZURvbWFpbihwYXJzZWQuaG9zdCkpIHtcbiAgICAgICAgLy8gY29udmVydCBVbmljb2RlIElETiAtPiBBU0NJSSBJRE5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9IFVSTC5kb21haW5Ub0FTQ0lJKHBhcnNlZC5ob3N0LnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBwYXJzZWQuZXJyb3IgPSBwYXJzZWQuZXJyb3IgfHwgXCJIb3N0J3MgZG9tYWluIG5hbWUgY2FuIG5vdCBiZSBjb252ZXJ0ZWQgdG8gQVNDSUk6IFwiICsgZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBjb252ZXJ0IElSSSAtPiBVUklcbiAgICB9XG5cbiAgICBpZiAoIXNjaGVtZUhhbmRsZXIgfHwgKHNjaGVtZUhhbmRsZXIgJiYgIXNjaGVtZUhhbmRsZXIuc2tpcE5vcm1hbGl6ZSkpIHtcbiAgICAgIGlmIChnb3RFbmNvZGluZyAmJiBwYXJzZWQuc2NoZW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGFyc2VkLnNjaGVtZSA9IHVuZXNjYXBlKHBhcnNlZC5zY2hlbWUpXG4gICAgICB9XG4gICAgICBpZiAoZ290RW5jb2RpbmcgJiYgcGFyc2VkLmhvc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXJzZWQuaG9zdCA9IHVuZXNjYXBlKHBhcnNlZC5ob3N0KVxuICAgICAgfVxuICAgICAgaWYgKHBhcnNlZC5wYXRoKSB7XG4gICAgICAgIHBhcnNlZC5wYXRoID0gZXNjYXBlKHVuZXNjYXBlKHBhcnNlZC5wYXRoKSlcbiAgICAgIH1cbiAgICAgIGlmIChwYXJzZWQuZnJhZ21lbnQpIHtcbiAgICAgICAgcGFyc2VkLmZyYWdtZW50ID0gZW5jb2RlVVJJKGRlY29kZVVSSUNvbXBvbmVudChwYXJzZWQuZnJhZ21lbnQpKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBlcmZvcm0gc2NoZW1lIHNwZWNpZmljIHBhcnNpbmdcbiAgICBpZiAoc2NoZW1lSGFuZGxlciAmJiBzY2hlbWVIYW5kbGVyLnBhcnNlKSB7XG4gICAgICBzY2hlbWVIYW5kbGVyLnBhcnNlKHBhcnNlZCwgb3B0aW9ucylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGFyc2VkLmVycm9yID0gcGFyc2VkLmVycm9yIHx8ICdVUkkgY2FuIG5vdCBiZSBwYXJzZWQuJ1xuICB9XG4gIHJldHVybiBwYXJzZWRcbn1cblxuY29uc3QgZmFzdFVyaSA9IHtcbiAgU0NIRU1FUyxcbiAgbm9ybWFsaXplLFxuICByZXNvbHZlLFxuICByZXNvbHZlQ29tcG9uZW50cyxcbiAgZXF1YWwsXG4gIHNlcmlhbGl6ZSxcbiAgcGFyc2Vcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmYXN0VXJpXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZmFzdFVyaVxubW9kdWxlLmV4cG9ydHMuZmFzdFVyaSA9IGZhc3RVcmlcbiIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1cmkgPSByZXF1aXJlKFwiZmFzdC11cmlcIik7XG51cmkuY29kZSA9ICdyZXF1aXJlKFwiYWp2L2Rpc3QvcnVudGltZS91cmlcIikuZGVmYXVsdCc7XG5leHBvcnRzLmRlZmF1bHQgPSB1cmk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmkuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29kZUdlbiA9IGV4cG9ydHMuTmFtZSA9IGV4cG9ydHMubmlsID0gZXhwb3J0cy5zdHJpbmdpZnkgPSBleHBvcnRzLnN0ciA9IGV4cG9ydHMuXyA9IGV4cG9ydHMuS2V5d29yZEN4dCA9IHZvaWQgMDtcbnZhciB2YWxpZGF0ZV8xID0gcmVxdWlyZShcIi4vY29tcGlsZS92YWxpZGF0ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIktleXdvcmRDeHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRlXzEuS2V5d29yZEN4dDsgfSB9KTtcbnZhciBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi9jb21waWxlL2NvZGVnZW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlZ2VuXzEuXzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0clwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLnN0cjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0cmluZ2lmeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLnN0cmluZ2lmeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5pbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLm5pbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5hbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5OYW1lOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29kZUdlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLkNvZGVHZW47IH0gfSk7XG5jb25zdCB2YWxpZGF0aW9uX2Vycm9yXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lL3ZhbGlkYXRpb25fZXJyb3JcIik7XG5jb25zdCByZWZfZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvcmVmX2Vycm9yXCIpO1xuY29uc3QgcnVsZXNfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvcnVsZXNcIik7XG5jb25zdCBjb21waWxlXzEgPSByZXF1aXJlKFwiLi9jb21waWxlXCIpO1xuY29uc3QgY29kZWdlbl8yID0gcmVxdWlyZShcIi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgcmVzb2x2ZV8xID0gcmVxdWlyZShcIi4vY29tcGlsZS9yZXNvbHZlXCIpO1xuY29uc3QgZGF0YVR5cGVfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvdmFsaWRhdGUvZGF0YVR5cGVcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCAkZGF0YVJlZlNjaGVtYSA9IHJlcXVpcmUoXCIuL3JlZnMvZGF0YS5qc29uXCIpO1xuY29uc3QgdXJpXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lL3VyaVwiKTtcbmNvbnN0IGRlZmF1bHRSZWdFeHAgPSAoc3RyLCBmbGFncykgPT4gbmV3IFJlZ0V4cChzdHIsIGZsYWdzKTtcbmRlZmF1bHRSZWdFeHAuY29kZSA9IFwibmV3IFJlZ0V4cFwiO1xuY29uc3QgTUVUQV9JR05PUkVfT1BUSU9OUyA9IFtcInJlbW92ZUFkZGl0aW9uYWxcIiwgXCJ1c2VEZWZhdWx0c1wiLCBcImNvZXJjZVR5cGVzXCJdO1xuY29uc3QgRVhUX1NDT1BFX05BTUVTID0gbmV3IFNldChbXG4gICAgXCJ2YWxpZGF0ZVwiLFxuICAgIFwic2VyaWFsaXplXCIsXG4gICAgXCJwYXJzZVwiLFxuICAgIFwid3JhcHBlclwiLFxuICAgIFwicm9vdFwiLFxuICAgIFwic2NoZW1hXCIsXG4gICAgXCJrZXl3b3JkXCIsXG4gICAgXCJwYXR0ZXJuXCIsXG4gICAgXCJmb3JtYXRzXCIsXG4gICAgXCJ2YWxpZGF0ZSRkYXRhXCIsXG4gICAgXCJmdW5jXCIsXG4gICAgXCJvYmpcIixcbiAgICBcIkVycm9yXCIsXG5dKTtcbmNvbnN0IHJlbW92ZWRPcHRpb25zID0ge1xuICAgIGVycm9yRGF0YVBhdGg6IFwiXCIsXG4gICAgZm9ybWF0OiBcImB2YWxpZGF0ZUZvcm1hdHM6IGZhbHNlYCBjYW4gYmUgdXNlZCBpbnN0ZWFkLlwiLFxuICAgIG51bGxhYmxlOiAnXCJudWxsYWJsZVwiIGtleXdvcmQgaXMgc3VwcG9ydGVkIGJ5IGRlZmF1bHQuJyxcbiAgICBqc29uUG9pbnRlcnM6IFwiRGVwcmVjYXRlZCBqc1Byb3BlcnR5U3ludGF4IGNhbiBiZSB1c2VkIGluc3RlYWQuXCIsXG4gICAgZXh0ZW5kUmVmczogXCJEZXByZWNhdGVkIGlnbm9yZUtleXdvcmRzV2l0aFJlZiBjYW4gYmUgdXNlZCBpbnN0ZWFkLlwiLFxuICAgIG1pc3NpbmdSZWZzOiBcIlBhc3MgZW1wdHkgc2NoZW1hIHdpdGggJGlkIHRoYXQgc2hvdWxkIGJlIGlnbm9yZWQgdG8gYWp2LmFkZFNjaGVtYS5cIixcbiAgICBwcm9jZXNzQ29kZTogXCJVc2Ugb3B0aW9uIGBjb2RlOiB7cHJvY2VzczogKGNvZGUsIHNjaGVtYUVudjogb2JqZWN0KSA9PiBzdHJpbmd9YFwiLFxuICAgIHNvdXJjZUNvZGU6IFwiVXNlIG9wdGlvbiBgY29kZToge3NvdXJjZTogdHJ1ZX1gXCIsXG4gICAgc3RyaWN0RGVmYXVsdHM6IFwiSXQgaXMgZGVmYXVsdCBub3csIHNlZSBvcHRpb24gYHN0cmljdGAuXCIsXG4gICAgc3RyaWN0S2V5d29yZHM6IFwiSXQgaXMgZGVmYXVsdCBub3csIHNlZSBvcHRpb24gYHN0cmljdGAuXCIsXG4gICAgdW5pcXVlSXRlbXM6ICdcInVuaXF1ZUl0ZW1zXCIga2V5d29yZCBpcyBhbHdheXMgdmFsaWRhdGVkLicsXG4gICAgdW5rbm93bkZvcm1hdHM6IFwiRGlzYWJsZSBzdHJpY3QgbW9kZSBvciBwYXNzIGB0cnVlYCB0byBgYWp2LmFkZEZvcm1hdGAgKG9yIGBmb3JtYXRzYCBvcHRpb24pLlwiLFxuICAgIGNhY2hlOiBcIk1hcCBpcyB1c2VkIGFzIGNhY2hlLCBzY2hlbWEgb2JqZWN0IGFzIGtleS5cIixcbiAgICBzZXJpYWxpemU6IFwiTWFwIGlzIHVzZWQgYXMgY2FjaGUsIHNjaGVtYSBvYmplY3QgYXMga2V5LlwiLFxuICAgIGFqdkVycm9yczogXCJJdCBpcyBkZWZhdWx0IG5vdy5cIixcbn07XG5jb25zdCBkZXByZWNhdGVkT3B0aW9ucyA9IHtcbiAgICBpZ25vcmVLZXl3b3Jkc1dpdGhSZWY6IFwiXCIsXG4gICAganNQcm9wZXJ0eVN5bnRheDogXCJcIixcbiAgICB1bmljb2RlOiAnXCJtaW5MZW5ndGhcIi9cIm1heExlbmd0aFwiIGFjY291bnQgZm9yIHVuaWNvZGUgY2hhcmFjdGVycyBieSBkZWZhdWx0LicsXG59O1xuY29uc3QgTUFYX0VYUFJFU1NJT04gPSAyMDA7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gcmVxdWlyZWRPcHRpb25zKG8pIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbSwgX28sIF9wLCBfcSwgX3IsIF9zLCBfdCwgX3UsIF92LCBfdywgX3gsIF95LCBfeiwgXzA7XG4gICAgY29uc3QgcyA9IG8uc3RyaWN0O1xuICAgIGNvbnN0IF9vcHR6ID0gKF9hID0gby5jb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3B0aW1pemU7XG4gICAgY29uc3Qgb3B0aW1pemUgPSBfb3B0eiA9PT0gdHJ1ZSB8fCBfb3B0eiA9PT0gdW5kZWZpbmVkID8gMSA6IF9vcHR6IHx8IDA7XG4gICAgY29uc3QgcmVnRXhwID0gKF9jID0gKF9iID0gby5jb2RlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVnRXhwKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBkZWZhdWx0UmVnRXhwO1xuICAgIGNvbnN0IHVyaVJlc29sdmVyID0gKF9kID0gby51cmlSZXNvbHZlcikgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogdXJpXzEuZGVmYXVsdDtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdHJpY3RTY2hlbWE6IChfZiA9IChfZSA9IG8uc3RyaWN0U2NoZW1hKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBzKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiB0cnVlLFxuICAgICAgICBzdHJpY3ROdW1iZXJzOiAoX2ggPSAoX2cgPSBvLnN0cmljdE51bWJlcnMpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IHMpICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IHRydWUsXG4gICAgICAgIHN0cmljdFR5cGVzOiAoX2sgPSAoX2ogPSBvLnN0cmljdFR5cGVzKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiBzKSAhPT0gbnVsbCAmJiBfayAhPT0gdm9pZCAwID8gX2sgOiBcImxvZ1wiLFxuICAgICAgICBzdHJpY3RUdXBsZXM6IChfbSA9IChfbCA9IG8uc3RyaWN0VHVwbGVzKSAhPT0gbnVsbCAmJiBfbCAhPT0gdm9pZCAwID8gX2wgOiBzKSAhPT0gbnVsbCAmJiBfbSAhPT0gdm9pZCAwID8gX20gOiBcImxvZ1wiLFxuICAgICAgICBzdHJpY3RSZXF1aXJlZDogKF9wID0gKF9vID0gby5zdHJpY3RSZXF1aXJlZCkgIT09IG51bGwgJiYgX28gIT09IHZvaWQgMCA/IF9vIDogcykgIT09IG51bGwgJiYgX3AgIT09IHZvaWQgMCA/IF9wIDogZmFsc2UsXG4gICAgICAgIGNvZGU6IG8uY29kZSA/IHsgLi4uby5jb2RlLCBvcHRpbWl6ZSwgcmVnRXhwIH0gOiB7IG9wdGltaXplLCByZWdFeHAgfSxcbiAgICAgICAgbG9vcFJlcXVpcmVkOiAoX3EgPSBvLmxvb3BSZXF1aXJlZCkgIT09IG51bGwgJiYgX3EgIT09IHZvaWQgMCA/IF9xIDogTUFYX0VYUFJFU1NJT04sXG4gICAgICAgIGxvb3BFbnVtOiAoX3IgPSBvLmxvb3BFbnVtKSAhPT0gbnVsbCAmJiBfciAhPT0gdm9pZCAwID8gX3IgOiBNQVhfRVhQUkVTU0lPTixcbiAgICAgICAgbWV0YTogKF9zID0gby5tZXRhKSAhPT0gbnVsbCAmJiBfcyAhPT0gdm9pZCAwID8gX3MgOiB0cnVlLFxuICAgICAgICBtZXNzYWdlczogKF90ID0gby5tZXNzYWdlcykgIT09IG51bGwgJiYgX3QgIT09IHZvaWQgMCA/IF90IDogdHJ1ZSxcbiAgICAgICAgaW5saW5lUmVmczogKF91ID0gby5pbmxpbmVSZWZzKSAhPT0gbnVsbCAmJiBfdSAhPT0gdm9pZCAwID8gX3UgOiB0cnVlLFxuICAgICAgICBzY2hlbWFJZDogKF92ID0gby5zY2hlbWFJZCkgIT09IG51bGwgJiYgX3YgIT09IHZvaWQgMCA/IF92IDogXCIkaWRcIixcbiAgICAgICAgYWRkVXNlZFNjaGVtYTogKF93ID0gby5hZGRVc2VkU2NoZW1hKSAhPT0gbnVsbCAmJiBfdyAhPT0gdm9pZCAwID8gX3cgOiB0cnVlLFxuICAgICAgICB2YWxpZGF0ZVNjaGVtYTogKF94ID0gby52YWxpZGF0ZVNjaGVtYSkgIT09IG51bGwgJiYgX3ggIT09IHZvaWQgMCA/IF94IDogdHJ1ZSxcbiAgICAgICAgdmFsaWRhdGVGb3JtYXRzOiAoX3kgPSBvLnZhbGlkYXRlRm9ybWF0cykgIT09IG51bGwgJiYgX3kgIT09IHZvaWQgMCA/IF95IDogdHJ1ZSxcbiAgICAgICAgdW5pY29kZVJlZ0V4cDogKF96ID0gby51bmljb2RlUmVnRXhwKSAhPT0gbnVsbCAmJiBfeiAhPT0gdm9pZCAwID8gX3ogOiB0cnVlLFxuICAgICAgICBpbnQzMnJhbmdlOiAoXzAgPSBvLmludDMycmFuZ2UpICE9PSBudWxsICYmIF8wICE9PSB2b2lkIDAgPyBfMCA6IHRydWUsXG4gICAgICAgIHVyaVJlc29sdmVyOiB1cmlSZXNvbHZlcixcbiAgICB9O1xufVxuY2xhc3MgQWp2IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICAgICAgdGhpcy5zY2hlbWFzID0ge307XG4gICAgICAgIHRoaXMucmVmcyA9IHt9O1xuICAgICAgICB0aGlzLmZvcm1hdHMgPSB7fTtcbiAgICAgICAgdGhpcy5fY29tcGlsYXRpb25zID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLl9sb2FkaW5nID0ge307XG4gICAgICAgIHRoaXMuX2NhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICBvcHRzID0gdGhpcy5vcHRzID0geyAuLi5vcHRzLCAuLi5yZXF1aXJlZE9wdGlvbnMob3B0cykgfTtcbiAgICAgICAgY29uc3QgeyBlczUsIGxpbmVzIH0gPSB0aGlzLm9wdHMuY29kZTtcbiAgICAgICAgdGhpcy5zY29wZSA9IG5ldyBjb2RlZ2VuXzIuVmFsdWVTY29wZSh7IHNjb3BlOiB7fSwgcHJlZml4ZXM6IEVYVF9TQ09QRV9OQU1FUywgZXM1LCBsaW5lcyB9KTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBnZXRMb2dnZXIob3B0cy5sb2dnZXIpO1xuICAgICAgICBjb25zdCBmb3JtYXRPcHQgPSBvcHRzLnZhbGlkYXRlRm9ybWF0cztcbiAgICAgICAgb3B0cy52YWxpZGF0ZUZvcm1hdHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5SVUxFUyA9ICgwLCBydWxlc18xLmdldFJ1bGVzKSgpO1xuICAgICAgICBjaGVja09wdGlvbnMuY2FsbCh0aGlzLCByZW1vdmVkT3B0aW9ucywgb3B0cywgXCJOT1QgU1VQUE9SVEVEXCIpO1xuICAgICAgICBjaGVja09wdGlvbnMuY2FsbCh0aGlzLCBkZXByZWNhdGVkT3B0aW9ucywgb3B0cywgXCJERVBSRUNBVEVEXCIsIFwid2FyblwiKTtcbiAgICAgICAgdGhpcy5fbWV0YU9wdHMgPSBnZXRNZXRhU2NoZW1hT3B0aW9ucy5jYWxsKHRoaXMpO1xuICAgICAgICBpZiAob3B0cy5mb3JtYXRzKVxuICAgICAgICAgICAgYWRkSW5pdGlhbEZvcm1hdHMuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fYWRkVm9jYWJ1bGFyaWVzKCk7XG4gICAgICAgIHRoaXMuX2FkZERlZmF1bHRNZXRhU2NoZW1hKCk7XG4gICAgICAgIGlmIChvcHRzLmtleXdvcmRzKVxuICAgICAgICAgICAgYWRkSW5pdGlhbEtleXdvcmRzLmNhbGwodGhpcywgb3B0cy5rZXl3b3Jkcyk7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0cy5tZXRhID09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICB0aGlzLmFkZE1ldGFTY2hlbWEob3B0cy5tZXRhKTtcbiAgICAgICAgYWRkSW5pdGlhbFNjaGVtYXMuY2FsbCh0aGlzKTtcbiAgICAgICAgb3B0cy52YWxpZGF0ZUZvcm1hdHMgPSBmb3JtYXRPcHQ7XG4gICAgfVxuICAgIF9hZGRWb2NhYnVsYXJpZXMoKSB7XG4gICAgICAgIHRoaXMuYWRkS2V5d29yZChcIiRhc3luY1wiKTtcbiAgICB9XG4gICAgX2FkZERlZmF1bHRNZXRhU2NoZW1hKCkge1xuICAgICAgICBjb25zdCB7ICRkYXRhLCBtZXRhLCBzY2hlbWFJZCB9ID0gdGhpcy5vcHRzO1xuICAgICAgICBsZXQgX2RhdGFSZWZTY2hlbWEgPSAkZGF0YVJlZlNjaGVtYTtcbiAgICAgICAgaWYgKHNjaGVtYUlkID09PSBcImlkXCIpIHtcbiAgICAgICAgICAgIF9kYXRhUmVmU2NoZW1hID0geyAuLi4kZGF0YVJlZlNjaGVtYSB9O1xuICAgICAgICAgICAgX2RhdGFSZWZTY2hlbWEuaWQgPSBfZGF0YVJlZlNjaGVtYS4kaWQ7XG4gICAgICAgICAgICBkZWxldGUgX2RhdGFSZWZTY2hlbWEuJGlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXRhICYmICRkYXRhKVxuICAgICAgICAgICAgdGhpcy5hZGRNZXRhU2NoZW1hKF9kYXRhUmVmU2NoZW1hLCBfZGF0YVJlZlNjaGVtYVtzY2hlbWFJZF0sIGZhbHNlKTtcbiAgICB9XG4gICAgZGVmYXVsdE1ldGEoKSB7XG4gICAgICAgIGNvbnN0IHsgbWV0YSwgc2NoZW1hSWQgfSA9IHRoaXMub3B0cztcbiAgICAgICAgcmV0dXJuICh0aGlzLm9wdHMuZGVmYXVsdE1ldGEgPSB0eXBlb2YgbWV0YSA9PSBcIm9iamVjdFwiID8gbWV0YVtzY2hlbWFJZF0gfHwgbWV0YSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHZhbGlkYXRlKHNjaGVtYUtleVJlZiwgLy8ga2V5LCByZWYgb3Igc2NoZW1hIG9iamVjdFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkdW5kYW50LXR5cGUtY29uc3RpdHVlbnRzXG4gICAgZGF0YSAvLyB0byBiZSB2YWxpZGF0ZWRcbiAgICApIHtcbiAgICAgICAgbGV0IHY7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hS2V5UmVmID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHYgPSB0aGlzLmdldFNjaGVtYShzY2hlbWFLZXlSZWYpO1xuICAgICAgICAgICAgaWYgKCF2KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbm8gc2NoZW1hIHdpdGgga2V5IG9yIHJlZiBcIiR7c2NoZW1hS2V5UmVmfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2ID0gdGhpcy5jb21waWxlKHNjaGVtYUtleVJlZik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsaWQgPSB2KGRhdGEpO1xuICAgICAgICBpZiAoIShcIiRhc3luY1wiIGluIHYpKVxuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB2LmVycm9ycztcbiAgICAgICAgcmV0dXJuIHZhbGlkO1xuICAgIH1cbiAgICBjb21waWxlKHNjaGVtYSwgX21ldGEpIHtcbiAgICAgICAgY29uc3Qgc2NoID0gdGhpcy5fYWRkU2NoZW1hKHNjaGVtYSwgX21ldGEpO1xuICAgICAgICByZXR1cm4gKHNjaC52YWxpZGF0ZSB8fCB0aGlzLl9jb21waWxlU2NoZW1hRW52KHNjaCkpO1xuICAgIH1cbiAgICBjb21waWxlQXN5bmMoc2NoZW1hLCBtZXRhKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRzLmxvYWRTY2hlbWEgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvcHRpb25zLmxvYWRTY2hlbWEgc2hvdWxkIGJlIGEgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBsb2FkU2NoZW1hIH0gPSB0aGlzLm9wdHM7XG4gICAgICAgIHJldHVybiBydW5Db21waWxlQXN5bmMuY2FsbCh0aGlzLCBzY2hlbWEsIG1ldGEpO1xuICAgICAgICBhc3luYyBmdW5jdGlvbiBydW5Db21waWxlQXN5bmMoX3NjaGVtYSwgX21ldGEpIHtcbiAgICAgICAgICAgIGF3YWl0IGxvYWRNZXRhU2NoZW1hLmNhbGwodGhpcywgX3NjaGVtYS4kc2NoZW1hKTtcbiAgICAgICAgICAgIGNvbnN0IHNjaCA9IHRoaXMuX2FkZFNjaGVtYShfc2NoZW1hLCBfbWV0YSk7XG4gICAgICAgICAgICByZXR1cm4gc2NoLnZhbGlkYXRlIHx8IF9jb21waWxlQXN5bmMuY2FsbCh0aGlzLCBzY2gpO1xuICAgICAgICB9XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGxvYWRNZXRhU2NoZW1hKCRyZWYpIHtcbiAgICAgICAgICAgIGlmICgkcmVmICYmICF0aGlzLmdldFNjaGVtYSgkcmVmKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHJ1bkNvbXBpbGVBc3luYy5jYWxsKHRoaXMsIHsgJHJlZiB9LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3luYyBmdW5jdGlvbiBfY29tcGlsZUFzeW5jKHNjaCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29tcGlsZVNjaGVtYUVudihzY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgcmVmX2Vycm9yXzEuZGVmYXVsdCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgY2hlY2tMb2FkZWQuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2FkTWlzc2luZ1NjaGVtYS5jYWxsKHRoaXMsIGUubWlzc2luZ1NjaGVtYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb21waWxlQXN5bmMuY2FsbCh0aGlzLCBzY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrTG9hZGVkKHsgbWlzc2luZ1NjaGVtYTogcmVmLCBtaXNzaW5nUmVmIH0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlZnNbcmVmXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQW55U2NoZW1hICR7cmVmfSBpcyBsb2FkZWQgYnV0ICR7bWlzc2luZ1JlZn0gY2Fubm90IGJlIHJlc29sdmVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gbG9hZE1pc3NpbmdTY2hlbWEocmVmKSB7XG4gICAgICAgICAgICBjb25zdCBfc2NoZW1hID0gYXdhaXQgX2xvYWRTY2hlbWEuY2FsbCh0aGlzLCByZWYpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnJlZnNbcmVmXSlcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2FkTWV0YVNjaGVtYS5jYWxsKHRoaXMsIF9zY2hlbWEuJHNjaGVtYSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmVmc1tyZWZdKVxuICAgICAgICAgICAgICAgIHRoaXMuYWRkU2NoZW1hKF9zY2hlbWEsIHJlZiwgbWV0YSk7XG4gICAgICAgIH1cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gX2xvYWRTY2hlbWEocmVmKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gdGhpcy5fbG9hZGluZ1tyZWZdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCAodGhpcy5fbG9hZGluZ1tyZWZdID0gbG9hZFNjaGVtYShyZWYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9sb2FkaW5nW3JlZl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQWRkcyBzY2hlbWEgdG8gdGhlIGluc3RhbmNlXG4gICAgYWRkU2NoZW1hKHNjaGVtYSwgLy8gSWYgYXJyYXkgaXMgcGFzc2VkLCBga2V5YCB3aWxsIGJlIGlnbm9yZWRcbiAgICBrZXksIC8vIE9wdGlvbmFsIHNjaGVtYSBrZXkuIENhbiBiZSBwYXNzZWQgdG8gYHZhbGlkYXRlYCBtZXRob2QgaW5zdGVhZCBvZiBzY2hlbWEgb2JqZWN0IG9yIGlkL3JlZi4gT25lIHNjaGVtYSBwZXIgaW5zdGFuY2UgY2FuIGhhdmUgZW1wdHkgYGlkYCBhbmQgYGtleWAuXG4gICAgX21ldGEsIC8vIHRydWUgaWYgc2NoZW1hIGlzIGEgbWV0YS1zY2hlbWEuIFVzZWQgaW50ZXJuYWxseSwgYWRkTWV0YVNjaGVtYSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICAgIF92YWxpZGF0ZVNjaGVtYSA9IHRoaXMub3B0cy52YWxpZGF0ZVNjaGVtYSAvLyBmYWxzZSB0byBza2lwIHNjaGVtYSB2YWxpZGF0aW9uLiBVc2VkIGludGVybmFsbHksIG9wdGlvbiB2YWxpZGF0ZVNjaGVtYSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICAgICkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNjaCBvZiBzY2hlbWEpXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTY2hlbWEoc2NoLCB1bmRlZmluZWQsIF9tZXRhLCBfdmFsaWRhdGVTY2hlbWEpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGlkO1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc3QgeyBzY2hlbWFJZCB9ID0gdGhpcy5vcHRzO1xuICAgICAgICAgICAgaWQgPSBzY2hlbWFbc2NoZW1hSWRdO1xuICAgICAgICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGlkICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHNjaGVtYSAke3NjaGVtYUlkfSBtdXN0IGJlIHN0cmluZ2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGtleSA9ICgwLCByZXNvbHZlXzEubm9ybWFsaXplSWQpKGtleSB8fCBpZCk7XG4gICAgICAgIHRoaXMuX2NoZWNrVW5pcXVlKGtleSk7XG4gICAgICAgIHRoaXMuc2NoZW1hc1trZXldID0gdGhpcy5fYWRkU2NoZW1hKHNjaGVtYSwgX21ldGEsIGtleSwgX3ZhbGlkYXRlU2NoZW1hLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIEFkZCBzY2hlbWEgdGhhdCB3aWxsIGJlIHVzZWQgdG8gdmFsaWRhdGUgb3RoZXIgc2NoZW1hc1xuICAgIC8vIG9wdGlvbnMgaW4gTUVUQV9JR05PUkVfT1BUSU9OUyBhcmUgYWx3YXkgc2V0IHRvIGZhbHNlXG4gICAgYWRkTWV0YVNjaGVtYShzY2hlbWEsIGtleSwgLy8gc2NoZW1hIGtleVxuICAgIF92YWxpZGF0ZVNjaGVtYSA9IHRoaXMub3B0cy52YWxpZGF0ZVNjaGVtYSAvLyBmYWxzZSB0byBza2lwIHNjaGVtYSB2YWxpZGF0aW9uLCBjYW4gYmUgdXNlZCB0byBvdmVycmlkZSB2YWxpZGF0ZVNjaGVtYSBvcHRpb24gZm9yIG1ldGEtc2NoZW1hXG4gICAgKSB7XG4gICAgICAgIHRoaXMuYWRkU2NoZW1hKHNjaGVtYSwga2V5LCB0cnVlLCBfdmFsaWRhdGVTY2hlbWEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gIFZhbGlkYXRlIHNjaGVtYSBhZ2FpbnN0IGl0cyBtZXRhLXNjaGVtYVxuICAgIHZhbGlkYXRlU2NoZW1hKHNjaGVtYSwgdGhyb3dPckxvZ0Vycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09IFwiYm9vbGVhblwiKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGxldCAkc2NoZW1hO1xuICAgICAgICAkc2NoZW1hID0gc2NoZW1hLiRzY2hlbWE7XG4gICAgICAgIGlmICgkc2NoZW1hICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mICRzY2hlbWEgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJHNjaGVtYSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgICRzY2hlbWEgPSAkc2NoZW1hIHx8IHRoaXMub3B0cy5kZWZhdWx0TWV0YSB8fCB0aGlzLmRlZmF1bHRNZXRhKCk7XG4gICAgICAgIGlmICghJHNjaGVtYSkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcIm1ldGEtc2NoZW1hIG5vdCBhdmFpbGFibGVcIik7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWxpZCA9IHRoaXMudmFsaWRhdGUoJHNjaGVtYSwgc2NoZW1hKTtcbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0aHJvd09yTG9nRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBcInNjaGVtYSBpcyBpbnZhbGlkOiBcIiArIHRoaXMuZXJyb3JzVGV4dCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy52YWxpZGF0ZVNjaGVtYSA9PT0gXCJsb2dcIilcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbGlkO1xuICAgIH1cbiAgICAvLyBHZXQgY29tcGlsZWQgc2NoZW1hIGJ5IGBrZXlgIG9yIGByZWZgLlxuICAgIC8vIChga2V5YCB0aGF0IHdhcyBwYXNzZWQgdG8gYGFkZFNjaGVtYWAgb3IgZnVsbCBzY2hlbWEgcmVmZXJlbmNlIC0gYHNjaGVtYS4kaWRgIG9yIHJlc29sdmVkIGlkKVxuICAgIGdldFNjaGVtYShrZXlSZWYpIHtcbiAgICAgICAgbGV0IHNjaDtcbiAgICAgICAgd2hpbGUgKHR5cGVvZiAoc2NoID0gZ2V0U2NoRW52LmNhbGwodGhpcywga2V5UmVmKSkgPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIGtleVJlZiA9IHNjaDtcbiAgICAgICAgaWYgKHNjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCB7IHNjaGVtYUlkIH0gPSB0aGlzLm9wdHM7XG4gICAgICAgICAgICBjb25zdCByb290ID0gbmV3IGNvbXBpbGVfMS5TY2hlbWFFbnYoeyBzY2hlbWE6IHt9LCBzY2hlbWFJZCB9KTtcbiAgICAgICAgICAgIHNjaCA9IGNvbXBpbGVfMS5yZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwga2V5UmVmKTtcbiAgICAgICAgICAgIGlmICghc2NoKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMucmVmc1trZXlSZWZdID0gc2NoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoc2NoLnZhbGlkYXRlIHx8IHRoaXMuX2NvbXBpbGVTY2hlbWFFbnYoc2NoKSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBjYWNoZWQgc2NoZW1hKHMpLlxuICAgIC8vIElmIG5vIHBhcmFtZXRlciBpcyBwYXNzZWQgYWxsIHNjaGVtYXMgYnV0IG1ldGEtc2NoZW1hcyBhcmUgcmVtb3ZlZC5cbiAgICAvLyBJZiBSZWdFeHAgaXMgcGFzc2VkIGFsbCBzY2hlbWFzIHdpdGgga2V5L2lkIG1hdGNoaW5nIHBhdHRlcm4gYnV0IG1ldGEtc2NoZW1hcyBhcmUgcmVtb3ZlZC5cbiAgICAvLyBFdmVuIGlmIHNjaGVtYSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIHNjaGVtYXMgaXQgc3RpbGwgY2FuIGJlIHJlbW92ZWQgYXMgb3RoZXIgc2NoZW1hcyBoYXZlIGxvY2FsIHJlZmVyZW5jZXMuXG4gICAgcmVtb3ZlU2NoZW1hKHNjaGVtYUtleVJlZikge1xuICAgICAgICBpZiAoc2NoZW1hS2V5UmVmIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVBbGxTY2hlbWFzKHRoaXMuc2NoZW1hcywgc2NoZW1hS2V5UmVmKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUFsbFNjaGVtYXModGhpcy5yZWZzLCBzY2hlbWFLZXlSZWYpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0eXBlb2Ygc2NoZW1hS2V5UmVmKSB7XG4gICAgICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWxsU2NoZW1hcyh0aGlzLnNjaGVtYXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUFsbFNjaGVtYXModGhpcy5yZWZzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NoID0gZ2V0U2NoRW52LmNhbGwodGhpcywgc2NoZW1hS2V5UmVmKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaCA9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5kZWxldGUoc2NoLnNjaGVtYSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2NoZW1hc1tzY2hlbWFLZXlSZWZdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlZnNbc2NoZW1hS2V5UmVmXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gc2NoZW1hS2V5UmVmO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLmRlbGV0ZShjYWNoZUtleSk7XG4gICAgICAgICAgICAgICAgbGV0IGlkID0gc2NoZW1hS2V5UmVmW3RoaXMub3B0cy5zY2hlbWFJZF07XG4gICAgICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlkID0gKDAsIHJlc29sdmVfMS5ub3JtYWxpemVJZCkoaWQpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zY2hlbWFzW2lkXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVmc1tpZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhanYucmVtb3ZlU2NoZW1hOiBpbnZhbGlkIHBhcmFtZXRlclwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhZGQgXCJ2b2NhYnVsYXJ5XCIgLSBhIGNvbGxlY3Rpb24gb2Yga2V5d29yZHNcbiAgICBhZGRWb2NhYnVsYXJ5KGRlZmluaXRpb25zKSB7XG4gICAgICAgIGZvciAoY29uc3QgZGVmIG9mIGRlZmluaXRpb25zKVxuICAgICAgICAgICAgdGhpcy5hZGRLZXl3b3JkKGRlZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRLZXl3b3JkKGt3ZE9yRGVmLCBkZWYgLy8gZGVwcmVjYXRlZFxuICAgICkge1xuICAgICAgICBsZXQga2V5d29yZDtcbiAgICAgICAgaWYgKHR5cGVvZiBrd2RPckRlZiA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBrZXl3b3JkID0ga3dkT3JEZWY7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZiA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcInRoZXNlIHBhcmFtZXRlcnMgYXJlIGRlcHJlY2F0ZWQsIHNlZSBkb2NzIGZvciBhZGRLZXl3b3JkXCIpO1xuICAgICAgICAgICAgICAgIGRlZi5rZXl3b3JkID0ga2V5d29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Yga3dkT3JEZWYgPT0gXCJvYmplY3RcIiAmJiBkZWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVmID0ga3dkT3JEZWY7XG4gICAgICAgICAgICBrZXl3b3JkID0gZGVmLmtleXdvcmQ7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXl3b3JkKSAmJiAha2V5d29yZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRLZXl3b3Jkczoga2V5d29yZCBtdXN0IGJlIHN0cmluZyBvciBub24tZW1wdHkgYXJyYXlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGFkZEtleXdvcmRzIHBhcmFtZXRlcnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tLZXl3b3JkLmNhbGwodGhpcywga2V5d29yZCwgZGVmKTtcbiAgICAgICAgaWYgKCFkZWYpIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEuZWFjaEl0ZW0pKGtleXdvcmQsIChrd2QpID0+IGFkZFJ1bGUuY2FsbCh0aGlzLCBrd2QpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGtleXdvcmRNZXRhc2NoZW1hLmNhbGwodGhpcywgZGVmKTtcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICAgIC4uLmRlZixcbiAgICAgICAgICAgIHR5cGU6ICgwLCBkYXRhVHlwZV8xLmdldEpTT05UeXBlcykoZGVmLnR5cGUpLFxuICAgICAgICAgICAgc2NoZW1hVHlwZTogKDAsIGRhdGFUeXBlXzEuZ2V0SlNPTlR5cGVzKShkZWYuc2NoZW1hVHlwZSksXG4gICAgICAgIH07XG4gICAgICAgICgwLCB1dGlsXzEuZWFjaEl0ZW0pKGtleXdvcmQsIGRlZmluaXRpb24udHlwZS5sZW5ndGggPT09IDBcbiAgICAgICAgICAgID8gKGspID0+IGFkZFJ1bGUuY2FsbCh0aGlzLCBrLCBkZWZpbml0aW9uKVxuICAgICAgICAgICAgOiAoaykgPT4gZGVmaW5pdGlvbi50eXBlLmZvckVhY2goKHQpID0+IGFkZFJ1bGUuY2FsbCh0aGlzLCBrLCBkZWZpbml0aW9uLCB0KSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0S2V5d29yZChrZXl3b3JkKSB7XG4gICAgICAgIGNvbnN0IHJ1bGUgPSB0aGlzLlJVTEVTLmFsbFtrZXl3b3JkXTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBydWxlID09IFwib2JqZWN0XCIgPyBydWxlLmRlZmluaXRpb24gOiAhIXJ1bGU7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBrZXl3b3JkXG4gICAgcmVtb3ZlS2V5d29yZChrZXl3b3JkKSB7XG4gICAgICAgIC8vIFRPRE8gcmV0dXJuIHR5cGUgc2hvdWxkIGJlIEFqdlxuICAgICAgICBjb25zdCB7IFJVTEVTIH0gPSB0aGlzO1xuICAgICAgICBkZWxldGUgUlVMRVMua2V5d29yZHNba2V5d29yZF07XG4gICAgICAgIGRlbGV0ZSBSVUxFUy5hbGxba2V5d29yZF07XG4gICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgUlVMRVMucnVsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBncm91cC5ydWxlcy5maW5kSW5kZXgoKHJ1bGUpID0+IHJ1bGUua2V5d29yZCA9PT0ga2V5d29yZCk7XG4gICAgICAgICAgICBpZiAoaSA+PSAwKVxuICAgICAgICAgICAgICAgIGdyb3VwLnJ1bGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gQWRkIGZvcm1hdFxuICAgIGFkZEZvcm1hdChuYW1lLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXQgPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIGZvcm1hdCA9IG5ldyBSZWdFeHAoZm9ybWF0KTtcbiAgICAgICAgdGhpcy5mb3JtYXRzW25hbWVdID0gZm9ybWF0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZXJyb3JzVGV4dChlcnJvcnMgPSB0aGlzLmVycm9ycywgLy8gb3B0aW9uYWwgYXJyYXkgb2YgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICB7IHNlcGFyYXRvciA9IFwiLCBcIiwgZGF0YVZhciA9IFwiZGF0YVwiIH0gPSB7fSAvLyBvcHRpb25hbCBvcHRpb25zIHdpdGggcHJvcGVydGllcyBgc2VwYXJhdG9yYCBhbmQgYGRhdGFWYXJgXG4gICAgKSB7XG4gICAgICAgIGlmICghZXJyb3JzIHx8IGVycm9ycy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gXCJObyBlcnJvcnNcIjtcbiAgICAgICAgcmV0dXJuIGVycm9yc1xuICAgICAgICAgICAgLm1hcCgoZSkgPT4gYCR7ZGF0YVZhcn0ke2UuaW5zdGFuY2VQYXRofSAke2UubWVzc2FnZX1gKVxuICAgICAgICAgICAgLnJlZHVjZSgodGV4dCwgbXNnKSA9PiB0ZXh0ICsgc2VwYXJhdG9yICsgbXNnKTtcbiAgICB9XG4gICAgJGRhdGFNZXRhU2NoZW1hKG1ldGFTY2hlbWEsIGtleXdvcmRzSnNvblBvaW50ZXJzKSB7XG4gICAgICAgIGNvbnN0IHJ1bGVzID0gdGhpcy5SVUxFUy5hbGw7XG4gICAgICAgIG1ldGFTY2hlbWEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG1ldGFTY2hlbWEpKTtcbiAgICAgICAgZm9yIChjb25zdCBqc29uUG9pbnRlciBvZiBrZXl3b3Jkc0pzb25Qb2ludGVycykge1xuICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBqc29uUG9pbnRlci5zcGxpdChcIi9cIikuc2xpY2UoMSk7IC8vIGZpcnN0IHNlZ21lbnQgaXMgYW4gZW1wdHkgc3RyaW5nXG4gICAgICAgICAgICBsZXQga2V5d29yZHMgPSBtZXRhU2NoZW1hO1xuICAgICAgICAgICAgZm9yIChjb25zdCBzZWcgb2Ygc2VnbWVudHMpXG4gICAgICAgICAgICAgICAga2V5d29yZHMgPSBrZXl3b3Jkc1tzZWddO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcnVsZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBydWxlID0gcnVsZXNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJ1bGUgIT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgeyAkZGF0YSB9ID0gcnVsZS5kZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IGtleXdvcmRzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCRkYXRhICYmIHNjaGVtYSlcbiAgICAgICAgICAgICAgICAgICAga2V5d29yZHNba2V5XSA9IHNjaGVtYU9yRGF0YShzY2hlbWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRhU2NoZW1hO1xuICAgIH1cbiAgICBfcmVtb3ZlQWxsU2NoZW1hcyhzY2hlbWFzLCByZWdleCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleVJlZiBpbiBzY2hlbWFzKSB7XG4gICAgICAgICAgICBjb25zdCBzY2ggPSBzY2hlbWFzW2tleVJlZl07XG4gICAgICAgICAgICBpZiAoIXJlZ2V4IHx8IHJlZ2V4LnRlc3Qoa2V5UmVmKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjaGVtYXNba2V5UmVmXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2NoICYmICFzY2gubWV0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5kZWxldGUoc2NoLnNjaGVtYSk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzY2hlbWFzW2tleVJlZl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9hZGRTY2hlbWEoc2NoZW1hLCBtZXRhLCBiYXNlSWQsIHZhbGlkYXRlU2NoZW1hID0gdGhpcy5vcHRzLnZhbGlkYXRlU2NoZW1hLCBhZGRTY2hlbWEgPSB0aGlzLm9wdHMuYWRkVXNlZFNjaGVtYSkge1xuICAgICAgICBsZXQgaWQ7XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hSWQgfSA9IHRoaXMub3B0cztcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgaWQgPSBzY2hlbWFbc2NoZW1hSWRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5qdGQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2NoZW1hIG11c3QgYmUgb2JqZWN0XCIpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHNjaGVtYSAhPSBcImJvb2xlYW5cIilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzY2hlbWEgbXVzdCBiZSBvYmplY3Qgb3IgYm9vbGVhblwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2NoID0gdGhpcy5fY2FjaGUuZ2V0KHNjaGVtYSk7XG4gICAgICAgIGlmIChzY2ggIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBzY2g7XG4gICAgICAgIGJhc2VJZCA9ICgwLCByZXNvbHZlXzEubm9ybWFsaXplSWQpKGlkIHx8IGJhc2VJZCk7XG4gICAgICAgIGNvbnN0IGxvY2FsUmVmcyA9IHJlc29sdmVfMS5nZXRTY2hlbWFSZWZzLmNhbGwodGhpcywgc2NoZW1hLCBiYXNlSWQpO1xuICAgICAgICBzY2ggPSBuZXcgY29tcGlsZV8xLlNjaGVtYUVudih7IHNjaGVtYSwgc2NoZW1hSWQsIG1ldGEsIGJhc2VJZCwgbG9jYWxSZWZzIH0pO1xuICAgICAgICB0aGlzLl9jYWNoZS5zZXQoc2NoLnNjaGVtYSwgc2NoKTtcbiAgICAgICAgaWYgKGFkZFNjaGVtYSAmJiAhYmFzZUlkLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGF0bSBpdCBpcyBhbGxvd2VkIHRvIG92ZXJ3cml0ZSBzY2hlbWFzIHdpdGhvdXQgaWQgKGluc3RlYWQgb2Ygbm90IGFkZGluZyB0aGVtKVxuICAgICAgICAgICAgaWYgKGJhc2VJZClcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1VuaXF1ZShiYXNlSWQpO1xuICAgICAgICAgICAgdGhpcy5yZWZzW2Jhc2VJZF0gPSBzY2g7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbGlkYXRlU2NoZW1hKVxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVNjaGVtYShzY2hlbWEsIHRydWUpO1xuICAgICAgICByZXR1cm4gc2NoO1xuICAgIH1cbiAgICBfY2hlY2tVbmlxdWUoaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2NoZW1hc1tpZF0gfHwgdGhpcy5yZWZzW2lkXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzY2hlbWEgd2l0aCBrZXkgb3IgaWQgXCIke2lkfVwiIGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NvbXBpbGVTY2hlbWFFbnYoc2NoKSB7XG4gICAgICAgIGlmIChzY2gubWV0YSlcbiAgICAgICAgICAgIHRoaXMuX2NvbXBpbGVNZXRhU2NoZW1hKHNjaCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNvbXBpbGVfMS5jb21waWxlU2NoZW1hLmNhbGwodGhpcywgc2NoKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghc2NoLnZhbGlkYXRlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICByZXR1cm4gc2NoLnZhbGlkYXRlO1xuICAgIH1cbiAgICBfY29tcGlsZU1ldGFTY2hlbWEoc2NoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRPcHRzID0gdGhpcy5vcHRzO1xuICAgICAgICB0aGlzLm9wdHMgPSB0aGlzLl9tZXRhT3B0cztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbXBpbGVfMS5jb21waWxlU2NoZW1hLmNhbGwodGhpcywgc2NoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMub3B0cyA9IGN1cnJlbnRPcHRzO1xuICAgICAgICB9XG4gICAgfVxufVxuQWp2LlZhbGlkYXRpb25FcnJvciA9IHZhbGlkYXRpb25fZXJyb3JfMS5kZWZhdWx0O1xuQWp2Lk1pc3NpbmdSZWZFcnJvciA9IHJlZl9lcnJvcl8xLmRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBBanY7XG5mdW5jdGlvbiBjaGVja09wdGlvbnMoY2hlY2tPcHRzLCBvcHRpb25zLCBtc2csIGxvZyA9IFwiZXJyb3JcIikge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGNoZWNrT3B0cykge1xuICAgICAgICBjb25zdCBvcHQgPSBrZXk7XG4gICAgICAgIGlmIChvcHQgaW4gb3B0aW9ucylcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyW2xvZ10oYCR7bXNnfTogb3B0aW9uICR7a2V5fS4gJHtjaGVja09wdHNbb3B0XX1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRTY2hFbnYoa2V5UmVmKSB7XG4gICAga2V5UmVmID0gKDAsIHJlc29sdmVfMS5ub3JtYWxpemVJZCkoa2V5UmVmKTsgLy8gVE9ETyB0ZXN0cyBmYWlsIHdpdGhvdXQgdGhpcyBsaW5lXG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hc1trZXlSZWZdIHx8IHRoaXMucmVmc1trZXlSZWZdO1xufVxuZnVuY3Rpb24gYWRkSW5pdGlhbFNjaGVtYXMoKSB7XG4gICAgY29uc3Qgb3B0c1NjaGVtYXMgPSB0aGlzLm9wdHMuc2NoZW1hcztcbiAgICBpZiAoIW9wdHNTY2hlbWFzKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0c1NjaGVtYXMpKVxuICAgICAgICB0aGlzLmFkZFNjaGVtYShvcHRzU2NoZW1hcyk7XG4gICAgZWxzZVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRzU2NoZW1hcylcbiAgICAgICAgICAgIHRoaXMuYWRkU2NoZW1hKG9wdHNTY2hlbWFzW2tleV0sIGtleSk7XG59XG5mdW5jdGlvbiBhZGRJbml0aWFsRm9ybWF0cygpIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdGhpcy5vcHRzLmZvcm1hdHMpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gdGhpcy5vcHRzLmZvcm1hdHNbbmFtZV07XG4gICAgICAgIGlmIChmb3JtYXQpXG4gICAgICAgICAgICB0aGlzLmFkZEZvcm1hdChuYW1lLCBmb3JtYXQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZEluaXRpYWxLZXl3b3JkcyhkZWZzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmcykpIHtcbiAgICAgICAgdGhpcy5hZGRWb2NhYnVsYXJ5KGRlZnMpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLndhcm4oXCJrZXl3b3JkcyBvcHRpb24gYXMgbWFwIGlzIGRlcHJlY2F0ZWQsIHBhc3MgYXJyYXlcIik7XG4gICAgZm9yIChjb25zdCBrZXl3b3JkIGluIGRlZnMpIHtcbiAgICAgICAgY29uc3QgZGVmID0gZGVmc1trZXl3b3JkXTtcbiAgICAgICAgaWYgKCFkZWYua2V5d29yZClcbiAgICAgICAgICAgIGRlZi5rZXl3b3JkID0ga2V5d29yZDtcbiAgICAgICAgdGhpcy5hZGRLZXl3b3JkKGRlZik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0TWV0YVNjaGVtYU9wdGlvbnMoKSB7XG4gICAgY29uc3QgbWV0YU9wdHMgPSB7IC4uLnRoaXMub3B0cyB9O1xuICAgIGZvciAoY29uc3Qgb3B0IG9mIE1FVEFfSUdOT1JFX09QVElPTlMpXG4gICAgICAgIGRlbGV0ZSBtZXRhT3B0c1tvcHRdO1xuICAgIHJldHVybiBtZXRhT3B0cztcbn1cbmNvbnN0IG5vTG9ncyA9IHsgbG9nKCkgeyB9LCB3YXJuKCkgeyB9LCBlcnJvcigpIHsgfSB9O1xuZnVuY3Rpb24gZ2V0TG9nZ2VyKGxvZ2dlcikge1xuICAgIGlmIChsb2dnZXIgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gbm9Mb2dzO1xuICAgIGlmIChsb2dnZXIgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGNvbnNvbGU7XG4gICAgaWYgKGxvZ2dlci5sb2cgJiYgbG9nZ2VyLndhcm4gJiYgbG9nZ2VyLmVycm9yKVxuICAgICAgICByZXR1cm4gbG9nZ2VyO1xuICAgIHRocm93IG5ldyBFcnJvcihcImxvZ2dlciBtdXN0IGltcGxlbWVudCBsb2csIHdhcm4gYW5kIGVycm9yIG1ldGhvZHNcIik7XG59XG5jb25zdCBLRVlXT1JEX05BTUUgPSAvXlthLXpfJF1bYS16MC05XyQ6LV0qJC9pO1xuZnVuY3Rpb24gY2hlY2tLZXl3b3JkKGtleXdvcmQsIGRlZikge1xuICAgIGNvbnN0IHsgUlVMRVMgfSA9IHRoaXM7XG4gICAgKDAsIHV0aWxfMS5lYWNoSXRlbSkoa2V5d29yZCwgKGt3ZCkgPT4ge1xuICAgICAgICBpZiAoUlVMRVMua2V5d29yZHNba3dkXSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgS2V5d29yZCAke2t3ZH0gaXMgYWxyZWFkeSBkZWZpbmVkYCk7XG4gICAgICAgIGlmICghS0VZV09SRF9OQU1FLnRlc3Qoa3dkKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgS2V5d29yZCAke2t3ZH0gaGFzIGludmFsaWQgbmFtZWApO1xuICAgIH0pO1xuICAgIGlmICghZGVmKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKGRlZi4kZGF0YSAmJiAhKFwiY29kZVwiIGluIGRlZiB8fCBcInZhbGlkYXRlXCIgaW4gZGVmKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJyRkYXRhIGtleXdvcmQgbXVzdCBoYXZlIFwiY29kZVwiIG9yIFwidmFsaWRhdGVcIiBmdW5jdGlvbicpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZFJ1bGUoa2V5d29yZCwgZGVmaW5pdGlvbiwgZGF0YVR5cGUpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcG9zdCA9IGRlZmluaXRpb24gPT09IG51bGwgfHwgZGVmaW5pdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmaW5pdGlvbi5wb3N0O1xuICAgIGlmIChkYXRhVHlwZSAmJiBwb3N0KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2tleXdvcmQgd2l0aCBcInBvc3RcIiBmbGFnIGNhbm5vdCBoYXZlIFwidHlwZVwiJyk7XG4gICAgY29uc3QgeyBSVUxFUyB9ID0gdGhpcztcbiAgICBsZXQgcnVsZUdyb3VwID0gcG9zdCA/IFJVTEVTLnBvc3QgOiBSVUxFUy5ydWxlcy5maW5kKCh7IHR5cGU6IHQgfSkgPT4gdCA9PT0gZGF0YVR5cGUpO1xuICAgIGlmICghcnVsZUdyb3VwKSB7XG4gICAgICAgIHJ1bGVHcm91cCA9IHsgdHlwZTogZGF0YVR5cGUsIHJ1bGVzOiBbXSB9O1xuICAgICAgICBSVUxFUy5ydWxlcy5wdXNoKHJ1bGVHcm91cCk7XG4gICAgfVxuICAgIFJVTEVTLmtleXdvcmRzW2tleXdvcmRdID0gdHJ1ZTtcbiAgICBpZiAoIWRlZmluaXRpb24pXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBydWxlID0ge1xuICAgICAgICBrZXl3b3JkLFxuICAgICAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAuLi5kZWZpbml0aW9uLFxuICAgICAgICAgICAgdHlwZTogKDAsIGRhdGFUeXBlXzEuZ2V0SlNPTlR5cGVzKShkZWZpbml0aW9uLnR5cGUpLFxuICAgICAgICAgICAgc2NoZW1hVHlwZTogKDAsIGRhdGFUeXBlXzEuZ2V0SlNPTlR5cGVzKShkZWZpbml0aW9uLnNjaGVtYVR5cGUpLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGRlZmluaXRpb24uYmVmb3JlKVxuICAgICAgICBhZGRCZWZvcmVSdWxlLmNhbGwodGhpcywgcnVsZUdyb3VwLCBydWxlLCBkZWZpbml0aW9uLmJlZm9yZSk7XG4gICAgZWxzZVxuICAgICAgICBydWxlR3JvdXAucnVsZXMucHVzaChydWxlKTtcbiAgICBSVUxFUy5hbGxba2V5d29yZF0gPSBydWxlO1xuICAgIChfYSA9IGRlZmluaXRpb24uaW1wbGVtZW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvckVhY2goKGt3ZCkgPT4gdGhpcy5hZGRLZXl3b3JkKGt3ZCkpO1xufVxuZnVuY3Rpb24gYWRkQmVmb3JlUnVsZShydWxlR3JvdXAsIHJ1bGUsIGJlZm9yZSkge1xuICAgIGNvbnN0IGkgPSBydWxlR3JvdXAucnVsZXMuZmluZEluZGV4KChfcnVsZSkgPT4gX3J1bGUua2V5d29yZCA9PT0gYmVmb3JlKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgIHJ1bGVHcm91cC5ydWxlcy5zcGxpY2UoaSwgMCwgcnVsZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBydWxlR3JvdXAucnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgcnVsZSAke2JlZm9yZX0gaXMgbm90IGRlZmluZWRgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBrZXl3b3JkTWV0YXNjaGVtYShkZWYpIHtcbiAgICBsZXQgeyBtZXRhU2NoZW1hIH0gPSBkZWY7XG4gICAgaWYgKG1ldGFTY2hlbWEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChkZWYuJGRhdGEgJiYgdGhpcy5vcHRzLiRkYXRhKVxuICAgICAgICBtZXRhU2NoZW1hID0gc2NoZW1hT3JEYXRhKG1ldGFTY2hlbWEpO1xuICAgIGRlZi52YWxpZGF0ZVNjaGVtYSA9IHRoaXMuY29tcGlsZShtZXRhU2NoZW1hLCB0cnVlKTtcbn1cbmNvbnN0ICRkYXRhUmVmID0ge1xuICAgICRyZWY6IFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Fqdi12YWxpZGF0b3IvYWp2L21hc3Rlci9saWIvcmVmcy9kYXRhLmpzb24jXCIsXG59O1xuZnVuY3Rpb24gc2NoZW1hT3JEYXRhKHNjaGVtYSkge1xuICAgIHJldHVybiB7IGFueU9mOiBbc2NoZW1hLCAkZGF0YVJlZl0gfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcmUuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImlkXCIsXG4gICAgY29kZSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOT1QgU1VQUE9SVEVEOiBrZXl3b3JkIFwiaWRcIiwgdXNlIFwiJGlkXCIgZm9yIHNjaGVtYSBJRCcpO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWQuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2FsbFJlZiA9IGV4cG9ydHMuZ2V0VmFsaWRhdGUgPSB2b2lkIDA7XG5jb25zdCByZWZfZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3JlZl9lcnJvclwiKTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuLi9jb2RlXCIpO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9uYW1lc1wiKTtcbmNvbnN0IGNvbXBpbGVfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIiRyZWZcIixcbiAgICBzY2hlbWFUeXBlOiBcInN0cmluZ1wiLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWE6ICRyZWYsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IHsgYmFzZUlkLCBzY2hlbWFFbnY6IGVudiwgdmFsaWRhdGVOYW1lLCBvcHRzLCBzZWxmIH0gPSBpdDtcbiAgICAgICAgY29uc3QgeyByb290IH0gPSBlbnY7XG4gICAgICAgIGlmICgoJHJlZiA9PT0gXCIjXCIgfHwgJHJlZiA9PT0gXCIjL1wiKSAmJiBiYXNlSWQgPT09IHJvb3QuYmFzZUlkKVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxSb290UmVmKCk7XG4gICAgICAgIGNvbnN0IHNjaE9yRW52ID0gY29tcGlsZV8xLnJlc29sdmVSZWYuY2FsbChzZWxmLCByb290LCBiYXNlSWQsICRyZWYpO1xuICAgICAgICBpZiAoc2NoT3JFbnYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyByZWZfZXJyb3JfMS5kZWZhdWx0KGl0Lm9wdHMudXJpUmVzb2x2ZXIsIGJhc2VJZCwgJHJlZik7XG4gICAgICAgIGlmIChzY2hPckVudiBpbnN0YW5jZW9mIGNvbXBpbGVfMS5TY2hlbWFFbnYpXG4gICAgICAgICAgICByZXR1cm4gY2FsbFZhbGlkYXRlKHNjaE9yRW52KTtcbiAgICAgICAgcmV0dXJuIGlubGluZVJlZlNjaGVtYShzY2hPckVudik7XG4gICAgICAgIGZ1bmN0aW9uIGNhbGxSb290UmVmKCkge1xuICAgICAgICAgICAgaWYgKGVudiA9PT0gcm9vdClcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFJlZihjeHQsIHZhbGlkYXRlTmFtZSwgZW52LCBlbnYuJGFzeW5jKTtcbiAgICAgICAgICAgIGNvbnN0IHJvb3ROYW1lID0gZ2VuLnNjb3BlVmFsdWUoXCJyb290XCIsIHsgcmVmOiByb290IH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxSZWYoY3h0LCAoMCwgY29kZWdlbl8xLl8pIGAke3Jvb3ROYW1lfS52YWxpZGF0ZWAsIHJvb3QsIHJvb3QuJGFzeW5jKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjYWxsVmFsaWRhdGUoc2NoKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gZ2V0VmFsaWRhdGUoY3h0LCBzY2gpO1xuICAgICAgICAgICAgY2FsbFJlZihjeHQsIHYsIHNjaCwgc2NoLiRhc3luYyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaW5saW5lUmVmU2NoZW1hKHNjaCkge1xuICAgICAgICAgICAgY29uc3Qgc2NoTmFtZSA9IGdlbi5zY29wZVZhbHVlKFwic2NoZW1hXCIsIG9wdHMuY29kZS5zb3VyY2UgPT09IHRydWUgPyB7IHJlZjogc2NoLCBjb2RlOiAoMCwgY29kZWdlbl8xLnN0cmluZ2lmeSkoc2NoKSB9IDogeyByZWY6IHNjaCB9KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHNjaEN4dCA9IGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAgICAgIHNjaGVtYTogc2NoLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlczogW10sXG4gICAgICAgICAgICAgICAgc2NoZW1hUGF0aDogY29kZWdlbl8xLm5pbCxcbiAgICAgICAgICAgICAgICB0b3BTY2hlbWFSZWY6IHNjaE5hbWUsXG4gICAgICAgICAgICAgICAgZXJyU2NoZW1hUGF0aDogJHJlZixcbiAgICAgICAgICAgIH0sIHZhbGlkKTtcbiAgICAgICAgICAgIGN4dC5tZXJnZUV2YWx1YXRlZChzY2hDeHQpO1xuICAgICAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZnVuY3Rpb24gZ2V0VmFsaWRhdGUoY3h0LCBzY2gpIHtcbiAgICBjb25zdCB7IGdlbiB9ID0gY3h0O1xuICAgIHJldHVybiBzY2gudmFsaWRhdGVcbiAgICAgICAgPyBnZW4uc2NvcGVWYWx1ZShcInZhbGlkYXRlXCIsIHsgcmVmOiBzY2gudmFsaWRhdGUgfSlcbiAgICAgICAgOiAoMCwgY29kZWdlbl8xLl8pIGAke2dlbi5zY29wZVZhbHVlKFwid3JhcHBlclwiLCB7IHJlZjogc2NoIH0pfS52YWxpZGF0ZWA7XG59XG5leHBvcnRzLmdldFZhbGlkYXRlID0gZ2V0VmFsaWRhdGU7XG5mdW5jdGlvbiBjYWxsUmVmKGN4dCwgdiwgc2NoLCAkYXN5bmMpIHtcbiAgICBjb25zdCB7IGdlbiwgaXQgfSA9IGN4dDtcbiAgICBjb25zdCB7IGFsbEVycm9ycywgc2NoZW1hRW52OiBlbnYsIG9wdHMgfSA9IGl0O1xuICAgIGNvbnN0IHBhc3NDeHQgPSBvcHRzLnBhc3NDb250ZXh0ID8gbmFtZXNfMS5kZWZhdWx0LnRoaXMgOiBjb2RlZ2VuXzEubmlsO1xuICAgIGlmICgkYXN5bmMpXG4gICAgICAgIGNhbGxBc3luY1JlZigpO1xuICAgIGVsc2VcbiAgICAgICAgY2FsbFN5bmNSZWYoKTtcbiAgICBmdW5jdGlvbiBjYWxsQXN5bmNSZWYoKSB7XG4gICAgICAgIGlmICghZW52LiRhc3luYylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFzeW5jIHNjaGVtYSByZWZlcmVuY2VkIGJ5IHN5bmMgc2NoZW1hXCIpO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5sZXQoXCJ2YWxpZFwiKTtcbiAgICAgICAgZ2VuLnRyeSgoKSA9PiB7XG4gICAgICAgICAgICBnZW4uY29kZSgoMCwgY29kZWdlbl8xLl8pIGBhd2FpdCAkeygwLCBjb2RlXzEuY2FsbFZhbGlkYXRlQ29kZSkoY3h0LCB2LCBwYXNzQ3h0KX1gKTtcbiAgICAgICAgICAgIGFkZEV2YWx1YXRlZEZyb20odik7IC8vIFRPRE8gd2lsbCBub3Qgd29yayB3aXRoIGFzeW5jLCBpdCBoYXMgdG8gYmUgcmV0dXJuZWQgd2l0aCB0aGUgcmVzdWx0XG4gICAgICAgICAgICBpZiAoIWFsbEVycm9ycylcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCB0cnVlKTtcbiAgICAgICAgfSwgKGUpID0+IHtcbiAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAhKCR7ZX0gaW5zdGFuY2VvZiAke2l0LlZhbGlkYXRpb25FcnJvcn0pYCwgKCkgPT4gZ2VuLnRocm93KGUpKTtcbiAgICAgICAgICAgIGFkZEVycm9yc0Zyb20oZSk7XG4gICAgICAgICAgICBpZiAoIWFsbEVycm9ycylcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjYWxsU3luY1JlZigpIHtcbiAgICAgICAgY3h0LnJlc3VsdCgoMCwgY29kZV8xLmNhbGxWYWxpZGF0ZUNvZGUpKGN4dCwgdiwgcGFzc0N4dCksICgpID0+IGFkZEV2YWx1YXRlZEZyb20odiksICgpID0+IGFkZEVycm9yc0Zyb20odikpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRFcnJvcnNGcm9tKHNvdXJjZSkge1xuICAgICAgICBjb25zdCBlcnJzID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtzb3VyY2V9LmVycm9yc2A7XG4gICAgICAgIGdlbi5hc3NpZ24obmFtZXNfMS5kZWZhdWx0LnZFcnJvcnMsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9ID09PSBudWxsID8gJHtlcnJzfSA6ICR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9LmNvbmNhdCgke2VycnN9KWApOyAvLyBUT0RPIHRhZ2dlZFxuICAgICAgICBnZW4uYXNzaWduKG5hbWVzXzEuZGVmYXVsdC5lcnJvcnMsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9Lmxlbmd0aGApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRFdmFsdWF0ZWRGcm9tKHNvdXJjZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghaXQub3B0cy51bmV2YWx1YXRlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3Qgc2NoRXZhbHVhdGVkID0gKF9hID0gc2NoID09PSBudWxsIHx8IHNjaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NoLnZhbGlkYXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXZhbHVhdGVkO1xuICAgICAgICAvLyBUT0RPIHJlZmFjdG9yXG4gICAgICAgIGlmIChpdC5wcm9wcyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKHNjaEV2YWx1YXRlZCAmJiAhc2NoRXZhbHVhdGVkLmR5bmFtaWNQcm9wcykge1xuICAgICAgICAgICAgICAgIGlmIChzY2hFdmFsdWF0ZWQucHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpdC5wcm9wcyA9IHV0aWxfMS5tZXJnZUV2YWx1YXRlZC5wcm9wcyhnZW4sIHNjaEV2YWx1YXRlZC5wcm9wcywgaXQucHJvcHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzID0gZ2VuLnZhcihcInByb3BzXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7c291cmNlfS5ldmFsdWF0ZWQucHJvcHNgKTtcbiAgICAgICAgICAgICAgICBpdC5wcm9wcyA9IHV0aWxfMS5tZXJnZUV2YWx1YXRlZC5wcm9wcyhnZW4sIHByb3BzLCBpdC5wcm9wcywgY29kZWdlbl8xLk5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpdC5pdGVtcyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKHNjaEV2YWx1YXRlZCAmJiAhc2NoRXZhbHVhdGVkLmR5bmFtaWNJdGVtcykge1xuICAgICAgICAgICAgICAgIGlmIChzY2hFdmFsdWF0ZWQuaXRlbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpdC5pdGVtcyA9IHV0aWxfMS5tZXJnZUV2YWx1YXRlZC5pdGVtcyhnZW4sIHNjaEV2YWx1YXRlZC5pdGVtcywgaXQuaXRlbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gZ2VuLnZhcihcIml0ZW1zXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7c291cmNlfS5ldmFsdWF0ZWQuaXRlbXNgKTtcbiAgICAgICAgICAgICAgICBpdC5pdGVtcyA9IHV0aWxfMS5tZXJnZUV2YWx1YXRlZC5pdGVtcyhnZW4sIGl0ZW1zLCBpdC5pdGVtcywgY29kZWdlbl8xLk5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5jYWxsUmVmID0gY2FsbFJlZjtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaWRfMSA9IHJlcXVpcmUoXCIuL2lkXCIpO1xuY29uc3QgcmVmXzEgPSByZXF1aXJlKFwiLi9yZWZcIik7XG5jb25zdCBjb3JlID0gW1xuICAgIFwiJHNjaGVtYVwiLFxuICAgIFwiJGlkXCIsXG4gICAgXCIkZGVmc1wiLFxuICAgIFwiJHZvY2FidWxhcnlcIixcbiAgICB7IGtleXdvcmQ6IFwiJGNvbW1lbnRcIiB9LFxuICAgIFwiZGVmaW5pdGlvbnNcIixcbiAgICBpZF8xLmRlZmF1bHQsXG4gICAgcmVmXzEuZGVmYXVsdCxcbl07XG5leHBvcnRzLmRlZmF1bHQgPSBjb3JlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBvcHMgPSBjb2RlZ2VuXzEub3BlcmF0b3JzO1xuY29uc3QgS1dEcyA9IHtcbiAgICBtYXhpbXVtOiB7IG9rU3RyOiBcIjw9XCIsIG9rOiBvcHMuTFRFLCBmYWlsOiBvcHMuR1QgfSxcbiAgICBtaW5pbXVtOiB7IG9rU3RyOiBcIj49XCIsIG9rOiBvcHMuR1RFLCBmYWlsOiBvcHMuTFQgfSxcbiAgICBleGNsdXNpdmVNYXhpbXVtOiB7IG9rU3RyOiBcIjxcIiwgb2s6IG9wcy5MVCwgZmFpbDogb3BzLkdURSB9LFxuICAgIGV4Y2x1c2l2ZU1pbmltdW06IHsgb2tTdHI6IFwiPlwiLCBvazogb3BzLkdULCBmYWlsOiBvcHMuTFRFIH0sXG59O1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsga2V5d29yZCwgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgYmUgJHtLV0RzW2tleXdvcmRdLm9rU3RyfSAke3NjaGVtYUNvZGV9YCxcbiAgICBwYXJhbXM6ICh7IGtleXdvcmQsIHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2NvbXBhcmlzb246ICR7S1dEc1trZXl3b3JkXS5va1N0cn0sIGxpbWl0OiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IE9iamVjdC5rZXlzKEtXRHMpLFxuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgc2NoZW1hVHlwZTogXCJudW1iZXJcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGtleXdvcmQsIGRhdGEsIHNjaGVtYUNvZGUgfSA9IGN4dDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9ICR7S1dEc1trZXl3b3JkXS5mYWlsfSAke3NjaGVtYUNvZGV9IHx8IGlzTmFOKCR7ZGF0YX0pYCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW1pdE51bWJlci5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IGJlIG11bHRpcGxlIG9mICR7c2NoZW1hQ29kZX1gLFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bXVsdGlwbGVPZjogJHtzY2hlbWFDb2RlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIm11bHRpcGxlT2ZcIixcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHNjaGVtYVR5cGU6IFwibnVtYmVyXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIGRhdGEsIHNjaGVtYUNvZGUsIGl0IH0gPSBjeHQ7XG4gICAgICAgIC8vIGNvbnN0IGJkdCA9IGJhZCREYXRhVHlwZShzY2hlbWFDb2RlLCA8c3RyaW5nPmRlZi5zY2hlbWFUeXBlLCAkZGF0YSlcbiAgICAgICAgY29uc3QgcHJlYyA9IGl0Lm9wdHMubXVsdGlwbGVPZlByZWNpc2lvbjtcbiAgICAgICAgY29uc3QgcmVzID0gZ2VuLmxldChcInJlc1wiKTtcbiAgICAgICAgY29uc3QgaW52YWxpZCA9IHByZWNcbiAgICAgICAgICAgID8gKDAsIGNvZGVnZW5fMS5fKSBgTWF0aC5hYnMoTWF0aC5yb3VuZCgke3Jlc30pIC0gJHtyZXN9KSA+IDFlLSR7cHJlY31gXG4gICAgICAgICAgICA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7cmVzfSAhPT0gcGFyc2VJbnQoJHtyZXN9KWA7XG4gICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgKCR7c2NoZW1hQ29kZX0gPT09IDAgfHwgKCR7cmVzfSA9ICR7ZGF0YX0vJHtzY2hlbWFDb2RlfSwgJHtpbnZhbGlkfSkpYCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aXBsZU9mLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZ1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzIC0gcHVueWNvZGUudWNzMi5kZWNvZGVcbmZ1bmN0aW9uIHVjczJsZW5ndGgoc3RyKSB7XG4gICAgY29uc3QgbGVuID0gc3RyLmxlbmd0aDtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBsZXQgcG9zID0gMDtcbiAgICBsZXQgdmFsdWU7XG4gICAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgICAgICBsZW5ndGgrKztcbiAgICAgICAgdmFsdWUgPSBzdHIuY2hhckNvZGVBdChwb3MrKyk7XG4gICAgICAgIGlmICh2YWx1ZSA+PSAweGQ4MDAgJiYgdmFsdWUgPD0gMHhkYmZmICYmIHBvcyA8IGxlbikge1xuICAgICAgICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICAgICAgICB2YWx1ZSA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICAgICAgICBpZiAoKHZhbHVlICYgMHhmYzAwKSA9PT0gMHhkYzAwKVxuICAgICAgICAgICAgICAgIHBvcysrOyAvLyBsb3cgc3Vycm9nYXRlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHVjczJsZW5ndGg7XG51Y3MybGVuZ3RoLmNvZGUgPSAncmVxdWlyZShcImFqdi9kaXN0L3J1bnRpbWUvdWNzMmxlbmd0aFwiKS5kZWZhdWx0Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVjczJsZW5ndGguanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgdWNzMmxlbmd0aF8xID0gcmVxdWlyZShcIi4uLy4uL3J1bnRpbWUvdWNzMmxlbmd0aFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2UoeyBrZXl3b3JkLCBzY2hlbWFDb2RlIH0pIHtcbiAgICAgICAgY29uc3QgY29tcCA9IGtleXdvcmQgPT09IFwibWF4TGVuZ3RoXCIgPyBcIm1vcmVcIiA6IFwiZmV3ZXJcIjtcbiAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSAke2NvbXB9IHRoYW4gJHtzY2hlbWFDb2RlfSBjaGFyYWN0ZXJzYDtcbiAgICB9LFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogW1wibWF4TGVuZ3RoXCIsIFwibWluTGVuZ3RoXCJdLFxuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgc2NoZW1hVHlwZTogXCJudW1iZXJcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGtleXdvcmQsIGRhdGEsIHNjaGVtYUNvZGUsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IG9wID0ga2V5d29yZCA9PT0gXCJtYXhMZW5ndGhcIiA/IGNvZGVnZW5fMS5vcGVyYXRvcnMuR1QgOiBjb2RlZ2VuXzEub3BlcmF0b3JzLkxUO1xuICAgICAgICBjb25zdCBsZW4gPSBpdC5vcHRzLnVuaWNvZGUgPT09IGZhbHNlID8gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfS5sZW5ndGhgIDogKDAsIGNvZGVnZW5fMS5fKSBgJHsoMCwgdXRpbF8xLnVzZUZ1bmMpKGN4dC5nZW4sIHVjczJsZW5ndGhfMS5kZWZhdWx0KX0oJHtkYXRhfSlgO1xuICAgICAgICBjeHQuZmFpbCRkYXRhKCgwLCBjb2RlZ2VuXzEuXykgYCR7bGVufSAke29wfSAke3NjaGVtYUNvZGV9YCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW1pdExlbmd0aC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgbWF0Y2ggcGF0dGVybiBcIiR7c2NoZW1hQ29kZX1cImAsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtwYXR0ZXJuOiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwicGF0dGVyblwiLFxuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgc2NoZW1hVHlwZTogXCJzdHJpbmdcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGRhdGEsICRkYXRhLCBzY2hlbWEsIHNjaGVtYUNvZGUsIGl0IH0gPSBjeHQ7XG4gICAgICAgIC8vIFRPRE8gcmVnZXhwIHNob3VsZCBiZSB3cmFwcGVkIGluIHRyeS9jYXRjaHNcbiAgICAgICAgY29uc3QgdSA9IGl0Lm9wdHMudW5pY29kZVJlZ0V4cCA/IFwidVwiIDogXCJcIjtcbiAgICAgICAgY29uc3QgcmVnRXhwID0gJGRhdGEgPyAoMCwgY29kZWdlbl8xLl8pIGAobmV3IFJlZ0V4cCgke3NjaGVtYUNvZGV9LCAke3V9KSlgIDogKDAsIGNvZGVfMS51c2VQYXR0ZXJuKShjeHQsIHNjaGVtYSk7XG4gICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgISR7cmVnRXhwfS50ZXN0KCR7ZGF0YX0pYCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXR0ZXJuLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZSh7IGtleXdvcmQsIHNjaGVtYUNvZGUgfSkge1xuICAgICAgICBjb25zdCBjb21wID0ga2V5d29yZCA9PT0gXCJtYXhQcm9wZXJ0aWVzXCIgPyBcIm1vcmVcIiA6IFwiZmV3ZXJcIjtcbiAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSAke2NvbXB9IHRoYW4gJHtzY2hlbWFDb2RlfSBwcm9wZXJ0aWVzYDtcbiAgICB9LFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogW1wibWF4UHJvcGVydGllc1wiLCBcIm1pblByb3BlcnRpZXNcIl0sXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBcIm51bWJlclwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsga2V5d29yZCwgZGF0YSwgc2NoZW1hQ29kZSB9ID0gY3h0O1xuICAgICAgICBjb25zdCBvcCA9IGtleXdvcmQgPT09IFwibWF4UHJvcGVydGllc1wiID8gY29kZWdlbl8xLm9wZXJhdG9ycy5HVCA6IGNvZGVnZW5fMS5vcGVyYXRvcnMuTFQ7XG4gICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgT2JqZWN0LmtleXMoJHtkYXRhfSkubGVuZ3RoICR7b3B9ICR7c2NoZW1hQ29kZX1gKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbWl0UHJvcGVydGllcy5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHBhcmFtczogeyBtaXNzaW5nUHJvcGVydHkgfSB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgaGF2ZSByZXF1aXJlZCBwcm9wZXJ0eSAnJHttaXNzaW5nUHJvcGVydHl9J2AsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXM6IHsgbWlzc2luZ1Byb3BlcnR5IH0gfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge21pc3NpbmdQcm9wZXJ0eTogJHttaXNzaW5nUHJvcGVydHl9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwicmVxdWlyZWRcIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHNjaGVtYVR5cGU6IFwiYXJyYXlcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBzY2hlbWFDb2RlLCBkYXRhLCAkZGF0YSwgaXQgfSA9IGN4dDtcbiAgICAgICAgY29uc3QgeyBvcHRzIH0gPSBpdDtcbiAgICAgICAgaWYgKCEkZGF0YSAmJiBzY2hlbWEubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB1c2VMb29wID0gc2NoZW1hLmxlbmd0aCA+PSBvcHRzLmxvb3BSZXF1aXJlZDtcbiAgICAgICAgaWYgKGl0LmFsbEVycm9ycylcbiAgICAgICAgICAgIGFsbEVycm9yc01vZGUoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZXhpdE9uRXJyb3JNb2RlKCk7XG4gICAgICAgIGlmIChvcHRzLnN0cmljdFJlcXVpcmVkKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IGN4dC5wYXJlbnRTY2hlbWEucHJvcGVydGllcztcbiAgICAgICAgICAgIGNvbnN0IHsgZGVmaW5lZFByb3BlcnRpZXMgfSA9IGN4dC5pdDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVxdWlyZWRLZXkgb2Ygc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9wcyA9PT0gbnVsbCB8fCBwcm9wcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvcHNbcmVxdWlyZWRLZXldKSA9PT0gdW5kZWZpbmVkICYmICFkZWZpbmVkUHJvcGVydGllcy5oYXMocmVxdWlyZWRLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtYVBhdGggPSBpdC5zY2hlbWFFbnYuYmFzZUlkICsgaXQuZXJyU2NoZW1hUGF0aDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gYHJlcXVpcmVkIHByb3BlcnR5IFwiJHtyZXF1aXJlZEtleX1cIiBpcyBub3QgZGVmaW5lZCBhdCBcIiR7c2NoZW1hUGF0aH1cIiAoc3RyaWN0UmVxdWlyZWQpYDtcbiAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCBtc2csIGl0Lm9wdHMuc3RyaWN0UmVxdWlyZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhbGxFcnJvcnNNb2RlKCkge1xuICAgICAgICAgICAgaWYgKHVzZUxvb3AgfHwgJGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjeHQuYmxvY2skZGF0YShjb2RlZ2VuXzEubmlsLCBsb29wQWxsUmVxdWlyZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIHNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICAoMCwgY29kZV8xLmNoZWNrUmVwb3J0TWlzc2luZ1Byb3ApKGN4dCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGV4aXRPbkVycm9yTW9kZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3NpbmcgPSBnZW4ubGV0KFwibWlzc2luZ1wiKTtcbiAgICAgICAgICAgIGlmICh1c2VMb29wIHx8ICRkYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubGV0KFwidmFsaWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY3h0LmJsb2NrJGRhdGEodmFsaWQsICgpID0+IGxvb3BVbnRpbE1pc3NpbmcobWlzc2luZywgdmFsaWQpKTtcbiAgICAgICAgICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlXzEuY2hlY2tNaXNzaW5nUHJvcCkoY3h0LCBzY2hlbWEsIG1pc3NpbmcpKTtcbiAgICAgICAgICAgICAgICAoMCwgY29kZV8xLnJlcG9ydE1pc3NpbmdQcm9wKShjeHQsIG1pc3NpbmcpO1xuICAgICAgICAgICAgICAgIGdlbi5lbHNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbG9vcEFsbFJlcXVpcmVkKCkge1xuICAgICAgICAgICAgZ2VuLmZvck9mKFwicHJvcFwiLCBzY2hlbWFDb2RlLCAocHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgIGN4dC5zZXRQYXJhbXMoeyBtaXNzaW5nUHJvcGVydHk6IHByb3AgfSk7XG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlXzEubm9Qcm9wZXJ0eUluRGF0YSkoZ2VuLCBkYXRhLCBwcm9wLCBvcHRzLm93blByb3BlcnRpZXMpLCAoKSA9PiBjeHQuZXJyb3IoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsb29wVW50aWxNaXNzaW5nKG1pc3NpbmcsIHZhbGlkKSB7XG4gICAgICAgICAgICBjeHQuc2V0UGFyYW1zKHsgbWlzc2luZ1Byb3BlcnR5OiBtaXNzaW5nIH0pO1xuICAgICAgICAgICAgZ2VuLmZvck9mKG1pc3NpbmcsIHNjaGVtYUNvZGUsICgpID0+IHtcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCAoMCwgY29kZV8xLnByb3BlcnR5SW5EYXRhKShnZW4sIGRhdGEsIG1pc3NpbmcsIG9wdHMub3duUHJvcGVydGllcykpO1xuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm5vdCkodmFsaWQpLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGN4dC5lcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICBnZW4uYnJlYWsoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGNvZGVnZW5fMS5uaWwpO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1aXJlZC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2UoeyBrZXl3b3JkLCBzY2hlbWFDb2RlIH0pIHtcbiAgICAgICAgY29uc3QgY29tcCA9IGtleXdvcmQgPT09IFwibWF4SXRlbXNcIiA/IFwibW9yZVwiIDogXCJmZXdlclwiO1xuICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IE5PVCBoYXZlICR7Y29tcH0gdGhhbiAke3NjaGVtYUNvZGV9IGl0ZW1zYDtcbiAgICB9LFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogW1wibWF4SXRlbXNcIiwgXCJtaW5JdGVtc1wiXSxcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgc2NoZW1hVHlwZTogXCJudW1iZXJcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGtleXdvcmQsIGRhdGEsIHNjaGVtYUNvZGUgfSA9IGN4dDtcbiAgICAgICAgY29uc3Qgb3AgPSBrZXl3b3JkID09PSBcIm1heEl0ZW1zXCIgPyBjb2RlZ2VuXzEub3BlcmF0b3JzLkdUIDogY29kZWdlbl8xLm9wZXJhdG9ycy5MVDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9Lmxlbmd0aCAke29wfSAke3NjaGVtYUNvZGV9YCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW1pdEl0ZW1zLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vYWp2LXZhbGlkYXRvci9hanYvaXNzdWVzLzg4OVxuY29uc3QgZXF1YWwgPSByZXF1aXJlKFwiZmFzdC1kZWVwLWVxdWFsXCIpO1xuZXF1YWwuY29kZSA9ICdyZXF1aXJlKFwiYWp2L2Rpc3QvcnVudGltZS9lcXVhbFwiKS5kZWZhdWx0JztcbmV4cG9ydHMuZGVmYXVsdCA9IGVxdWFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXF1YWwuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRhdGFUeXBlXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS92YWxpZGF0ZS9kYXRhVHlwZVwiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZXF1YWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2VxdWFsXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgcGFyYW1zOiB7IGksIGogfSB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgTk9UIGhhdmUgZHVwbGljYXRlIGl0ZW1zIChpdGVtcyAjIyAke2p9IGFuZCAke2l9IGFyZSBpZGVudGljYWwpYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtczogeyBpLCBqIH0gfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2k6ICR7aX0sIGo6ICR7an19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJ1bmlxdWVJdGVtc1wiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBcImJvb2xlYW5cIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgZGF0YSwgJGRhdGEsIHNjaGVtYSwgcGFyZW50U2NoZW1hLCBzY2hlbWFDb2RlLCBpdCB9ID0gY3h0O1xuICAgICAgICBpZiAoISRkYXRhICYmICFzY2hlbWEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIpO1xuICAgICAgICBjb25zdCBpdGVtVHlwZXMgPSBwYXJlbnRTY2hlbWEuaXRlbXMgPyAoMCwgZGF0YVR5cGVfMS5nZXRTY2hlbWFUeXBlcykocGFyZW50U2NoZW1hLml0ZW1zKSA6IFtdO1xuICAgICAgICBjeHQuYmxvY2skZGF0YSh2YWxpZCwgdmFsaWRhdGVVbmlxdWVJdGVtcywgKDAsIGNvZGVnZW5fMS5fKSBgJHtzY2hlbWFDb2RlfSA9PT0gZmFsc2VgKTtcbiAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVVbmlxdWVJdGVtcygpIHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBnZW4ubGV0KFwiaVwiLCAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9Lmxlbmd0aGApO1xuICAgICAgICAgICAgY29uc3QgaiA9IGdlbi5sZXQoXCJqXCIpO1xuICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IGksIGogfSk7XG4gICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2l9ID4gMWAsICgpID0+IChjYW5PcHRpbWl6ZSgpID8gbG9vcE4gOiBsb29wTjIpKGksIGopKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjYW5PcHRpbWl6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtVHlwZXMubGVuZ3RoID4gMCAmJiAhaXRlbVR5cGVzLnNvbWUoKHQpID0+IHQgPT09IFwib2JqZWN0XCIgfHwgdCA9PT0gXCJhcnJheVwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsb29wTihpLCBqKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZ2VuLm5hbWUoXCJpdGVtXCIpO1xuICAgICAgICAgICAgY29uc3Qgd3JvbmdUeXBlID0gKDAsIGRhdGFUeXBlXzEuY2hlY2tEYXRhVHlwZXMpKGl0ZW1UeXBlcywgaXRlbSwgaXQub3B0cy5zdHJpY3ROdW1iZXJzLCBkYXRhVHlwZV8xLkRhdGFUeXBlLldyb25nKTtcbiAgICAgICAgICAgIGNvbnN0IGluZGljZXMgPSBnZW4uY29uc3QoXCJpbmRpY2VzXCIsICgwLCBjb2RlZ2VuXzEuXykgYHt9YCk7XG4gICAgICAgICAgICBnZW4uZm9yKCgwLCBjb2RlZ2VuXzEuXykgYDske2l9LS07YCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGdlbi5sZXQoaXRlbSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfVske2l9XWApO1xuICAgICAgICAgICAgICAgIGdlbi5pZih3cm9uZ1R5cGUsICgwLCBjb2RlZ2VuXzEuXykgYGNvbnRpbnVlYCk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1UeXBlcy5sZW5ndGggPiAxKVxuICAgICAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgdHlwZW9mICR7aXRlbX0gPT0gXCJzdHJpbmdcImAsICgwLCBjb2RlZ2VuXzEuXykgYCR7aXRlbX0gKz0gXCJfXCJgKTtcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAgICAgLmlmKCgwLCBjb2RlZ2VuXzEuXykgYHR5cGVvZiAke2luZGljZXN9WyR7aXRlbX1dID09IFwibnVtYmVyXCJgLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24oaiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtpbmRpY2VzfVske2l0ZW19XWApO1xuICAgICAgICAgICAgICAgICAgICBjeHQuZXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpLmJyZWFrKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgJHtpbmRpY2VzfVske2l0ZW19XSA9ICR7aX1gKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGxvb3BOMihpLCBqKSB7XG4gICAgICAgICAgICBjb25zdCBlcWwgPSAoMCwgdXRpbF8xLnVzZUZ1bmMpKGdlbiwgZXF1YWxfMS5kZWZhdWx0KTtcbiAgICAgICAgICAgIGNvbnN0IG91dGVyID0gZ2VuLm5hbWUoXCJvdXRlclwiKTtcbiAgICAgICAgICAgIGdlbi5sYWJlbChvdXRlcikuZm9yKCgwLCBjb2RlZ2VuXzEuXykgYDske2l9LS07YCwgKCkgPT4gZ2VuLmZvcigoMCwgY29kZWdlbl8xLl8pIGAke2p9ID0gJHtpfTsgJHtqfS0tO2AsICgpID0+IGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2VxbH0oJHtkYXRhfVske2l9XSwgJHtkYXRhfVske2p9XSlgLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3h0LmVycm9yKCk7XG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpLmJyZWFrKG91dGVyKTtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXF1ZUl0ZW1zLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVxdWFsXzEgPSByZXF1aXJlKFwiLi4vLi4vcnVudGltZS9lcXVhbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6IFwibXVzdCBiZSBlcXVhbCB0byBjb25zdGFudFwiLFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7YWxsb3dlZFZhbHVlOiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiY29uc3RcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgZGF0YSwgJGRhdGEsIHNjaGVtYUNvZGUsIHNjaGVtYSB9ID0gY3h0O1xuICAgICAgICBpZiAoJGRhdGEgfHwgKHNjaGVtYSAmJiB0eXBlb2Ygc2NoZW1hID09IFwib2JqZWN0XCIpKSB7XG4gICAgICAgICAgICBjeHQuZmFpbCRkYXRhKCgwLCBjb2RlZ2VuXzEuXykgYCEkeygwLCB1dGlsXzEudXNlRnVuYykoZ2VuLCBlcXVhbF8xLmRlZmF1bHQpfSgke2RhdGF9LCAke3NjaGVtYUNvZGV9KWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3h0LmZhaWwoKDAsIGNvZGVnZW5fMS5fKSBgJHtzY2hlbWF9ICE9PSAke2RhdGF9YCk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVxdWFsXzEgPSByZXF1aXJlKFwiLi4vLi4vcnVudGltZS9lcXVhbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6IFwibXVzdCBiZSBlcXVhbCB0byBvbmUgb2YgdGhlIGFsbG93ZWQgdmFsdWVzXCIsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHthbGxvd2VkVmFsdWVzOiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiZW51bVwiLFxuICAgIHNjaGVtYVR5cGU6IFwiYXJyYXlcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgZGF0YSwgJGRhdGEsIHNjaGVtYSwgc2NoZW1hQ29kZSwgaXQgfSA9IGN4dDtcbiAgICAgICAgaWYgKCEkZGF0YSAmJiBzY2hlbWEubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW51bSBtdXN0IGhhdmUgbm9uLWVtcHR5IGFycmF5XCIpO1xuICAgICAgICBjb25zdCB1c2VMb29wID0gc2NoZW1hLmxlbmd0aCA+PSBpdC5vcHRzLmxvb3BFbnVtO1xuICAgICAgICBsZXQgZXFsO1xuICAgICAgICBjb25zdCBnZXRFcWwgPSAoKSA9PiAoZXFsICE9PSBudWxsICYmIGVxbCAhPT0gdm9pZCAwID8gZXFsIDogKGVxbCA9ICgwLCB1dGlsXzEudXNlRnVuYykoZ2VuLCBlcXVhbF8xLmRlZmF1bHQpKSk7XG4gICAgICAgIGxldCB2YWxpZDtcbiAgICAgICAgaWYgKHVzZUxvb3AgfHwgJGRhdGEpIHtcbiAgICAgICAgICAgIHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIpO1xuICAgICAgICAgICAgY3h0LmJsb2NrJGRhdGEodmFsaWQsIGxvb3BFbnVtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNjaGVtYSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICAgICAgY29uc3QgdlNjaGVtYSA9IGdlbi5jb25zdChcInZTY2hlbWFcIiwgc2NoZW1hQ29kZSk7XG4gICAgICAgICAgICB2YWxpZCA9ICgwLCBjb2RlZ2VuXzEub3IpKC4uLnNjaGVtYS5tYXAoKF94LCBpKSA9PiBlcXVhbENvZGUodlNjaGVtYSwgaSkpKTtcbiAgICAgICAgfVxuICAgICAgICBjeHQucGFzcyh2YWxpZCk7XG4gICAgICAgIGZ1bmN0aW9uIGxvb3BFbnVtKCkge1xuICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpO1xuICAgICAgICAgICAgZ2VuLmZvck9mKFwidlwiLCBzY2hlbWFDb2RlLCAodikgPT4gZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Z2V0RXFsKCl9KCR7ZGF0YX0sICR7dn0pYCwgKCkgPT4gZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSkuYnJlYWsoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGVxdWFsQ29kZSh2U2NoZW1hLCBpKSB7XG4gICAgICAgICAgICBjb25zdCBzY2ggPSBzY2hlbWFbaV07XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHNjaCA9PT0gXCJvYmplY3RcIiAmJiBzY2ggIT09IG51bGxcbiAgICAgICAgICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7Z2V0RXFsKCl9KCR7ZGF0YX0sICR7dlNjaGVtYX1bJHtpfV0pYFxuICAgICAgICAgICAgICAgIDogKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSA9PT0gJHtzY2h9YDtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW51bS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbGltaXROdW1iZXJfMSA9IHJlcXVpcmUoXCIuL2xpbWl0TnVtYmVyXCIpO1xuY29uc3QgbXVsdGlwbGVPZl8xID0gcmVxdWlyZShcIi4vbXVsdGlwbGVPZlwiKTtcbmNvbnN0IGxpbWl0TGVuZ3RoXzEgPSByZXF1aXJlKFwiLi9saW1pdExlbmd0aFwiKTtcbmNvbnN0IHBhdHRlcm5fMSA9IHJlcXVpcmUoXCIuL3BhdHRlcm5cIik7XG5jb25zdCBsaW1pdFByb3BlcnRpZXNfMSA9IHJlcXVpcmUoXCIuL2xpbWl0UHJvcGVydGllc1wiKTtcbmNvbnN0IHJlcXVpcmVkXzEgPSByZXF1aXJlKFwiLi9yZXF1aXJlZFwiKTtcbmNvbnN0IGxpbWl0SXRlbXNfMSA9IHJlcXVpcmUoXCIuL2xpbWl0SXRlbXNcIik7XG5jb25zdCB1bmlxdWVJdGVtc18xID0gcmVxdWlyZShcIi4vdW5pcXVlSXRlbXNcIik7XG5jb25zdCBjb25zdF8xID0gcmVxdWlyZShcIi4vY29uc3RcIik7XG5jb25zdCBlbnVtXzEgPSByZXF1aXJlKFwiLi9lbnVtXCIpO1xuY29uc3QgdmFsaWRhdGlvbiA9IFtcbiAgICAvLyBudW1iZXJcbiAgICBsaW1pdE51bWJlcl8xLmRlZmF1bHQsXG4gICAgbXVsdGlwbGVPZl8xLmRlZmF1bHQsXG4gICAgLy8gc3RyaW5nXG4gICAgbGltaXRMZW5ndGhfMS5kZWZhdWx0LFxuICAgIHBhdHRlcm5fMS5kZWZhdWx0LFxuICAgIC8vIG9iamVjdFxuICAgIGxpbWl0UHJvcGVydGllc18xLmRlZmF1bHQsXG4gICAgcmVxdWlyZWRfMS5kZWZhdWx0LFxuICAgIC8vIGFycmF5XG4gICAgbGltaXRJdGVtc18xLmRlZmF1bHQsXG4gICAgdW5pcXVlSXRlbXNfMS5kZWZhdWx0LFxuICAgIC8vIGFueVxuICAgIHsga2V5d29yZDogXCJ0eXBlXCIsIHNjaGVtYVR5cGU6IFtcInN0cmluZ1wiLCBcImFycmF5XCJdIH0sXG4gICAgeyBrZXl3b3JkOiBcIm51bGxhYmxlXCIsIHNjaGVtYVR5cGU6IFwiYm9vbGVhblwiIH0sXG4gICAgY29uc3RfMS5kZWZhdWx0LFxuICAgIGVudW1fMS5kZWZhdWx0LFxuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52YWxpZGF0ZUFkZGl0aW9uYWxJdGVtcyA9IHZvaWQgMDtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgcGFyYW1zOiB7IGxlbiB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSBtb3JlIHRoYW4gJHtsZW59IGl0ZW1zYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtczogeyBsZW4gfSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7bGVufX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImFkZGl0aW9uYWxJdGVtc1wiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJib29sZWFuXCIsIFwib2JqZWN0XCJdLFxuICAgIGJlZm9yZTogXCJ1bmlxdWVJdGVtc1wiLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgcGFyZW50U2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCB7IGl0ZW1zIH0gPSBwYXJlbnRTY2hlbWE7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgJ1wiYWRkaXRpb25hbEl0ZW1zXCIgaXMgaWdub3JlZCB3aGVuIFwiaXRlbXNcIiBpcyBub3QgYW4gYXJyYXkgb2Ygc2NoZW1hcycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRlQWRkaXRpb25hbEl0ZW1zKGN4dCwgaXRlbXMpO1xuICAgIH0sXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVBZGRpdGlvbmFsSXRlbXMoY3h0LCBpdGVtcykge1xuICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGRhdGEsIGtleXdvcmQsIGl0IH0gPSBjeHQ7XG4gICAgaXQuaXRlbXMgPSB0cnVlO1xuICAgIGNvbnN0IGxlbiA9IGdlbi5jb25zdChcImxlblwiLCAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9Lmxlbmd0aGApO1xuICAgIGlmIChzY2hlbWEgPT09IGZhbHNlKSB7XG4gICAgICAgIGN4dC5zZXRQYXJhbXMoeyBsZW46IGl0ZW1zLmxlbmd0aCB9KTtcbiAgICAgICAgY3h0LnBhc3MoKDAsIGNvZGVnZW5fMS5fKSBgJHtsZW59IDw9ICR7aXRlbXMubGVuZ3RofWApO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hID09IFwib2JqZWN0XCIgJiYgISgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLnZhcihcInZhbGlkXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7bGVufSA8PSAke2l0ZW1zLmxlbmd0aH1gKTsgLy8gVE9ETyB2YXJcbiAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSh2YWxpZCksICgpID0+IHZhbGlkYXRlSXRlbXModmFsaWQpKTtcbiAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVJdGVtcyh2YWxpZCkge1xuICAgICAgICBnZW4uZm9yUmFuZ2UoXCJpXCIsIGl0ZW1zLmxlbmd0aCwgbGVuLCAoaSkgPT4ge1xuICAgICAgICAgICAgY3h0LnN1YnNjaGVtYSh7IGtleXdvcmQsIGRhdGFQcm9wOiBpLCBkYXRhUHJvcFR5cGU6IHV0aWxfMS5UeXBlLk51bSB9LCB2YWxpZCk7XG4gICAgICAgICAgICBpZiAoIWl0LmFsbEVycm9ycylcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4gZ2VuLmJyZWFrKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlQWRkaXRpb25hbEl0ZW1zID0gdmFsaWRhdGVBZGRpdGlvbmFsSXRlbXM7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRpdGlvbmFsSXRlbXMuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVUdXBsZSA9IHZvaWQgMDtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJpdGVtc1wiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJhcnJheVwiLCBcImJvb2xlYW5cIl0sXG4gICAgYmVmb3JlOiBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBzY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpXG4gICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVUdXBsZShjeHQsIFwiYWRkaXRpb25hbEl0ZW1zXCIsIHNjaGVtYSk7XG4gICAgICAgIGl0Lml0ZW1zID0gdHJ1ZTtcbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjeHQub2soKDAsIGNvZGVfMS52YWxpZGF0ZUFycmF5KShjeHQpKTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHZhbGlkYXRlVHVwbGUoY3h0LCBleHRyYUl0ZW1zLCBzY2hBcnIgPSBjeHQuc2NoZW1hKSB7XG4gICAgY29uc3QgeyBnZW4sIHBhcmVudFNjaGVtYSwgZGF0YSwga2V5d29yZCwgaXQgfSA9IGN4dDtcbiAgICBjaGVja1N0cmljdFR1cGxlKHBhcmVudFNjaGVtYSk7XG4gICAgaWYgKGl0Lm9wdHMudW5ldmFsdWF0ZWQgJiYgc2NoQXJyLmxlbmd0aCAmJiBpdC5pdGVtcyAhPT0gdHJ1ZSkge1xuICAgICAgICBpdC5pdGVtcyA9IHV0aWxfMS5tZXJnZUV2YWx1YXRlZC5pdGVtcyhnZW4sIHNjaEFyci5sZW5ndGgsIGl0Lml0ZW1zKTtcbiAgICB9XG4gICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgIGNvbnN0IGxlbiA9IGdlbi5jb25zdChcImxlblwiLCAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9Lmxlbmd0aGApO1xuICAgIHNjaEFyci5mb3JFYWNoKChzY2gsIGkpID0+IHtcbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2gpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtsZW59ID4gJHtpfWAsICgpID0+IGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAga2V5d29yZCxcbiAgICAgICAgICAgIHNjaGVtYVByb3A6IGksXG4gICAgICAgICAgICBkYXRhUHJvcDogaSxcbiAgICAgICAgfSwgdmFsaWQpKTtcbiAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBjaGVja1N0cmljdFR1cGxlKHNjaCkge1xuICAgICAgICBjb25zdCB7IG9wdHMsIGVyclNjaGVtYVBhdGggfSA9IGl0O1xuICAgICAgICBjb25zdCBsID0gc2NoQXJyLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZnVsbFR1cGxlID0gbCA9PT0gc2NoLm1pbkl0ZW1zICYmIChsID09PSBzY2gubWF4SXRlbXMgfHwgc2NoW2V4dHJhSXRlbXNdID09PSBmYWxzZSk7XG4gICAgICAgIGlmIChvcHRzLnN0cmljdFR1cGxlcyAmJiAhZnVsbFR1cGxlKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgXCIke2tleXdvcmR9XCIgaXMgJHtsfS10dXBsZSwgYnV0IG1pbkl0ZW1zIG9yIG1heEl0ZW1zLyR7ZXh0cmFJdGVtc30gYXJlIG5vdCBzcGVjaWZpZWQgb3IgZGlmZmVyZW50IGF0IHBhdGggXCIke2VyclNjaGVtYVBhdGh9XCJgO1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCBtc2csIG9wdHMuc3RyaWN0VHVwbGVzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVUdXBsZSA9IHZhbGlkYXRlVHVwbGU7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVtcy5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXRlbXNfMSA9IHJlcXVpcmUoXCIuL2l0ZW1zXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwicHJlZml4SXRlbXNcIixcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgc2NoZW1hVHlwZTogW1wiYXJyYXlcIl0sXG4gICAgYmVmb3JlOiBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgY29kZTogKGN4dCkgPT4gKDAsIGl0ZW1zXzEudmFsaWRhdGVUdXBsZSkoY3h0LCBcIml0ZW1zXCIpLFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWZpeEl0ZW1zLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuLi9jb2RlXCIpO1xuY29uc3QgYWRkaXRpb25hbEl0ZW1zXzEgPSByZXF1aXJlKFwiLi9hZGRpdGlvbmFsSXRlbXNcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBwYXJhbXM6IHsgbGVuIH0gfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IE5PVCBoYXZlIG1vcmUgdGhhbiAke2xlbn0gaXRlbXNgLFxuICAgIHBhcmFtczogKHsgcGFyYW1zOiB7IGxlbiB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtsaW1pdDogJHtsZW59fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiaXRlbXNcIixcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgc2NoZW1hVHlwZTogW1wib2JqZWN0XCIsIFwiYm9vbGVhblwiXSxcbiAgICBiZWZvcmU6IFwidW5pcXVlSXRlbXNcIixcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IHNjaGVtYSwgcGFyZW50U2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCB7IHByZWZpeEl0ZW1zIH0gPSBwYXJlbnRTY2hlbWE7XG4gICAgICAgIGl0Lml0ZW1zID0gdHJ1ZTtcbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAocHJlZml4SXRlbXMpXG4gICAgICAgICAgICAoMCwgYWRkaXRpb25hbEl0ZW1zXzEudmFsaWRhdGVBZGRpdGlvbmFsSXRlbXMpKGN4dCwgcHJlZml4SXRlbXMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjeHQub2soKDAsIGNvZGVfMS52YWxpZGF0ZUFycmF5KShjeHQpKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZW1zMjAyMC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBwYXJhbXM6IHsgbWluLCBtYXggfSB9KSA9PiBtYXggPT09IHVuZGVmaW5lZFxuICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBjb250YWluIGF0IGxlYXN0ICR7bWlufSB2YWxpZCBpdGVtKHMpYFxuICAgICAgICA6ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBjb250YWluIGF0IGxlYXN0ICR7bWlufSBhbmQgbm8gbW9yZSB0aGFuICR7bWF4fSB2YWxpZCBpdGVtKHMpYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtczogeyBtaW4sIG1heCB9IH0pID0+IG1heCA9PT0gdW5kZWZpbmVkID8gKDAsIGNvZGVnZW5fMS5fKSBge21pbkNvbnRhaW5zOiAke21pbn19YCA6ICgwLCBjb2RlZ2VuXzEuXykgYHttaW5Db250YWluczogJHttaW59LCBtYXhDb250YWluczogJHttYXh9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiY29udGFpbnNcIixcbiAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgc2NoZW1hVHlwZTogW1wib2JqZWN0XCIsIFwiYm9vbGVhblwiXSxcbiAgICBiZWZvcmU6IFwidW5pcXVlSXRlbXNcIixcbiAgICB0cmFja0Vycm9yczogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGRhdGEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGxldCBtaW47XG4gICAgICAgIGxldCBtYXg7XG4gICAgICAgIGNvbnN0IHsgbWluQ29udGFpbnMsIG1heENvbnRhaW5zIH0gPSBwYXJlbnRTY2hlbWE7XG4gICAgICAgIGlmIChpdC5vcHRzLm5leHQpIHtcbiAgICAgICAgICAgIG1pbiA9IG1pbkNvbnRhaW5zID09PSB1bmRlZmluZWQgPyAxIDogbWluQ29udGFpbnM7XG4gICAgICAgICAgICBtYXggPSBtYXhDb250YWlucztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1pbiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVuID0gZ2VuLmNvbnN0KFwibGVuXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoYCk7XG4gICAgICAgIGN4dC5zZXRQYXJhbXMoeyBtaW4sIG1heCB9KTtcbiAgICAgICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkICYmIG1pbiA9PT0gMCkge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCBgXCJtaW5Db250YWluc1wiID09IDAgd2l0aG91dCBcIm1heENvbnRhaW5zXCI6IFwiY29udGFpbnNcIiBrZXl3b3JkIGlnbm9yZWRgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4ICE9PSB1bmRlZmluZWQgJiYgbWluID4gbWF4KSB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIGBcIm1pbkNvbnRhaW5zXCIgPiBcIm1heENvbnRhaW5zXCIgaXMgYWx3YXlzIGludmFsaWRgKTtcbiAgICAgICAgICAgIGN4dC5mYWlsKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKSB7XG4gICAgICAgICAgICBsZXQgY29uZCA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7bGVufSA+PSAke21pbn1gO1xuICAgICAgICAgICAgaWYgKG1heCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGNvbmQgPSAoMCwgY29kZWdlbl8xLl8pIGAke2NvbmR9ICYmICR7bGVufSA8PSAke21heH1gO1xuICAgICAgICAgICAgY3h0LnBhc3MoY29uZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaXQuaXRlbXMgPSB0cnVlO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZCAmJiBtaW4gPT09IDEpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlSXRlbXModmFsaWQsICgpID0+IGdlbi5pZih2YWxpZCwgKCkgPT4gZ2VuLmJyZWFrKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtaW4gPT09IDApIHtcbiAgICAgICAgICAgIGdlbi5sZXQodmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgaWYgKG1heCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9Lmxlbmd0aCA+IDBgLCB2YWxpZGF0ZUl0ZW1zV2l0aENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdlbi5sZXQodmFsaWQsIGZhbHNlKTtcbiAgICAgICAgICAgIHZhbGlkYXRlSXRlbXNXaXRoQ291bnQoKTtcbiAgICAgICAgfVxuICAgICAgICBjeHQucmVzdWx0KHZhbGlkLCAoKSA9PiBjeHQucmVzZXQoKSk7XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlSXRlbXNXaXRoQ291bnQoKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hWYWxpZCA9IGdlbi5uYW1lKFwiX3ZhbGlkXCIpO1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSBnZW4ubGV0KFwiY291bnRcIiwgMCk7XG4gICAgICAgICAgICB2YWxpZGF0ZUl0ZW1zKHNjaFZhbGlkLCAoKSA9PiBnZW4uaWYoc2NoVmFsaWQsICgpID0+IGNoZWNrTGltaXRzKGNvdW50KSkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlSXRlbXMoX3ZhbGlkLCBibG9jaykge1xuICAgICAgICAgICAgZ2VuLmZvclJhbmdlKFwiaVwiLCAwLCBsZW4sIChpKSA9PiB7XG4gICAgICAgICAgICAgICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICAgICAgICAgIGtleXdvcmQ6IFwiY29udGFpbnNcIixcbiAgICAgICAgICAgICAgICAgICAgZGF0YVByb3A6IGksXG4gICAgICAgICAgICAgICAgICAgIGRhdGFQcm9wVHlwZTogdXRpbF8xLlR5cGUuTnVtLFxuICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGVSdWxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sIF92YWxpZCk7XG4gICAgICAgICAgICAgICAgYmxvY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrTGltaXRzKGNvdW50KSB7XG4gICAgICAgICAgICBnZW4uY29kZSgoMCwgY29kZWdlbl8xLl8pIGAke2NvdW50fSsrYCk7XG4gICAgICAgICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtjb3VudH0gPj0gJHttaW59YCwgKCkgPT4gZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSkuYnJlYWsoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtjb3VudH0gPiAke21heH1gLCAoKSA9PiBnZW4uYXNzaWduKHZhbGlkLCBmYWxzZSkuYnJlYWsoKSk7XG4gICAgICAgICAgICAgICAgaWYgKG1pbiA9PT0gMSlcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtjb3VudH0gPj0gJHttaW59YCwgKCkgPT4gZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250YWlucy5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52YWxpZGF0ZVNjaGVtYURlcHMgPSBleHBvcnRzLnZhbGlkYXRlUHJvcGVydHlEZXBzID0gZXhwb3J0cy5lcnJvciA9IHZvaWQgMDtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5leHBvcnRzLmVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHBhcmFtczogeyBwcm9wZXJ0eSwgZGVwc0NvdW50LCBkZXBzIH0gfSkgPT4ge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eV9pZXMgPSBkZXBzQ291bnQgPT09IDEgPyBcInByb3BlcnR5XCIgOiBcInByb3BlcnRpZXNcIjtcbiAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBoYXZlICR7cHJvcGVydHlfaWVzfSAke2RlcHN9IHdoZW4gcHJvcGVydHkgJHtwcm9wZXJ0eX0gaXMgcHJlc2VudGA7XG4gICAgfSxcbiAgICBwYXJhbXM6ICh7IHBhcmFtczogeyBwcm9wZXJ0eSwgZGVwc0NvdW50LCBkZXBzLCBtaXNzaW5nUHJvcGVydHkgfSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7cHJvcGVydHk6ICR7cHJvcGVydHl9LFxuICAgIG1pc3NpbmdQcm9wZXJ0eTogJHttaXNzaW5nUHJvcGVydHl9LFxuICAgIGRlcHNDb3VudDogJHtkZXBzQ291bnR9LFxuICAgIGRlcHM6ICR7ZGVwc319YCwgLy8gVE9ETyBjaGFuZ2UgdG8gcmVmZXJlbmNlXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiZGVwZW5kZW5jaWVzXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBcIm9iamVjdFwiLFxuICAgIGVycm9yOiBleHBvcnRzLmVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IFtwcm9wRGVwcywgc2NoRGVwc10gPSBzcGxpdERlcGVuZGVuY2llcyhjeHQpO1xuICAgICAgICB2YWxpZGF0ZVByb3BlcnR5RGVwcyhjeHQsIHByb3BEZXBzKTtcbiAgICAgICAgdmFsaWRhdGVTY2hlbWFEZXBzKGN4dCwgc2NoRGVwcyk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBzcGxpdERlcGVuZGVuY2llcyh7IHNjaGVtYSB9KSB7XG4gICAgY29uc3QgcHJvcGVydHlEZXBzID0ge307XG4gICAgY29uc3Qgc2NoZW1hRGVwcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYSkge1xuICAgICAgICBpZiAoa2V5ID09PSBcIl9fcHJvdG9fX1wiKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IGRlcHMgPSBBcnJheS5pc0FycmF5KHNjaGVtYVtrZXldKSA/IHByb3BlcnR5RGVwcyA6IHNjaGVtYURlcHM7XG4gICAgICAgIGRlcHNba2V5XSA9IHNjaGVtYVtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gW3Byb3BlcnR5RGVwcywgc2NoZW1hRGVwc107XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5RGVwcyhjeHQsIHByb3BlcnR5RGVwcyA9IGN4dC5zY2hlbWEpIHtcbiAgICBjb25zdCB7IGdlbiwgZGF0YSwgaXQgfSA9IGN4dDtcbiAgICBpZiAoT2JqZWN0LmtleXMocHJvcGVydHlEZXBzKS5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBtaXNzaW5nID0gZ2VuLmxldChcIm1pc3NpbmdcIik7XG4gICAgZm9yIChjb25zdCBwcm9wIGluIHByb3BlcnR5RGVwcykge1xuICAgICAgICBjb25zdCBkZXBzID0gcHJvcGVydHlEZXBzW3Byb3BdO1xuICAgICAgICBpZiAoZGVwcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgaGFzUHJvcGVydHkgPSAoMCwgY29kZV8xLnByb3BlcnR5SW5EYXRhKShnZW4sIGRhdGEsIHByb3AsIGl0Lm9wdHMub3duUHJvcGVydGllcyk7XG4gICAgICAgIGN4dC5zZXRQYXJhbXMoe1xuICAgICAgICAgICAgcHJvcGVydHk6IHByb3AsXG4gICAgICAgICAgICBkZXBzQ291bnQ6IGRlcHMubGVuZ3RoLFxuICAgICAgICAgICAgZGVwczogZGVwcy5qb2luKFwiLCBcIiksXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaXQuYWxsRXJyb3JzKSB7XG4gICAgICAgICAgICBnZW4uaWYoaGFzUHJvcGVydHksICgpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlcFByb3Agb2YgZGVwcykge1xuICAgICAgICAgICAgICAgICAgICAoMCwgY29kZV8xLmNoZWNrUmVwb3J0TWlzc2luZ1Byb3ApKGN4dCwgZGVwUHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtoYXNQcm9wZXJ0eX0gJiYgKCR7KDAsIGNvZGVfMS5jaGVja01pc3NpbmdQcm9wKShjeHQsIGRlcHMsIG1pc3NpbmcpfSlgKTtcbiAgICAgICAgICAgICgwLCBjb2RlXzEucmVwb3J0TWlzc2luZ1Byb3ApKGN4dCwgbWlzc2luZyk7XG4gICAgICAgICAgICBnZW4uZWxzZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy52YWxpZGF0ZVByb3BlcnR5RGVwcyA9IHZhbGlkYXRlUHJvcGVydHlEZXBzO1xuZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWFEZXBzKGN4dCwgc2NoZW1hRGVwcyA9IGN4dC5zY2hlbWEpIHtcbiAgICBjb25zdCB7IGdlbiwgZGF0YSwga2V5d29yZCwgaXQgfSA9IGN4dDtcbiAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgZm9yIChjb25zdCBwcm9wIGluIHNjaGVtYURlcHMpIHtcbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWFEZXBzW3Byb3BdKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBnZW4uaWYoKDAsIGNvZGVfMS5wcm9wZXJ0eUluRGF0YSkoZ2VuLCBkYXRhLCBwcm9wLCBpdC5vcHRzLm93blByb3BlcnRpZXMpLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHsga2V5d29yZCwgc2NoZW1hUHJvcDogcHJvcCB9LCB2YWxpZCk7XG4gICAgICAgICAgICBjeHQubWVyZ2VWYWxpZEV2YWx1YXRlZChzY2hDeHQsIHZhbGlkKTtcbiAgICAgICAgfSwgKCkgPT4gZ2VuLnZhcih2YWxpZCwgdHJ1ZSkgLy8gVE9ETyB2YXJcbiAgICAgICAgKTtcbiAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlU2NoZW1hRGVwcyA9IHZhbGlkYXRlU2NoZW1hRGVwcztcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlcGVuZGVuY2llcy5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcInByb3BlcnR5IG5hbWUgbXVzdCBiZSB2YWxpZFwiLFxuICAgIHBhcmFtczogKHsgcGFyYW1zIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtwcm9wZXJ0eU5hbWU6ICR7cGFyYW1zLnByb3BlcnR5TmFtZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJwcm9wZXJ0eU5hbWVzXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGRhdGEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBnZW4uZm9ySW4oXCJrZXlcIiwgZGF0YSwgKGtleSkgPT4ge1xuICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IHByb3BlcnR5TmFtZToga2V5IH0pO1xuICAgICAgICAgICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICAgICAga2V5d29yZDogXCJwcm9wZXJ0eU5hbWVzXCIsXG4gICAgICAgICAgICAgICAgZGF0YToga2V5LFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlczogW1wic3RyaW5nXCJdLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZToga2V5LFxuICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGN4dC5lcnJvcih0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWl0LmFsbEVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmJyZWFrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0eU5hbWVzLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBuYW1lc18xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvbmFtZXNcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogXCJtdXN0IE5PVCBoYXZlIGFkZGl0aW9uYWwgcHJvcGVydGllc1wiLFxuICAgIHBhcmFtczogKHsgcGFyYW1zIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHthZGRpdGlvbmFsUHJvcGVydHk6ICR7cGFyYW1zLmFkZGl0aW9uYWxQcm9wZXJ0eX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiLFxuICAgIHR5cGU6IFtcIm9iamVjdFwiXSxcbiAgICBzY2hlbWFUeXBlOiBbXCJib29sZWFuXCIsIFwib2JqZWN0XCJdLFxuICAgIGFsbG93VW5kZWZpbmVkOiB0cnVlLFxuICAgIHRyYWNrRXJyb3JzOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgZGF0YSwgZXJyc0NvdW50LCBpdCB9ID0gY3h0O1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFlcnJzQ291bnQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhanYgaW1wbGVtZW50YXRpb24gZXJyb3JcIik7XG4gICAgICAgIGNvbnN0IHsgYWxsRXJyb3JzLCBvcHRzIH0gPSBpdDtcbiAgICAgICAgaXQucHJvcHMgPSB0cnVlO1xuICAgICAgICBpZiAob3B0cy5yZW1vdmVBZGRpdGlvbmFsICE9PSBcImFsbFwiICYmICgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBwcm9wcyA9ICgwLCBjb2RlXzEuYWxsU2NoZW1hUHJvcGVydGllcykocGFyZW50U2NoZW1hLnByb3BlcnRpZXMpO1xuICAgICAgICBjb25zdCBwYXRQcm9wcyA9ICgwLCBjb2RlXzEuYWxsU2NoZW1hUHJvcGVydGllcykocGFyZW50U2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzKTtcbiAgICAgICAgY2hlY2tBZGRpdGlvbmFsUHJvcGVydGllcygpO1xuICAgICAgICBjeHQub2soKDAsIGNvZGVnZW5fMS5fKSBgJHtlcnJzQ291bnR9ID09PSAke25hbWVzXzEuZGVmYXVsdC5lcnJvcnN9YCk7XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrQWRkaXRpb25hbFByb3BlcnRpZXMoKSB7XG4gICAgICAgICAgICBnZW4uZm9ySW4oXCJrZXlcIiwgZGF0YSwgKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcHJvcHMubGVuZ3RoICYmICFwYXRQcm9wcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0eUNvZGUoa2V5KTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGdlbi5pZihpc0FkZGl0aW9uYWwoa2V5KSwgKCkgPT4gYWRkaXRpb25hbFByb3BlcnR5Q29kZShrZXkpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzQWRkaXRpb25hbChrZXkpIHtcbiAgICAgICAgICAgIGxldCBkZWZpbmVkUHJvcDtcbiAgICAgICAgICAgIGlmIChwcm9wcy5sZW5ndGggPiA4KSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBtYXliZSBhbiBvcHRpb24gaW5zdGVhZCBvZiBoYXJkLWNvZGVkIDg/XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcHNTY2hlbWEgPSAoMCwgdXRpbF8xLnNjaGVtYVJlZk9yVmFsKShpdCwgcGFyZW50U2NoZW1hLnByb3BlcnRpZXMsIFwicHJvcGVydGllc1wiKTtcbiAgICAgICAgICAgICAgICBkZWZpbmVkUHJvcCA9ICgwLCBjb2RlXzEuaXNPd25Qcm9wZXJ0eSkoZ2VuLCBwcm9wc1NjaGVtYSwga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRlZmluZWRQcm9wID0gKDAsIGNvZGVnZW5fMS5vcikoLi4ucHJvcHMubWFwKChwKSA9PiAoMCwgY29kZWdlbl8xLl8pIGAke2tleX0gPT09ICR7cH1gKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVkUHJvcCA9IGNvZGVnZW5fMS5uaWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGF0UHJvcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lZFByb3AgPSAoMCwgY29kZWdlbl8xLm9yKShkZWZpbmVkUHJvcCwgLi4ucGF0UHJvcHMubWFwKChwKSA9PiAoMCwgY29kZWdlbl8xLl8pIGAkeygwLCBjb2RlXzEudXNlUGF0dGVybikoY3h0LCBwKX0udGVzdCgke2tleX0pYCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEubm90KShkZWZpbmVkUHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlQWRkaXRpb25hbChrZXkpIHtcbiAgICAgICAgICAgIGdlbi5jb2RlKCgwLCBjb2RlZ2VuXzEuXykgYGRlbGV0ZSAke2RhdGF9WyR7a2V5fV1gKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhZGRpdGlvbmFsUHJvcGVydHlDb2RlKGtleSkge1xuICAgICAgICAgICAgaWYgKG9wdHMucmVtb3ZlQWRkaXRpb25hbCA9PT0gXCJhbGxcIiB8fCAob3B0cy5yZW1vdmVBZGRpdGlvbmFsICYmIHNjaGVtYSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlQWRkaXRpb25hbChrZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzY2hlbWEgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IGFkZGl0aW9uYWxQcm9wZXJ0eToga2V5IH0pO1xuICAgICAgICAgICAgICAgIGN4dC5lcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmICghYWxsRXJyb3JzKVxuICAgICAgICAgICAgICAgICAgICBnZW4uYnJlYWsoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcIm9iamVjdFwiICYmICEoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5yZW1vdmVBZGRpdGlvbmFsID09PSBcImZhaWxpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICBhcHBseUFkZGl0aW9uYWxTY2hlbWEoa2V5LCB2YWxpZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3h0LnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVBZGRpdGlvbmFsKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlBZGRpdGlvbmFsU2NoZW1hKGtleSwgdmFsaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbEVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm5vdCkodmFsaWQpLCAoKSA9PiBnZW4uYnJlYWsoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFwcGx5QWRkaXRpb25hbFNjaGVtYShrZXksIHZhbGlkLCBlcnJvcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjaGVtYSA9IHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkOiBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCIsXG4gICAgICAgICAgICAgICAgZGF0YVByb3A6IGtleSxcbiAgICAgICAgICAgICAgICBkYXRhUHJvcFR5cGU6IHV0aWxfMS5UeXBlLlN0cixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZXJyb3JzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3Vic2NoZW1hLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVycm9yczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGFsbEVycm9yczogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHN1YnNjaGVtYSwgdmFsaWQpO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRpdGlvbmFsUHJvcGVydGllcy5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3ZhbGlkYXRlXCIpO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgYWRkaXRpb25hbFByb3BlcnRpZXNfMSA9IHJlcXVpcmUoXCIuL2FkZGl0aW9uYWxQcm9wZXJ0aWVzXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwicHJvcGVydGllc1wiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgc2NoZW1hVHlwZTogXCJvYmplY3RcIixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGRhdGEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmIChpdC5vcHRzLnJlbW92ZUFkZGl0aW9uYWwgPT09IFwiYWxsXCIgJiYgcGFyZW50U2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEuZGVmYXVsdC5jb2RlKG5ldyB2YWxpZGF0ZV8xLktleXdvcmRDeHQoaXQsIGFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEuZGVmYXVsdCwgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWxsUHJvcHMgPSAoMCwgY29kZV8xLmFsbFNjaGVtYVByb3BlcnRpZXMpKHNjaGVtYSk7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBhbGxQcm9wcykge1xuICAgICAgICAgICAgaXQuZGVmaW5lZFByb3BlcnRpZXMuYWRkKHByb3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdC5vcHRzLnVuZXZhbHVhdGVkICYmIGFsbFByb3BzLmxlbmd0aCAmJiBpdC5wcm9wcyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgaXQucHJvcHMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQucHJvcHMoZ2VuLCAoMCwgdXRpbF8xLnRvSGFzaCkoYWxsUHJvcHMpLCBpdC5wcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGFsbFByb3BzLmZpbHRlcigocCkgPT4gISgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWFbcF0pKTtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBpZiAoaGFzRGVmYXVsdChwcm9wKSkge1xuICAgICAgICAgICAgICAgIGFwcGx5UHJvcGVydHlTY2hlbWEocHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVfMS5wcm9wZXJ0eUluRGF0YSkoZ2VuLCBkYXRhLCBwcm9wLCBpdC5vcHRzLm93blByb3BlcnRpZXMpKTtcbiAgICAgICAgICAgICAgICBhcHBseVByb3BlcnR5U2NoZW1hKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmICghaXQuYWxsRXJyb3JzKVxuICAgICAgICAgICAgICAgICAgICBnZW4uZWxzZSgpLnZhcih2YWxpZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZ2VuLmVuZElmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjeHQuaXQuZGVmaW5lZFByb3BlcnRpZXMuYWRkKHByb3ApO1xuICAgICAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYXNEZWZhdWx0KHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBpdC5vcHRzLnVzZURlZmF1bHRzICYmICFpdC5jb21wb3NpdGVSdWxlICYmIHNjaGVtYVtwcm9wXS5kZWZhdWx0ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlQcm9wZXJ0eVNjaGVtYShwcm9wKSB7XG4gICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkOiBcInByb3BlcnRpZXNcIixcbiAgICAgICAgICAgICAgICBzY2hlbWFQcm9wOiBwcm9wLFxuICAgICAgICAgICAgICAgIGRhdGFQcm9wOiBwcm9wLFxuICAgICAgICAgICAgfSwgdmFsaWQpO1xuICAgICAgICB9XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0aWVzLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgdXRpbF8yID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcInBhdHRlcm5Qcm9wZXJ0aWVzXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBcIm9iamVjdFwiLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGRhdGEsIHBhcmVudFNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgY29uc3QgeyBvcHRzIH0gPSBpdDtcbiAgICAgICAgY29uc3QgcGF0dGVybnMgPSAoMCwgY29kZV8xLmFsbFNjaGVtYVByb3BlcnRpZXMpKHNjaGVtYSk7XG4gICAgICAgIGNvbnN0IGFsd2F5c1ZhbGlkUGF0dGVybnMgPSBwYXR0ZXJucy5maWx0ZXIoKHApID0+ICgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWFbcF0pKTtcbiAgICAgICAgaWYgKHBhdHRlcm5zLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgKGFsd2F5c1ZhbGlkUGF0dGVybnMubGVuZ3RoID09PSBwYXR0ZXJucy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAoIWl0Lm9wdHMudW5ldmFsdWF0ZWQgfHwgaXQucHJvcHMgPT09IHRydWUpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoZWNrUHJvcGVydGllcyA9IG9wdHMuc3RyaWN0U2NoZW1hICYmICFvcHRzLmFsbG93TWF0Y2hpbmdQcm9wZXJ0aWVzICYmIHBhcmVudFNjaGVtYS5wcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgIGlmIChpdC5wcm9wcyAhPT0gdHJ1ZSAmJiAhKGl0LnByb3BzIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUpKSB7XG4gICAgICAgICAgICBpdC5wcm9wcyA9ICgwLCB1dGlsXzIuZXZhbHVhdGVkUHJvcHNUb05hbWUpKGdlbiwgaXQucHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IGl0O1xuICAgICAgICB2YWxpZGF0ZVBhdHRlcm5Qcm9wZXJ0aWVzKCk7XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlUGF0dGVyblByb3BlcnRpZXMoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhdCBvZiBwYXR0ZXJucykge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja1Byb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrTWF0Y2hpbmdQcm9wZXJ0aWVzKHBhdCk7XG4gICAgICAgICAgICAgICAgaWYgKGl0LmFsbEVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZVByb3BlcnRpZXMocGF0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi52YXIodmFsaWQsIHRydWUpOyAvLyBUT0RPIHZhclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZVByb3BlcnRpZXMocGF0KTtcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKHZhbGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tNYXRjaGluZ1Byb3BlcnRpZXMocGF0KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gY2hlY2tQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAocGF0KS50ZXN0KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgYHByb3BlcnR5ICR7cHJvcH0gbWF0Y2hlcyBwYXR0ZXJuICR7cGF0fSAodXNlIGFsbG93TWF0Y2hpbmdQcm9wZXJ0aWVzKWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnRpZXMocGF0KSB7XG4gICAgICAgICAgICBnZW4uZm9ySW4oXCJrZXlcIiwgZGF0YSwgKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAkeygwLCBjb2RlXzEudXNlUGF0dGVybikoY3h0LCBwYXQpfS50ZXN0KCR7a2V5fSlgLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsd2F5c1ZhbGlkID0gYWx3YXlzVmFsaWRQYXR0ZXJucy5pbmNsdWRlcyhwYXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsd2F5c1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXl3b3JkOiBcInBhdHRlcm5Qcm9wZXJ0aWVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hUHJvcDogcGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQcm9wOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVByb3BUeXBlOiB1dGlsXzIuVHlwZS5TdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudW5ldmFsdWF0ZWQgJiYgcHJvcHMgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtwcm9wc31bJHtrZXl9XWAsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFhbHdheXNWYWxpZCAmJiAhaXQuYWxsRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW4gc2hvcnQtY2lyY3VpdCBpZiBgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzYCBpcyBub3Qgc3VwcG9ydGVkIChvcHRzLm5leHQgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3IgaWYgYWxsIHByb3BlcnRpZXMgd2VyZSBldmFsdWF0ZWQgKHByb3BzID09PSB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSh2YWxpZCksICgpID0+IGdlbi5icmVhaygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdHRlcm5Qcm9wZXJ0aWVzLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwibm90XCIsXG4gICAgc2NoZW1hVHlwZTogW1wib2JqZWN0XCIsIFwiYm9vbGVhblwiXSxcbiAgICB0cmFja0Vycm9yczogdHJ1ZSxcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSkpIHtcbiAgICAgICAgICAgIGN4dC5mYWlsKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgIGtleXdvcmQ6IFwibm90XCIsXG4gICAgICAgICAgICBjb21wb3NpdGVSdWxlOiB0cnVlLFxuICAgICAgICAgICAgY3JlYXRlRXJyb3JzOiBmYWxzZSxcbiAgICAgICAgICAgIGFsbEVycm9yczogZmFsc2UsXG4gICAgICAgIH0sIHZhbGlkKTtcbiAgICAgICAgY3h0LmZhaWxSZXN1bHQodmFsaWQsICgpID0+IGN4dC5yZXNldCgpLCAoKSA9PiBjeHQuZXJyb3IoKSk7XG4gICAgfSxcbiAgICBlcnJvcjogeyBtZXNzYWdlOiBcIm11c3QgTk9UIGJlIHZhbGlkXCIgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3QuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuLi9jb2RlXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiYW55T2ZcIixcbiAgICBzY2hlbWFUeXBlOiBcImFycmF5XCIsXG4gICAgdHJhY2tFcnJvcnM6IHRydWUsXG4gICAgY29kZTogY29kZV8xLnZhbGlkYXRlVW5pb24sXG4gICAgZXJyb3I6IHsgbWVzc2FnZTogXCJtdXN0IG1hdGNoIGEgc2NoZW1hIGluIGFueU9mXCIgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbnlPZi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcIm11c3QgbWF0Y2ggZXhhY3RseSBvbmUgc2NoZW1hIGluIG9uZU9mXCIsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXMgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge3Bhc3NpbmdTY2hlbWFzOiAke3BhcmFtcy5wYXNzaW5nfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIm9uZU9mXCIsXG4gICAgc2NoZW1hVHlwZTogXCJhcnJheVwiLFxuICAgIHRyYWNrRXJyb3JzOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWEpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICBpZiAoaXQub3B0cy5kaXNjcmltaW5hdG9yICYmIHBhcmVudFNjaGVtYS5kaXNjcmltaW5hdG9yKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBzY2hBcnIgPSBzY2hlbWE7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgcGFzc2luZyA9IGdlbi5sZXQoXCJwYXNzaW5nXCIsIG51bGwpO1xuICAgICAgICBjb25zdCBzY2hWYWxpZCA9IGdlbi5uYW1lKFwiX3ZhbGlkXCIpO1xuICAgICAgICBjeHQuc2V0UGFyYW1zKHsgcGFzc2luZyB9KTtcbiAgICAgICAgLy8gVE9ETyBwb3NzaWJseSBmYWlsIHN0cmFpZ2h0IGF3YXkgKHdpdGggd2FybmluZyBvciBleGNlcHRpb24pIGlmIHRoZXJlIGFyZSB0d28gZW1wdHkgYWx3YXlzIHZhbGlkIHNjaGVtYXNcbiAgICAgICAgZ2VuLmJsb2NrKHZhbGlkYXRlT25lT2YpO1xuICAgICAgICBjeHQucmVzdWx0KHZhbGlkLCAoKSA9PiBjeHQucmVzZXQoKSwgKCkgPT4gY3h0LmVycm9yKHRydWUpKTtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVPbmVPZigpIHtcbiAgICAgICAgICAgIHNjaEFyci5mb3JFYWNoKChzY2gsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2NoQ3h0O1xuICAgICAgICAgICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoKSkge1xuICAgICAgICAgICAgICAgICAgICBnZW4udmFyKHNjaFZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNjaEN4dCA9IGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5d29yZDogXCJvbmVPZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hUHJvcDogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0sIHNjaFZhbGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAgICAgLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7c2NoVmFsaWR9ICYmICR7dmFsaWR9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hc3NpZ24odmFsaWQsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihwYXNzaW5nLCAoMCwgY29kZWdlbl8xLl8pIGBbJHtwYXNzaW5nfSwgJHtpfV1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVsc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2VuLmlmKHNjaFZhbGlkLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHBhc3NpbmcsIGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NoQ3h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgY3h0Lm1lcmdlRXZhbHVhdGVkKHNjaEN4dCwgY29kZWdlbl8xLk5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9uZU9mLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiYWxsT2ZcIixcbiAgICBzY2hlbWFUeXBlOiBcImFycmF5XCIsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWEpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgIHNjaGVtYS5mb3JFYWNoKChzY2gsIGkpID0+IHtcbiAgICAgICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHsga2V5d29yZDogXCJhbGxPZlwiLCBzY2hlbWFQcm9wOiBpIH0sIHZhbGlkKTtcbiAgICAgICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgICAgICAgICBjeHQubWVyZ2VFdmFsdWF0ZWQoc2NoQ3h0KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbGxPZi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBwYXJhbXMgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IG1hdGNoIFwiJHtwYXJhbXMuaWZDbGF1c2V9XCIgc2NoZW1hYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtcyB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7ZmFpbGluZ0tleXdvcmQ6ICR7cGFyYW1zLmlmQ2xhdXNlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImlmXCIsXG4gICAgc2NoZW1hVHlwZTogW1wib2JqZWN0XCIsIFwiYm9vbGVhblwiXSxcbiAgICB0cmFja0Vycm9yczogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgcGFyZW50U2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICBpZiAocGFyZW50U2NoZW1hLnRoZW4gPT09IHVuZGVmaW5lZCAmJiBwYXJlbnRTY2hlbWEuZWxzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsICdcImlmXCIgd2l0aG91dCBcInRoZW5cIiBhbmQgXCJlbHNlXCIgaXMgaWdub3JlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhc1RoZW4gPSBoYXNTY2hlbWEoaXQsIFwidGhlblwiKTtcbiAgICAgICAgY29uc3QgaGFzRWxzZSA9IGhhc1NjaGVtYShpdCwgXCJlbHNlXCIpO1xuICAgICAgICBpZiAoIWhhc1RoZW4gJiYgIWhhc0Vsc2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIsIHRydWUpO1xuICAgICAgICBjb25zdCBzY2hWYWxpZCA9IGdlbi5uYW1lKFwiX3ZhbGlkXCIpO1xuICAgICAgICB2YWxpZGF0ZUlmKCk7XG4gICAgICAgIGN4dC5yZXNldCgpO1xuICAgICAgICBpZiAoaGFzVGhlbiAmJiBoYXNFbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBpZkNsYXVzZSA9IGdlbi5sZXQoXCJpZkNsYXVzZVwiKTtcbiAgICAgICAgICAgIGN4dC5zZXRQYXJhbXMoeyBpZkNsYXVzZSB9KTtcbiAgICAgICAgICAgIGdlbi5pZihzY2hWYWxpZCwgdmFsaWRhdGVDbGF1c2UoXCJ0aGVuXCIsIGlmQ2xhdXNlKSwgdmFsaWRhdGVDbGF1c2UoXCJlbHNlXCIsIGlmQ2xhdXNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzVGhlbikge1xuICAgICAgICAgICAgZ2VuLmlmKHNjaFZhbGlkLCB2YWxpZGF0ZUNsYXVzZShcInRoZW5cIikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KShzY2hWYWxpZCksIHZhbGlkYXRlQ2xhdXNlKFwiZWxzZVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgY3h0LnBhc3ModmFsaWQsICgpID0+IGN4dC5lcnJvcih0cnVlKSk7XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlSWYoKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkOiBcImlmXCIsXG4gICAgICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFcnJvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbEVycm9yczogZmFsc2UsXG4gICAgICAgICAgICB9LCBzY2hWYWxpZCk7XG4gICAgICAgICAgICBjeHQubWVyZ2VFdmFsdWF0ZWQoc2NoQ3h0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZUNsYXVzZShrZXl3b3JkLCBpZkNsYXVzZSkge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHsga2V5d29yZCB9LCBzY2hWYWxpZCk7XG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgc2NoVmFsaWQpO1xuICAgICAgICAgICAgICAgIGN4dC5tZXJnZVZhbGlkRXZhbHVhdGVkKHNjaEN4dCwgdmFsaWQpO1xuICAgICAgICAgICAgICAgIGlmIChpZkNsYXVzZSlcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmFzc2lnbihpZkNsYXVzZSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtrZXl3b3JkfWApO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IGlmQ2xhdXNlOiBrZXl3b3JkIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZnVuY3Rpb24gaGFzU2NoZW1hKGl0LCBrZXl3b3JkKSB7XG4gICAgY29uc3Qgc2NoZW1hID0gaXQuc2NoZW1hW2tleXdvcmRdO1xuICAgIHJldHVybiBzY2hlbWEgIT09IHVuZGVmaW5lZCAmJiAhKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBbXCJ0aGVuXCIsIFwiZWxzZVwiXSxcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIGNvZGUoeyBrZXl3b3JkLCBwYXJlbnRTY2hlbWEsIGl0IH0pIHtcbiAgICAgICAgaWYgKHBhcmVudFNjaGVtYS5pZiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCBgXCIke2tleXdvcmR9XCIgd2l0aG91dCBcImlmXCIgaXMgaWdub3JlZGApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhlbkVsc2UuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFkZGl0aW9uYWxJdGVtc18xID0gcmVxdWlyZShcIi4vYWRkaXRpb25hbEl0ZW1zXCIpO1xuY29uc3QgcHJlZml4SXRlbXNfMSA9IHJlcXVpcmUoXCIuL3ByZWZpeEl0ZW1zXCIpO1xuY29uc3QgaXRlbXNfMSA9IHJlcXVpcmUoXCIuL2l0ZW1zXCIpO1xuY29uc3QgaXRlbXMyMDIwXzEgPSByZXF1aXJlKFwiLi9pdGVtczIwMjBcIik7XG5jb25zdCBjb250YWluc18xID0gcmVxdWlyZShcIi4vY29udGFpbnNcIik7XG5jb25zdCBkZXBlbmRlbmNpZXNfMSA9IHJlcXVpcmUoXCIuL2RlcGVuZGVuY2llc1wiKTtcbmNvbnN0IHByb3BlcnR5TmFtZXNfMSA9IHJlcXVpcmUoXCIuL3Byb3BlcnR5TmFtZXNcIik7XG5jb25zdCBhZGRpdGlvbmFsUHJvcGVydGllc18xID0gcmVxdWlyZShcIi4vYWRkaXRpb25hbFByb3BlcnRpZXNcIik7XG5jb25zdCBwcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi9wcm9wZXJ0aWVzXCIpO1xuY29uc3QgcGF0dGVyblByb3BlcnRpZXNfMSA9IHJlcXVpcmUoXCIuL3BhdHRlcm5Qcm9wZXJ0aWVzXCIpO1xuY29uc3Qgbm90XzEgPSByZXF1aXJlKFwiLi9ub3RcIik7XG5jb25zdCBhbnlPZl8xID0gcmVxdWlyZShcIi4vYW55T2ZcIik7XG5jb25zdCBvbmVPZl8xID0gcmVxdWlyZShcIi4vb25lT2ZcIik7XG5jb25zdCBhbGxPZl8xID0gcmVxdWlyZShcIi4vYWxsT2ZcIik7XG5jb25zdCBpZl8xID0gcmVxdWlyZShcIi4vaWZcIik7XG5jb25zdCB0aGVuRWxzZV8xID0gcmVxdWlyZShcIi4vdGhlbkVsc2VcIik7XG5mdW5jdGlvbiBnZXRBcHBsaWNhdG9yKGRyYWZ0MjAyMCA9IGZhbHNlKSB7XG4gICAgY29uc3QgYXBwbGljYXRvciA9IFtcbiAgICAgICAgLy8gYW55XG4gICAgICAgIG5vdF8xLmRlZmF1bHQsXG4gICAgICAgIGFueU9mXzEuZGVmYXVsdCxcbiAgICAgICAgb25lT2ZfMS5kZWZhdWx0LFxuICAgICAgICBhbGxPZl8xLmRlZmF1bHQsXG4gICAgICAgIGlmXzEuZGVmYXVsdCxcbiAgICAgICAgdGhlbkVsc2VfMS5kZWZhdWx0LFxuICAgICAgICAvLyBvYmplY3RcbiAgICAgICAgcHJvcGVydHlOYW1lc18xLmRlZmF1bHQsXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEuZGVmYXVsdCxcbiAgICAgICAgZGVwZW5kZW5jaWVzXzEuZGVmYXVsdCxcbiAgICAgICAgcHJvcGVydGllc18xLmRlZmF1bHQsXG4gICAgICAgIHBhdHRlcm5Qcm9wZXJ0aWVzXzEuZGVmYXVsdCxcbiAgICBdO1xuICAgIC8vIGFycmF5XG4gICAgaWYgKGRyYWZ0MjAyMClcbiAgICAgICAgYXBwbGljYXRvci5wdXNoKHByZWZpeEl0ZW1zXzEuZGVmYXVsdCwgaXRlbXMyMDIwXzEuZGVmYXVsdCk7XG4gICAgZWxzZVxuICAgICAgICBhcHBsaWNhdG9yLnB1c2goYWRkaXRpb25hbEl0ZW1zXzEuZGVmYXVsdCwgaXRlbXNfMS5kZWZhdWx0KTtcbiAgICBhcHBsaWNhdG9yLnB1c2goY29udGFpbnNfMS5kZWZhdWx0KTtcbiAgICByZXR1cm4gYXBwbGljYXRvcjtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGdldEFwcGxpY2F0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IG1hdGNoIGZvcm1hdCBcIiR7c2NoZW1hQ29kZX1cImAsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtmb3JtYXQ6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJmb3JtYXRcIixcbiAgICB0eXBlOiBbXCJudW1iZXJcIiwgXCJzdHJpbmdcIl0sXG4gICAgc2NoZW1hVHlwZTogXCJzdHJpbmdcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCwgcnVsZVR5cGUpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIGRhdGEsICRkYXRhLCBzY2hlbWEsIHNjaGVtYUNvZGUsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IHsgb3B0cywgZXJyU2NoZW1hUGF0aCwgc2NoZW1hRW52LCBzZWxmIH0gPSBpdDtcbiAgICAgICAgaWYgKCFvcHRzLnZhbGlkYXRlRm9ybWF0cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKCRkYXRhKVxuICAgICAgICAgICAgdmFsaWRhdGUkRGF0YUZvcm1hdCgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB2YWxpZGF0ZUZvcm1hdCgpO1xuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZSREYXRhRm9ybWF0KCkge1xuICAgICAgICAgICAgY29uc3QgZm10cyA9IGdlbi5zY29wZVZhbHVlKFwiZm9ybWF0c1wiLCB7XG4gICAgICAgICAgICAgICAgcmVmOiBzZWxmLmZvcm1hdHMsXG4gICAgICAgICAgICAgICAgY29kZTogb3B0cy5jb2RlLmZvcm1hdHMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGZEZWYgPSBnZW4uY29uc3QoXCJmRGVmXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7Zm10c31bJHtzY2hlbWFDb2RlfV1gKTtcbiAgICAgICAgICAgIGNvbnN0IGZUeXBlID0gZ2VuLmxldChcImZUeXBlXCIpO1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gZ2VuLmxldChcImZvcm1hdFwiKTtcbiAgICAgICAgICAgIC8vIFRPRE8gc2ltcGxpZnlcbiAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtmRGVmfSA9PSBcIm9iamVjdFwiICYmICEoJHtmRGVmfSBpbnN0YW5jZW9mIFJlZ0V4cClgLCAoKSA9PiBnZW4uYXNzaWduKGZUeXBlLCAoMCwgY29kZWdlbl8xLl8pIGAke2ZEZWZ9LnR5cGUgfHwgXCJzdHJpbmdcImApLmFzc2lnbihmb3JtYXQsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZkRlZn0udmFsaWRhdGVgKSwgKCkgPT4gZ2VuLmFzc2lnbihmVHlwZSwgKDAsIGNvZGVnZW5fMS5fKSBgXCJzdHJpbmdcImApLmFzc2lnbihmb3JtYXQsIGZEZWYpKTtcbiAgICAgICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5vcikodW5rbm93bkZtdCgpLCBpbnZhbGlkRm10KCkpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVua25vd25GbXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuc3RyaWN0U2NoZW1hID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvZGVnZW5fMS5uaWw7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7c2NoZW1hQ29kZX0gJiYgISR7Zm9ybWF0fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpbnZhbGlkRm10KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxGb3JtYXQgPSBzY2hlbWFFbnYuJGFzeW5jXG4gICAgICAgICAgICAgICAgICAgID8gKDAsIGNvZGVnZW5fMS5fKSBgKCR7ZkRlZn0uYXN5bmMgPyBhd2FpdCAke2Zvcm1hdH0oJHtkYXRhfSkgOiAke2Zvcm1hdH0oJHtkYXRhfSkpYFxuICAgICAgICAgICAgICAgICAgICA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7Zm9ybWF0fSgke2RhdGF9KWA7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWREYXRhID0gKDAsIGNvZGVnZW5fMS5fKSBgKHR5cGVvZiAke2Zvcm1hdH0gPT0gXCJmdW5jdGlvblwiID8gJHtjYWxsRm9ybWF0fSA6ICR7Zm9ybWF0fS50ZXN0KCR7ZGF0YX0pKWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7Zm9ybWF0fSAmJiAke2Zvcm1hdH0gIT09IHRydWUgJiYgJHtmVHlwZX0gPT09ICR7cnVsZVR5cGV9ICYmICEke3ZhbGlkRGF0YX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KCkge1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0RGVmID0gc2VsZi5mb3JtYXRzW3NjaGVtYV07XG4gICAgICAgICAgICBpZiAoIWZvcm1hdERlZikge1xuICAgICAgICAgICAgICAgIHVua25vd25Gb3JtYXQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9ybWF0RGVmID09PSB0cnVlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IFtmbXRUeXBlLCBmb3JtYXQsIGZtdFJlZl0gPSBnZXRGb3JtYXQoZm9ybWF0RGVmKTtcbiAgICAgICAgICAgIGlmIChmbXRUeXBlID09PSBydWxlVHlwZSlcbiAgICAgICAgICAgICAgICBjeHQucGFzcyh2YWxpZENvbmRpdGlvbigpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVua25vd25Gb3JtYXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuc3RyaWN0U2NoZW1hID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuKHVua25vd25Nc2coKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHVua25vd25Nc2coKSk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdW5rbm93bk1zZygpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB1bmtub3duIGZvcm1hdCBcIiR7c2NoZW1hfVwiIGlnbm9yZWQgaW4gc2NoZW1hIGF0IHBhdGggXCIke2VyclNjaGVtYVBhdGh9XCJgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEZvcm1hdChmbXREZWYpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gZm10RGVmIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgICAgICAgICAgICAgICAgID8gKDAsIGNvZGVnZW5fMS5yZWdleHBDb2RlKShmbXREZWYpXG4gICAgICAgICAgICAgICAgICAgIDogb3B0cy5jb2RlLmZvcm1hdHNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKDAsIGNvZGVnZW5fMS5fKSBgJHtvcHRzLmNvZGUuZm9ybWF0c30keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKHNjaGVtYSl9YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZm10ID0gZ2VuLnNjb3BlVmFsdWUoXCJmb3JtYXRzXCIsIHsga2V5OiBzY2hlbWEsIHJlZjogZm10RGVmLCBjb2RlIH0pO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm10RGVmID09IFwib2JqZWN0XCIgJiYgIShmbXREZWYgaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZm10RGVmLnR5cGUgfHwgXCJzdHJpbmdcIiwgZm10RGVmLnZhbGlkYXRlLCAoMCwgY29kZWdlbl8xLl8pIGAke2ZtdH0udmFsaWRhdGVgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcInN0cmluZ1wiLCBmbXREZWYsIGZtdF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiB2YWxpZENvbmRpdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdERlZiA9PSBcIm9iamVjdFwiICYmICEoZm9ybWF0RGVmIGluc3RhbmNlb2YgUmVnRXhwKSAmJiBmb3JtYXREZWYuYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlbWFFbnYuJGFzeW5jKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXN5bmMgZm9ybWF0IGluIHN5bmMgc2NoZW1hXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5fKSBgYXdhaXQgJHtmbXRSZWZ9KCR7ZGF0YX0pYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBmb3JtYXQgPT0gXCJmdW5jdGlvblwiID8gKDAsIGNvZGVnZW5fMS5fKSBgJHtmbXRSZWZ9KCR7ZGF0YX0pYCA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7Zm10UmVmfS50ZXN0KCR7ZGF0YX0pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBmb3JtYXRfMSA9IHJlcXVpcmUoXCIuL2Zvcm1hdFwiKTtcbmNvbnN0IGZvcm1hdCA9IFtmb3JtYXRfMS5kZWZhdWx0XTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZvcm1hdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbnRlbnRWb2NhYnVsYXJ5ID0gZXhwb3J0cy5tZXRhZGF0YVZvY2FidWxhcnkgPSB2b2lkIDA7XG5leHBvcnRzLm1ldGFkYXRhVm9jYWJ1bGFyeSA9IFtcbiAgICBcInRpdGxlXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiLFxuICAgIFwiZGVmYXVsdFwiLFxuICAgIFwiZGVwcmVjYXRlZFwiLFxuICAgIFwicmVhZE9ubHlcIixcbiAgICBcIndyaXRlT25seVwiLFxuICAgIFwiZXhhbXBsZXNcIixcbl07XG5leHBvcnRzLmNvbnRlbnRWb2NhYnVsYXJ5ID0gW1xuICAgIFwiY29udGVudE1lZGlhVHlwZVwiLFxuICAgIFwiY29udGVudEVuY29kaW5nXCIsXG4gICAgXCJjb250ZW50U2NoZW1hXCIsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuL2NvcmVcIik7XG5jb25zdCB2YWxpZGF0aW9uXzEgPSByZXF1aXJlKFwiLi92YWxpZGF0aW9uXCIpO1xuY29uc3QgYXBwbGljYXRvcl8xID0gcmVxdWlyZShcIi4vYXBwbGljYXRvclwiKTtcbmNvbnN0IGZvcm1hdF8xID0gcmVxdWlyZShcIi4vZm9ybWF0XCIpO1xuY29uc3QgbWV0YWRhdGFfMSA9IHJlcXVpcmUoXCIuL21ldGFkYXRhXCIpO1xuY29uc3QgZHJhZnQ3Vm9jYWJ1bGFyaWVzID0gW1xuICAgIGNvcmVfMS5kZWZhdWx0LFxuICAgIHZhbGlkYXRpb25fMS5kZWZhdWx0LFxuICAgICgwLCBhcHBsaWNhdG9yXzEuZGVmYXVsdCkoKSxcbiAgICBmb3JtYXRfMS5kZWZhdWx0LFxuICAgIG1ldGFkYXRhXzEubWV0YWRhdGFWb2NhYnVsYXJ5LFxuICAgIG1ldGFkYXRhXzEuY29udGVudFZvY2FidWxhcnksXG5dO1xuZXhwb3J0cy5kZWZhdWx0ID0gZHJhZnQ3Vm9jYWJ1bGFyaWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhZnQ3LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpc2NyRXJyb3IgPSB2b2lkIDA7XG52YXIgRGlzY3JFcnJvcjtcbihmdW5jdGlvbiAoRGlzY3JFcnJvcikge1xuICAgIERpc2NyRXJyb3JbXCJUYWdcIl0gPSBcInRhZ1wiO1xuICAgIERpc2NyRXJyb3JbXCJNYXBwaW5nXCJdID0gXCJtYXBwaW5nXCI7XG59KShEaXNjckVycm9yIHx8IChleHBvcnRzLkRpc2NyRXJyb3IgPSBEaXNjckVycm9yID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9kaXNjcmltaW5hdG9yL3R5cGVzXCIpO1xuY29uc3QgY29tcGlsZV8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGVcIik7XG5jb25zdCByZWZfZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3JlZl9lcnJvclwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBwYXJhbXM6IHsgZGlzY3JFcnJvciwgdGFnTmFtZSB9IH0pID0+IGRpc2NyRXJyb3IgPT09IHR5cGVzXzEuRGlzY3JFcnJvci5UYWdcbiAgICAgICAgPyBgdGFnIFwiJHt0YWdOYW1lfVwiIG11c3QgYmUgc3RyaW5nYFxuICAgICAgICA6IGB2YWx1ZSBvZiB0YWcgXCIke3RhZ05hbWV9XCIgbXVzdCBiZSBpbiBvbmVPZmAsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXM6IHsgZGlzY3JFcnJvciwgdGFnLCB0YWdOYW1lIH0gfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2Vycm9yOiAke2Rpc2NyRXJyb3J9LCB0YWc6ICR7dGFnTmFtZX0sIHRhZ1ZhbHVlOiAke3RhZ319YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJkaXNjcmltaW5hdG9yXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBcIm9iamVjdFwiLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgY29uc3QgeyBvbmVPZiB9ID0gcGFyZW50U2NoZW1hO1xuICAgICAgICBpZiAoIWl0Lm9wdHMuZGlzY3JpbWluYXRvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGlzY3JpbWluYXRvcjogcmVxdWlyZXMgZGlzY3JpbWluYXRvciBvcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IHNjaGVtYS5wcm9wZXJ0eU5hbWU7XG4gICAgICAgIGlmICh0eXBlb2YgdGFnTmFtZSAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGlzY3JpbWluYXRvcjogcmVxdWlyZXMgcHJvcGVydHlOYW1lXCIpO1xuICAgICAgICBpZiAoc2NoZW1hLm1hcHBpbmcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkaXNjcmltaW5hdG9yOiBtYXBwaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICAgIGlmICghb25lT2YpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkaXNjcmltaW5hdG9yOiByZXF1aXJlcyBvbmVPZiBrZXl3b3JkXCIpO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5sZXQoXCJ2YWxpZFwiLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IHRhZyA9IGdlbi5jb25zdChcInRhZ1wiLCAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KSh0YWdOYW1lKX1gKTtcbiAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYHR5cGVvZiAke3RhZ30gPT0gXCJzdHJpbmdcImAsICgpID0+IHZhbGlkYXRlTWFwcGluZygpLCAoKSA9PiBjeHQuZXJyb3IoZmFsc2UsIHsgZGlzY3JFcnJvcjogdHlwZXNfMS5EaXNjckVycm9yLlRhZywgdGFnLCB0YWdOYW1lIH0pKTtcbiAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVNYXBwaW5nKCkge1xuICAgICAgICAgICAgY29uc3QgbWFwcGluZyA9IGdldE1hcHBpbmcoKTtcbiAgICAgICAgICAgIGdlbi5pZihmYWxzZSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhZ1ZhbHVlIGluIG1hcHBpbmcpIHtcbiAgICAgICAgICAgICAgICBnZW4uZWxzZUlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7dGFnfSA9PT0gJHt0YWdWYWx1ZX1gKTtcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCBhcHBseVRhZ1NjaGVtYShtYXBwaW5nW3RhZ1ZhbHVlXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2VuLmVsc2UoKTtcbiAgICAgICAgICAgIGN4dC5lcnJvcihmYWxzZSwgeyBkaXNjckVycm9yOiB0eXBlc18xLkRpc2NyRXJyb3IuTWFwcGluZywgdGFnLCB0YWdOYW1lIH0pO1xuICAgICAgICAgICAgZ2VuLmVuZElmKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlUYWdTY2hlbWEoc2NoZW1hUHJvcCkge1xuICAgICAgICAgICAgY29uc3QgX3ZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHNjaEN4dCA9IGN4dC5zdWJzY2hlbWEoeyBrZXl3b3JkOiBcIm9uZU9mXCIsIHNjaGVtYVByb3AgfSwgX3ZhbGlkKTtcbiAgICAgICAgICAgIGN4dC5tZXJnZUV2YWx1YXRlZChzY2hDeHQsIGNvZGVnZW5fMS5OYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBfdmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TWFwcGluZygpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IG9uZU9mTWFwcGluZyA9IHt9O1xuICAgICAgICAgICAgY29uc3QgdG9wUmVxdWlyZWQgPSBoYXNSZXF1aXJlZChwYXJlbnRTY2hlbWEpO1xuICAgICAgICAgICAgbGV0IHRhZ1JlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb25lT2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc2NoID0gb25lT2ZbaV07XG4gICAgICAgICAgICAgICAgaWYgKChzY2ggPT09IG51bGwgfHwgc2NoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2guJHJlZikgJiYgISgwLCB1dGlsXzEuc2NoZW1hSGFzUnVsZXNCdXRSZWYpKHNjaCwgaXQuc2VsZi5SVUxFUykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmID0gc2NoLiRyZWY7XG4gICAgICAgICAgICAgICAgICAgIHNjaCA9IGNvbXBpbGVfMS5yZXNvbHZlUmVmLmNhbGwoaXQuc2VsZiwgaXQuc2NoZW1hRW52LnJvb3QsIGl0LmJhc2VJZCwgcmVmKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjaCBpbnN0YW5jZW9mIGNvbXBpbGVfMS5TY2hlbWFFbnYpXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2ggPSBzY2guc2NoZW1hO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NoID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgcmVmX2Vycm9yXzEuZGVmYXVsdChpdC5vcHRzLnVyaVJlc29sdmVyLCBpdC5iYXNlSWQsIHJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BTY2ggPSAoX2EgPSBzY2ggPT09IG51bGwgfHwgc2NoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2gucHJvcGVydGllcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW3RhZ05hbWVdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcFNjaCAhPSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlzY3JpbWluYXRvcjogb25lT2Ygc3Vic2NoZW1hcyAob3IgcmVmZXJlbmNlZCBzY2hlbWFzKSBtdXN0IGhhdmUgXCJwcm9wZXJ0aWVzLyR7dGFnTmFtZX1cImApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YWdSZXF1aXJlZCA9IHRhZ1JlcXVpcmVkICYmICh0b3BSZXF1aXJlZCB8fCBoYXNSZXF1aXJlZChzY2gpKTtcbiAgICAgICAgICAgICAgICBhZGRNYXBwaW5ncyhwcm9wU2NoLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGFnUmVxdWlyZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkaXNjcmltaW5hdG9yOiBcIiR7dGFnTmFtZX1cIiBtdXN0IGJlIHJlcXVpcmVkYCk7XG4gICAgICAgICAgICByZXR1cm4gb25lT2ZNYXBwaW5nO1xuICAgICAgICAgICAgZnVuY3Rpb24gaGFzUmVxdWlyZWQoeyByZXF1aXJlZCB9KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmVxdWlyZWQpICYmIHJlcXVpcmVkLmluY2x1ZGVzKHRhZ05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkTWFwcGluZ3Moc2NoLCBpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjaC5jb25zdCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRNYXBwaW5nKHNjaC5jb25zdCwgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNjaC5lbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGFnVmFsdWUgb2Ygc2NoLmVudW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZE1hcHBpbmcodGFnVmFsdWUsIGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpc2NyaW1pbmF0b3I6IFwicHJvcGVydGllcy8ke3RhZ05hbWV9XCIgbXVzdCBoYXZlIFwiY29uc3RcIiBvciBcImVudW1cImApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZE1hcHBpbmcodGFnVmFsdWUsIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhZ1ZhbHVlICE9IFwic3RyaW5nXCIgfHwgdGFnVmFsdWUgaW4gb25lT2ZNYXBwaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlzY3JpbWluYXRvcjogXCIke3RhZ05hbWV9XCIgdmFsdWVzIG11c3QgYmUgdW5pcXVlIHN0cmluZ3NgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25lT2ZNYXBwaW5nW3RhZ1ZhbHVlXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1pc3NpbmdSZWZFcnJvciA9IGV4cG9ydHMuVmFsaWRhdGlvbkVycm9yID0gZXhwb3J0cy5Db2RlR2VuID0gZXhwb3J0cy5OYW1lID0gZXhwb3J0cy5uaWwgPSBleHBvcnRzLnN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyID0gZXhwb3J0cy5fID0gZXhwb3J0cy5LZXl3b3JkQ3h0ID0gZXhwb3J0cy5BanYgPSB2b2lkIDA7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi9jb3JlXCIpO1xuY29uc3QgZHJhZnQ3XzEgPSByZXF1aXJlKFwiLi92b2NhYnVsYXJpZXMvZHJhZnQ3XCIpO1xuY29uc3QgZGlzY3JpbWluYXRvcl8xID0gcmVxdWlyZShcIi4vdm9jYWJ1bGFyaWVzL2Rpc2NyaW1pbmF0b3JcIik7XG5jb25zdCBkcmFmdDdNZXRhU2NoZW1hID0gcmVxdWlyZShcIi4vcmVmcy9qc29uLXNjaGVtYS1kcmFmdC0wNy5qc29uXCIpO1xuY29uc3QgTUVUQV9TVVBQT1JUX0RBVEEgPSBbXCIvcHJvcGVydGllc1wiXTtcbmNvbnN0IE1FVEFfU0NIRU1BX0lEID0gXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYVwiO1xuY2xhc3MgQWp2IGV4dGVuZHMgY29yZV8xLmRlZmF1bHQge1xuICAgIF9hZGRWb2NhYnVsYXJpZXMoKSB7XG4gICAgICAgIHN1cGVyLl9hZGRWb2NhYnVsYXJpZXMoKTtcbiAgICAgICAgZHJhZnQ3XzEuZGVmYXVsdC5mb3JFYWNoKCh2KSA9PiB0aGlzLmFkZFZvY2FidWxhcnkodikpO1xuICAgICAgICBpZiAodGhpcy5vcHRzLmRpc2NyaW1pbmF0b3IpXG4gICAgICAgICAgICB0aGlzLmFkZEtleXdvcmQoZGlzY3JpbWluYXRvcl8xLmRlZmF1bHQpO1xuICAgIH1cbiAgICBfYWRkRGVmYXVsdE1ldGFTY2hlbWEoKSB7XG4gICAgICAgIHN1cGVyLl9hZGREZWZhdWx0TWV0YVNjaGVtYSgpO1xuICAgICAgICBpZiAoIXRoaXMub3B0cy5tZXRhKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBtZXRhU2NoZW1hID0gdGhpcy5vcHRzLiRkYXRhXG4gICAgICAgICAgICA/IHRoaXMuJGRhdGFNZXRhU2NoZW1hKGRyYWZ0N01ldGFTY2hlbWEsIE1FVEFfU1VQUE9SVF9EQVRBKVxuICAgICAgICAgICAgOiBkcmFmdDdNZXRhU2NoZW1hO1xuICAgICAgICB0aGlzLmFkZE1ldGFTY2hlbWEobWV0YVNjaGVtYSwgTUVUQV9TQ0hFTUFfSUQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5yZWZzW1wiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9zY2hlbWFcIl0gPSBNRVRBX1NDSEVNQV9JRDtcbiAgICB9XG4gICAgZGVmYXVsdE1ldGEoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5vcHRzLmRlZmF1bHRNZXRhID1cbiAgICAgICAgICAgIHN1cGVyLmRlZmF1bHRNZXRhKCkgfHwgKHRoaXMuZ2V0U2NoZW1hKE1FVEFfU0NIRU1BX0lEKSA/IE1FVEFfU0NIRU1BX0lEIDogdW5kZWZpbmVkKSk7XG4gICAgfVxufVxuZXhwb3J0cy5BanYgPSBBanY7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBBanY7XG5tb2R1bGUuZXhwb3J0cy5BanYgPSBBanY7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBBanY7XG52YXIgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvdmFsaWRhdGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJLZXl3b3JkQ3h0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWxpZGF0ZV8xLktleXdvcmRDeHQ7IH0gfSk7XG52YXIgY29kZWdlbl8xID0gcmVxdWlyZShcIi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLl87IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5zdHI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpbmdpZnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5zdHJpbmdpZnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJuaWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5uaWw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlZ2VuXzEuTmFtZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvZGVHZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5Db2RlR2VuOyB9IH0pO1xudmFyIHZhbGlkYXRpb25fZXJyb3JfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWUvdmFsaWRhdGlvbl9lcnJvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZhbGlkYXRpb25FcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsaWRhdGlvbl9lcnJvcl8xLmRlZmF1bHQ7IH0gfSk7XG52YXIgcmVmX2Vycm9yXzEgPSByZXF1aXJlKFwiLi9jb21waWxlL3JlZl9lcnJvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1pc3NpbmdSZWZFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVmX2Vycm9yXzEuZGVmYXVsdDsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFqdi5qcy5tYXAiLAogICAgImltcG9ydCB1cmksIHsgdHlwZSBVUklDb21wb25lbnRzIH0gZnJvbSBcInVyaS1qcy1yZXBsYWNlXCI7XG5pbXBvcnQgc210cEFkZHJlc3MgZnJvbSBcInNtdHAtYWRkcmVzcy1wYXJzZXJcIjtcbmltcG9ydCBzY2hlbWVzIGZyb20gXCJAc2lsdmVyYnVja2V0L2lhbmEtc2NoZW1lc1wiO1xuaW1wb3J0IHR5cGUgeyBMb2NhbFVSSUNvbXBvbmVudHMgfSBmcm9tIFwiLi9pcmktcmVmZXJlbmNlLnRzXCI7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKGFkZHJlc3M6IHN0cmluZyk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIHNtdHBBZGRyZXNzLnBhcnNlKGFkZHJlc3MpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5KG9iajogVVJJQ29tcG9uZW50cykge1xuICBmb3IgKGNvbnN0IHByb3AgaW4gb2JqKSB7XG4gICAgaWYgKCF2YWxpZGF0ZShvYmpbcHJvcCBhcyBrZXlvZiBVUklDb21wb25lbnRzXSBhcyBzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGlyaSA9IHVyaS5wYXJzZSh2YWx1ZSkgYXMgTG9jYWxVUklDb21wb25lbnRzO1xuICBpZiAoaXJpLnNjaGVtZSA9PT0gXCJtYWlsdG9cIiAmJiBldmVyeShpcmkpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuICEhKFxuICAgIChpcmkucmVmZXJlbmNlID09PSBcImFic29sdXRlXCIgfHwgaXJpLnJlZmVyZW5jZSA9PT0gXCJ1cmlcIikgJiZcbiAgICBzY2hlbWVzLmFsbEJ5TmFtZVtpcmkuc2NoZW1lXVxuICApO1xufTtcbiIsCiAgICAiZXhwb3J0IGRlZmF1bHQgW1xuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJhYWFcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRpYW1ldGVyIFByb3RvY29sXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzY3MzNcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiYWFhc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGlhbWV0ZXIgUHJvdG9jb2wgd2l0aCBTZWN1cmUgVHJhbnNwb3J0XCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzY3MzNcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiYWJvdXRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImFib3V0XCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzY2OTRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiYWNhcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYXBwbGljYXRpb24gY29uZmlndXJhdGlvbiBhY2Nlc3MgcHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjI0NFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJhY2N0XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhY2N0XCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzc1NjVcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiY2FwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDYWxlbmRhciBBY2Nlc3MgUHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNDMyNFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJjaWRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImNvbnRlbnQgaWRlbnRpZmllclwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMyMzkyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImNvYXBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImNvYXBcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNzI1MlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJjb2Fwc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY29hcHNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNzI1MlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJjcmlkXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUVi1Bbnl0aW1lIENvbnRlbnQgUmVmZXJlbmNlIElkZW50aWZpZXJcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNDA3OFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJkYXRhXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkYXRhXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzIzOTdcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZGF2XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkYXZcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNDkxOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJkaWN0XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkaWN0aW9uYXJ5IHNlcnZpY2UgcHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjIyOVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJkbnNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRvbWFpbiBOYW1lIFN5c3RlbVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM0NTAxXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImV4YW1wbGVcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImV4YW1wbGVcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNzU5NVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJmaWxlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIb3N0LXNwZWNpZmljIGZpbGUgbmFtZXNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMTczOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJmdHBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZpbGUgVHJhbnNmZXIgUHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMTczOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJnZW9cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdlb2dyYXBoaWMgTG9jYXRpb25zXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzU4NzBcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZ29cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImdvXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzMzNjhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZ29waGVyXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgR29waGVyIFByb3RvY29sXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzQyNjZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiaDMyM1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSC4zMjNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMzUwOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJodHRwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIeXBlcnRleHQgVHJhbnNmZXIgUHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNzIzMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJodHRwc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSHlwZXJ0ZXh0IFRyYW5zZmVyIFByb3RvY29sIFNlY3VyZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM3MjMwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImlheFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW50ZXItQXN0ZXJpc2sgZVhjaGFuZ2UgVmVyc2lvbiAyXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzU0NTZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiaWNhcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW50ZXJuZXQgQ29udGVudCBBZGFwdGF0aW9uIFByb3RvY29sXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzM1MDdcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiaW1cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkluc3RhbnQgTWVzc2FnaW5nXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzM4NjBcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiaW1hcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaW50ZXJuZXQgbWVzc2FnZSBhY2Nlc3MgcHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNTA5MlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJpbmZvXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbmZvcm1hdGlvbiBBc3NldHMgd2l0aCBJZGVudGlmaWVycyBpbiBQdWJsaWMgTmFtZXNwYWNlcy4gXFxuICAgICAgIChzZWN0aW9uIDMpIGRlZmluZXMgYW4gXFxcImluZm9cXFwiIHJlZ2lzdHJ5IFxcbiAgICAgICAgb2YgcHVibGljIG5hbWVzcGFjZXMsIHdoaWNoIGlzIG1haW50YWluZWQgYnkgTklTTyBhbmQgY2FuIGJlIGFjY2Vzc2VkIFxcbiAgICAgICAgZnJvbSAuXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzQ0NTJcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiaXBwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbnRlcm5ldCBQcmludGluZyBQcm90b2NvbFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMzNTEwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImlwcHNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkludGVybmV0IFByaW50aW5nIFByb3RvY29sIG92ZXIgSFRUUFNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNzQ3MlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJpcmlzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbnRlcm5ldCBSZWdpc3RyeSBJbmZvcm1hdGlvbiBTZXJ2aWNlXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzM5ODFcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiaXJpcy5iZWVwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJpcmlzLmJlZXBcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMzk4M1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJpcmlzLmx3elwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaXJpcy5sd3pcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNDk5M1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJpcmlzLnhwY1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaXJpcy54cGNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNDk5MlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJpcmlzLnhwY3NcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImlyaXMueHBjc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM0OTkyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImphYmJlclwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiamFiYmVyXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wZXJtL2phYmJlclwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibGRhcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTGlnaHR3ZWlnaHQgRGlyZWN0b3J5IEFjY2VzcyBQcm90b2NvbFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM0NTE2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1haWx0b1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRWxlY3Ryb25pYyBtYWlsIGFkZHJlc3NcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNjA2OFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtaWRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1lc3NhZ2UgaWRlbnRpZmllclwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMyMzkyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zcnBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk1lc3NhZ2UgU2Vzc2lvbiBSZWxheSBQcm90b2NvbFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM0OTc1XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zcnBzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJNZXNzYWdlIFNlc3Npb24gUmVsYXkgUHJvdG9jb2wgU2VjdXJlXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzQ5NzVcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXRxcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTWVzc2FnZSBUcmFja2luZyBRdWVyeSBQcm90b2NvbFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMzODg3XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm11cGRhdGVcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk1haWxib3ggVXBkYXRlIChNVVBEQVRFKSBQcm90b2NvbFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMzNjU2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm5ld3NcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVTRU5FVCBuZXdzXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzU1MzhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibmZzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJuZXR3b3JrIGZpbGUgc3lzdGVtIHByb3RvY29sXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzIyMjRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibmlcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm5pXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzY5MjBcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibmloXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJuaWhcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNjkyMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJubnRwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVU0VORVQgbmV3cyB1c2luZyBOTlRQIGFjY2Vzc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM1NTM4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm9wYXF1ZWxvY2t0b2tlblwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwib3BhcXVlbG9ja3Rva2VudFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM0OTE4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInBrY3MxMVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUEtDUyMxMVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM3NTEyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInBvcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9zdCBPZmZpY2UgUHJvdG9jb2wgdjNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjM4NFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJwcmVzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQcmVzZW5jZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMzODU5XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInJlbG9hZFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicmVsb2FkXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzY5NDBcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwicnRzcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmVhbC10aW1lIFN0cmVhbWluZyBQcm90b2NvbCAoUlRTUClcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjMyNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRyYWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9SRkMtaWV0Zi1tbXVzaWMtcmZjMjMyNmJpcy00MFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJydHNwc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmVhbC10aW1lIFN0cmVhbWluZyBQcm90b2NvbCAoUlRTUCkgb3ZlciBUTFNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjMyNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRyYWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9SRkMtaWV0Zi1tbXVzaWMtcmZjMjMyNmJpcy00MFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJydHNwdVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmVhbC10aW1lIFN0cmVhbWluZyBQcm90b2NvbCAoUlRTUCkgb3ZlciB1bnJlbGlhYmxlIGRhdGFncmFtIHRyYW5zcG9ydFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMyMzI2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInNlcnZpY2VcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNlcnZpY2UgbG9jYXRpb25cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjYwOVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzZXNzaW9uXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzZXNzaW9uXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzY3ODdcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwic2h0dHBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNlY3VyZSBIeXBlcnRleHQgVHJhbnNmZXIgUHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjY2MFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzaWV2ZVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTWFuYWdlU2lldmUgUHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNTgwNFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzaXBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNlc3Npb24gaW5pdGlhdGlvbiBwcm90b2NvbFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMzMjYxXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInNpcHNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNlY3VyZSBzZXNzaW9uIGluaXRpYXRpb24gcHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMzI2MVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzbXNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNob3J0IE1lc3NhZ2UgU2VydmljZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM1NzI0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInNubXBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNpbXBsZSBOZXR3b3JrIE1hbmFnZW1lbnQgUHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNDA4OFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzb2FwLmJlZXBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNvYXAuYmVlcFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM0MjI3XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInNvYXAuYmVlcHNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNvYXAuYmVlcHNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNDIyN1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzdHVuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzdHVuXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzcwNjRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwic3R1bnNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInN0dW5zXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzcwNjRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwidGFnXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0YWdcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNDE1MVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ0ZWxcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRlbGVwaG9uZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMzOTY2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInRlbG5ldFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmVmZXJlbmNlIHRvIGludGVyYWN0aXZlIHNlc3Npb25zXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzQyNDhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwidGZ0cFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVHJpdmlhbCBGaWxlIFRyYW5zZmVyIFByb3RvY29sXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzM2MTdcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwidGhpc21lc3NhZ2VcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm11bHRpcGFydC9yZWxhdGVkIHJlbGF0aXZlIHJlZmVyZW5jZSByZXNvbHV0aW9uXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzI1NTdcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wZXJtL3RoaXNtZXNzYWdlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ0aXBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRyYW5zYWN0aW9uIEludGVybmV0IFByb3RvY29sXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzIzNzFcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwidG4zMjcwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbnRlcmFjdGl2ZSAzMjcwIGVtdWxhdGlvbiBzZXNzaW9uc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM2MjcwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInR1cm5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInR1cm5cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNzA2NVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ0dXJuc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidHVybnNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNzA2NVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ0dlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVFYgQnJvYWRjYXN0c1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMyODM4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInVyblwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVW5pZm9ybSBSZXNvdXJjZSBOYW1lc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMyMTQxXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmVnaXN0cnlcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3Vybi1uYW1lc3BhY2VzXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInZlbW1pXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ2ZXJzYXRpbGUgbXVsdGltZWRpYSBpbnRlcmZhY2VcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjEyMlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ2bmNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJlbW90ZSBGcmFtZWJ1ZmZlciBQcm90b2NvbFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZHJhZnRcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL1JGQy13YXJkZW4tYXBwc2F3Zy12bmMtc2NoZW1lLTEwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIndzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXZWJTb2NrZXQgY29ubmVjdGlvbnNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNjQ1NVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ3c3NcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVuY3J5cHRlZCBXZWJTb2NrZXQgY29ubmVjdGlvbnNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNjQ1NVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ4Y29uXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ4Y29uXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzY1MDFcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwieGNvbi11c2VyaWRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInhjb24tdXNlcmlkXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzY1MDFcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwieG1scnBjLmJlZXBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInhtbHJwYy5iZWVwXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzM1MjlcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwieG1scnBjLmJlZXBzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ4bWxycGMuYmVlcHNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMzUyOVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ4bXBwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFeHRlbnNpYmxlIE1lc3NhZ2luZyBhbmQgUHJlc2VuY2UgUHJvdG9jb2xcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNTEyMlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ6MzkuNTByXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJaMzkuNTAgUmV0cmlldmFsXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzIwNTZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiejM5LjUwc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiWjM5LjUwIFNlc3Npb25cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjA1NlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9XG5dO1xuIiwKICAgICJleHBvcnQgZGVmYXVsdCBbXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImFjclwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYWNyXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2FjclwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiYWRpdW14dHJhXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhZGl1bXh0cmFcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvYWRpdW14dHJhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJhZnBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImFmcFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9hZnBcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImFmc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQW5kcmV3IEZpbGUgU3lzdGVtIGdsb2JhbCBmaWxlIG5hbWVzXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzE3MzhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiYWltXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhaW1cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvYWltXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJhcHBkYXRhXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhcHBkYXRhXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2FwcGRhdGFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImFwdFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYXB0XCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2FwdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiYXR0YWNobWVudFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYXR0YWNobWVudFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9hdHRhY2htZW50XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJhd1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYXdcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvYXdcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImJhcmlvblwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYmFyaW9uXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2JhcmlvblwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiYmVzaGFyZVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYmVzaGFyZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9iZXNoYXJlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJiaXRjb2luXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJiaXRjb2luXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2JpdGNvaW5cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImJsb2JcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImJsb2JcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvYmxvYlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiYm9sb1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYm9sb1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9ib2xvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJjYWxsdG9cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImNhbGx0b1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9jYWxsdG9cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImNocm9tZVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY2hyb21lXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2Nocm9tZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiY2hyb21lLWV4dGVuc2lvblwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY2hyb21lLWV4dGVuc2lvblwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9jaHJvbWUtZXh0ZW5zaW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJjb20tZXZlbnRicml0ZS1hdHRlbmRlZVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiY29tLWV2ZW50YnJpdGUtYXR0ZW5kZWVcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvY29tLWV2ZW50YnJpdGUtYXR0ZW5kZWVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImNvbnRlbnRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImNvbnRlbnRcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvY29udGVudFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiY3ZzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJjdnNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvY3ZzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJkaXNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImRpc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9kaXNcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImRsbmEtcGxheWNvbnRhaW5lclwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZGxuYS1wbGF5Y29udGFpbmVyXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2RsbmEtcGxheWNvbnRhaW5lclwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZGxuYS1wbGF5c2luZ2xlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkbG5hLXBsYXlzaW5nbGVcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvZGxuYS1wbGF5c2luZ2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJkbnRwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkbnRwXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2RudHBcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImR0blwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRFROUkcgcmVzZWFyY2ggYW5kIGRldmVsb3BtZW50XCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzUwNTBcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZHZiXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJkdmJcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRyYWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9kcmFmdC1tY3JvYmVydHMtdXJpLWR2YlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJlZDJrXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJlZDJrXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2VkMmtcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImZhY2V0aW1lXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJmYWNldGltZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9mYWNldGltZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZmVlZFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZmVlZFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9mZWVkXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJmZWVkcmVhZHlcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImZlZWRyZWFkeVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9mZWVkcmVhZHlcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImZpbmdlclwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZmluZ2VyXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2ZpbmdlclwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZmlzaFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZmlzaFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9maXNoXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJnZ1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZ2dcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvZ2dcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImdpdFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZ2l0XCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2dpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZ2l6bW9wcm9qZWN0XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJnaXptb3Byb2plY3RcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvZ2l6bW9wcm9qZWN0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJndGFsa1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiZ3RhbGtcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvZ3RhbGtcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImhhbVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaGFtXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyZmNcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL3JmYzcwNDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiaGNwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJoY3BcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvaGNwXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJpY29uXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJpY29uXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkcmFmdFwiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vZHJhZnQtbGFmYXlldHRlLWljb24tdXJpLXNjaGVtZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJpb3RkaXNjb1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaW90ZGlzY29cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVyaVwiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9pb3RkaXNjby5wZGZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2lvdGRpc2NvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJpcG5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImlwblwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM2MjYwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImlyY1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaXJjXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2lyY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiaXJjNlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaXJjNlwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9pcmM2XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJpcmNzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJpcmNzXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2lyY3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImlzb3N0b3JlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJpc29zdG9yZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9pc29zdG9yZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiaXRtc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaXRtc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9pdG1zXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJqYXJcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImphclwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9qYXJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImptc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSmF2YSBNZXNzYWdlIFNlcnZpY2VcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNjE2N1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJrZXlwYXJjXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJrZXlwYXJjXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2tleXBhcmNcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcImxhc3RmbVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibGFzdGZtXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2xhc3RmbVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibGRhcHNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImxkYXBzXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L2xkYXBzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtYWduZXRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1hZ25ldFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tYWduZXRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1hcHNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1hcHNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbWFwc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibWFya2V0XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtYXJrZXRcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbWFya2V0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtZXNzYWdlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtZXNzYWdlXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21lc3NhZ2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1tc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibW1zXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21tc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtYWNjZXNzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1hY2Nlc3NcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtYWNjZXNzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1kcml2ZS10b1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibXMtZHJpdmUtdG9cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtZHJpdmUtdG9cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLWVucm9sbG1lbnRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLWVucm9sbG1lbnRcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtZW5yb2xsbWVudFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtZXhjZWxcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLWV4Y2VsXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLWV4Y2VsXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1nZXRvZmZpY2VcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLWdldG9mZmljZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1nZXRvZmZpY2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLWhlbHBcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLWhlbHBcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtaGVscFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtaW5mb3BhdGhcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLWluZm9wYXRoXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLWluZm9wYXRoXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1tZWRpYS1zdHJlYW0taWRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLW1lZGlhLXN0cmVhbS1pZFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1tZWRpYS1zdHJlYW0taWRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXBvd2VycG9pbnRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXBvd2VycG9pbnRcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtcG93ZXJwb2ludFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtcHJvamVjdFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibXMtcHJvamVjdFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1wcm9qZWN0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1wdWJsaXNoZXJcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXB1Ymxpc2hlclwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1wdWJsaXNoZXJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXNlYXJjaC1yZXBhaXJcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXNlYXJjaC1yZXBhaXJcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtc2VhcmNoLXJlcGFpclwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtc2Vjb25kYXJ5LXNjcmVlbi1jb250cm9sbGVyXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1zZWNvbmRhcnktc2NyZWVuLWNvbnRyb2xsZXJcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtc2Vjb25kYXJ5LXNjcmVlbi1jb250cm9sbGVyXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1zZWNvbmRhcnktc2NyZWVuLXNldHVwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1zZWNvbmRhcnktc2NyZWVuLXNldHVwXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXNlY29uZGFyeS1zY3JlZW4tc2V0dXBcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXNldHRpbmdzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1zZXR0aW5nc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1zZXR0aW5nc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtc2V0dGluZ3MtYWlycGxhbmVtb2RlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1zZXR0aW5ncy1haXJwbGFuZW1vZGVcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtc2V0dGluZ3MtYWlycGxhbmVtb2RlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1zZXR0aW5ncy1ibHVldG9vdGhcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXNldHRpbmdzLWJsdWV0b290aFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1zZXR0aW5ncy1ibHVldG9vdGhcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXNldHRpbmdzLWNhbWVyYVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibXMtc2V0dGluZ3MtY2FtZXJhXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXNldHRpbmdzLWNhbWVyYVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtc2V0dGluZ3MtY2VsbHVsYXJcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXNldHRpbmdzLWNlbGx1bGFyXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXNldHRpbmdzLWNlbGx1bGFyXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1zZXR0aW5ncy1jbG91ZHN0b3JhZ2VcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXNldHRpbmdzLWNsb3Vkc3RvcmFnZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1zZXR0aW5ncy1jbG91ZHN0b3JhZ2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXNldHRpbmdzLWNvbm5lY3RhYmxlZGV2aWNlc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibXMtc2V0dGluZ3MtY29ubmVjdGFibGVkZXZpY2VzXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXNldHRpbmdzLWNvbm5lY3RhYmxlZGV2aWNlc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtc2V0dGluZ3MtZGlzcGxheXMtdG9wb2xvZ3lcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXNldHRpbmdzLWRpc3BsYXlzLXRvcG9sb2d5XCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXNldHRpbmdzLWRpc3BsYXlzLXRvcG9sb2d5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1zZXR0aW5ncy1lbWFpbGFuZGFjY291bnRzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1zZXR0aW5ncy1lbWFpbGFuZGFjY291bnRzXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXNldHRpbmdzLWVtYWlsYW5kYWNjb3VudHNcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXNldHRpbmdzLWxhbmd1YWdlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1zZXR0aW5ncy1sYW5ndWFnZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1zZXR0aW5ncy1sYW5ndWFnZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtc2V0dGluZ3MtbG9jYXRpb25cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXNldHRpbmdzLWxvY2F0aW9uXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXNldHRpbmdzLWxvY2F0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1zZXR0aW5ncy1sb2NrXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1zZXR0aW5ncy1sb2NrXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXNldHRpbmdzLWxvY2tcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXNldHRpbmdzLW5mY3RyYW5zYWN0aW9uc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibXMtc2V0dGluZ3MtbmZjdHJhbnNhY3Rpb25zXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXNldHRpbmdzLW5mY3RyYW5zYWN0aW9uc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtc2V0dGluZ3Mtbm90aWZpY2F0aW9uc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibXMtc2V0dGluZ3Mtbm90aWZpY2F0aW9uc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1zZXR0aW5ncy1ub3RpZmljYXRpb25zXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1zZXR0aW5ncy1wb3dlclwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibXMtc2V0dGluZ3MtcG93ZXJcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtc2V0dGluZ3MtcG93ZXJcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXNldHRpbmdzLXByaXZhY3lcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXNldHRpbmdzLXByaXZhY3lcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtc2V0dGluZ3MtcHJpdmFjeVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtc2V0dGluZ3MtcHJveGltaXR5XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1zZXR0aW5ncy1wcm94aW1pdHlcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtc2V0dGluZ3MtcHJveGltaXR5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1zZXR0aW5ncy1zY3JlZW5yb3RhdGlvblwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibXMtc2V0dGluZ3Mtc2NyZWVucm90YXRpb25cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtc2V0dGluZ3Mtc2NyZWVucm90YXRpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXNldHRpbmdzLXdpZmlcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXNldHRpbmdzLXdpZmlcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtc2V0dGluZ3Mtd2lmaVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtc2V0dGluZ3Mtd29ya3BsYWNlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy1zZXR0aW5ncy13b3JrcGxhY2VcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtc2V0dGluZ3Mtd29ya3BsYWNlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy1zcGRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXNwZFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tcy1zcGRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXRyYW5zaXQtdG9cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXRyYW5zaXQtdG9cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtdHJhbnNpdC10b1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXMtdmlzaW9cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXZpc2lvXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXZpc2lvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcy13YWxrLXRvXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJtcy13YWxrLXRvXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zLXdhbGstdG9cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm1zLXdvcmRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zLXdvcmRcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvbXMtd29yZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibXNuaW1cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm1zbmltXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L21zbmltXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtdW1ibGVcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm11bWJsZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9tdW1ibGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIm12blwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibXZuXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L212blwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibm90ZXNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm5vdGVzXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L25vdGVzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJvaWRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIm9pZFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZHJhZnRcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL2RyYWZ0LWxhcm1vdXRoLW9pZC1pcmlcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L29pZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwicGFsbVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicGFsbVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9wYWxtXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJwYXBhcmF6emlcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInBhcGFyYXp6aVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9wYXBhcmF6emlcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInBsYXRmb3JtXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwbGF0Zm9ybVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9wbGF0Zm9ybVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwicHJveHlcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInByb3h5XCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3Byb3h5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJwc3ljXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwc3ljXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3BzeWNcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInF1ZXJ5XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJxdWVyeVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9xdWVyeVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwicmVkaXNcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInJlZGlzXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3JlZGlzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJyZWRpc3NcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInJlZGlzc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9yZWRpc3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInJlc1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicmVzXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3Jlc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwicmVzb3VyY2VcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInJlc291cmNlXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3Jlc291cmNlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJybWlcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInJtaVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9ybWlcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInJzeW5jXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJyc3luY1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM1NzgxXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInJ0bWZwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJydG1mcFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM3NDI1XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9ydG1mcFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwicnRtcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwicnRtcFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9ydG1wXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzZWNvbmRsaWZlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJxdWVyeVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9zZWNvbmRsaWZlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzZnRwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJxdWVyeVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9zZnRwXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzZ25cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInNnblwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9zZ25cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInNreXBlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJza3lwZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi9za3lwZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwic21iXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzbWJcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3Yvc21iXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzbXRwXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzbXRwXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkcmFmdFwiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vZHJhZnQtbWVsbmlrb3Ytc21pbWUtbXNhLXRvLW1kYVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3Yvc210cFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwic29sZGF0XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzb2xkYXRcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3Yvc29sZGF0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzcG90aWZ5XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzcG90aWZ5XCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3Nwb3RpZnlcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInNzaFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwic3NoXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3NzaFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwic3RlYW1cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInN0ZWFtXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3N0ZWFtXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzdWJtaXRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInN1Ym1pdFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZHJhZnRcIixcbiAgICAgICAgICAgICAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2dvL2RyYWZ0LW1lbG5pa292LXNtaW1lLW1zYS10by1tZGFcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3N1Ym1pdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwic3ZuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJzdm5cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3Yvc3ZuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ0ZWFtc3BlYWtcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInRlYW1zcGVha1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi90ZWFtc3BlYWtcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInRlbGlhZWlkXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0ZWxpYWVpZFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi90ZWxpYWVpZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwidGhpbmdzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0aGluZ3NcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvdGhpbmdzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ0b29sXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ0b29sXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3Rvb2xcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInVkcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidWRwXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3VkcFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwidW5yZWFsXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ1bnJlYWxcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YvdW5yZWFsXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ1dDIwMDRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInV0MjAwNFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi91dDIwMDRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInYtZXZlbnRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInYtZXZlbnRcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRyYWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9kcmFmdC1tZW5kZXJpY28tdi1ldmVudC11cmlcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3YtZXZlbnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInZlbnRyaWxvXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ2ZW50cmlsb1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi92ZW50cmlsb1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwidmlldy1zb3VyY2VcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInZpZXctc291cmNlXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3ZpZXctc291cmNlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ3ZWJjYWxcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIndlYmNhbFwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi93ZWJjYWxcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIndwaWRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIndwaWRcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3Yvd3BpZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwid3RhaVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwid3RhaVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi93dGFpXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ3eWNpd3lnXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ3eWNpd3lnXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9wcm92L3d5Y2l3eWdcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInhmaXJlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ4ZmlyZVwiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXSxcbiAgICAgICAgXCJ0ZW1wbGF0ZVwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvdXJpLXNjaGVtZXMvcHJvdi94ZmlyZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwieHJpXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJ4cmlcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YveHJpXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ5bXNnclwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwieW1zZ3JcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW10sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL3Byb3YveW1zZ3JcIlxuICAgIH1cbl07XG4iLAogICAgImV4cG9ydCBkZWZhdWx0IFtcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZmF4XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJmYXhcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjgwNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMzk2NlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJmaWxlc3lzdGVtXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJmaWxlc3lzdGVtXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9oaXN0b3JpYy9maWxlc3lzdGVtXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtYWlsc2VydmVyXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBY2Nlc3MgdG8gZGF0YSBhdmFpbGFibGUgZnJvbSBtYWlsIHNlcnZlcnNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNjE5NlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtb2RlbVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwibW9kZW1cIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjgwNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMzk2NlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJwYWNrXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwYWNrXCIsXG4gICAgICAgIFwicmVmZXJlbmNlXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJkcmFmdFwiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vZHJhZnQtc2h1ci1wYWNrLXVyaS1zY2hlbWVcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInRlbXBsYXRlXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy91cmktc2NoZW1lcy9oaXN0b3JpYy9wYWNrXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJwcm9zcGVyb1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUHJvc3Blcm8gRGlyZWN0b3J5IFNlcnZpY2VcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNDE1N1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJzbmV3c1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTk5UUCBvdmVyIFNTTC9UTFNcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjNTUzOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ2aWRlb3RleFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwidmlkZW90ZXhcIixcbiAgICAgICAgXCJyZWZlcmVuY2VcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImRyYWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9kcmFmdC1tYXZyYWtpcy12aWRlb3RleC11cmwtc3BlY1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMjEyMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJmY1wiLFxuICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cuaWFuYS5vcmcvZ28vcmZjMzk4NlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwidGVtcGxhdGVcIjogXCJodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzL2hpc3RvcmljL3ZpZGVvdGV4XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJ3YWlzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaWRlIEFyZWEgSW5mb3JtYXRpb24gU2VydmVyc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmM0MTU2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInozOS41MFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiWjM5LjUwIGluZm9ybWF0aW9uIGFjY2Vzc1wiLFxuICAgICAgICBcInJlZmVyZW5jZVwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMxNzM4XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmZjXCIsXG4gICAgICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cDovL3d3dy5pYW5hLm9yZy9nby9yZmMyMDU2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH1cbl07XG4iLAogICAgImV4cG9ydCBkZWZhdWx0IFtcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiYW5kcm9pZC1hcHBcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcIndlYnBhY2tcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaGVtZVwiOiBcInMzXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBbWF6b24gV2ViIFNlcnZpY2VzIFMzIGJ1Y2tldFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwiZ3NcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdvb2dsZSBDbG91ZCBTdG9yYWdlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hlbWVcIjogXCJtcXR0XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJNZXNzYWdlIFF1ZXVpbmcgVGVsZW1ldHJ5IFRyYW5zcG9ydCBQcm90b2NvbFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2NoZW1lXCI6IFwibW9kYnVzK3RjcFwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTW9kYnVzIG92ZXIgVENQXCJcbiAgICB9XG5dO1xuIiwKICAgICJpbXBvcnQgcGVybWFuZW50RGF0YSBmcm9tIFwiLi9saWIvaWFuYS1wZXJtYW5lbnQuanNcIjtcbmltcG9ydCBwcm92aXNpb25hbERhdGEgZnJvbSBcIi4vbGliL2lhbmEtcHJvdmlzaW9uYWwuanNcIjtcbmltcG9ydCBoaXN0b3JpY2FsRGF0YSBmcm9tIFwiLi9saWIvaWFuYS1oaXN0b3JpY2FsLmpzXCI7XG5pbXBvcnQgdW5vZmZpY2lhbCBmcm9tIFwiLi9saWIvdW5vZmZpY2lhbC5qc1wiO1xuY29uc3QgZGF0YSA9IHtcbiAgICBwZXJtYW5lbnQ6IHBlcm1hbmVudERhdGEsXG4gICAgcHJvdmlzaW9uYWw6IHByb3Zpc2lvbmFsRGF0YSxcbiAgICBoaXN0b3JpY2FsOiBoaXN0b3JpY2FsRGF0YSxcbiAgICB1bm9mZmljaWFsOiBbXSxcbn07XG5jb25zdCBhbGxCeU5hbWUgPSB7fTtcbk9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBkYXRhW3R5cGVdLmZvckVhY2goZnVuY3Rpb24gKHNjaGVtZU9iaikge1xuICAgICAgICBzY2hlbWVPYmoudHlwZSA9IHR5cGU7XG4gICAgICAgIGFsbEJ5TmFtZVtzY2hlbWVPYmouc2NoZW1lXSA9IHNjaGVtZU9iajtcbiAgICB9KTtcbn0pO1xuZGF0YS51bm9mZmljaWFsID0gdW5vZmZpY2lhbC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gIWFsbEJ5TmFtZVtpdGVtLnNjaGVtZV07XG59KTtcbmRhdGEudW5vZmZpY2lhbC5mb3JFYWNoKGZ1bmN0aW9uIChzY2hlbWVPYmopIHtcbiAgICBzY2hlbWVPYmoudHlwZSA9IFwidW5vZmZpY2lhbFwiO1xuICAgIGFsbEJ5TmFtZVtzY2hlbWVPYmouc2NoZW1lXSA9IHNjaGVtZU9iajtcbn0pO1xuZGF0YS5hbGxCeU5hbWUgPSBhbGxCeU5hbWU7XG5leHBvcnQgZGVmYXVsdCBkYXRhO1xuIiwKICAgICJpbXBvcnQgeyBwYXJzZSB9IGZyb20gXCJzbXRwLWFkZHJlc3MtcGFyc2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgcGFyc2UodmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuIiwKICAgICJpbXBvcnQgcHVueWNvZGUgZnJvbSBcIm5vZGU6cHVueWNvZGVcIjtcblxuY29uc3QgaG9zdG5hbWVSZWdleCA9XG4gIC9eKD89LnsxLDI1M31cXC4/JClbYS16MC05XSg/OlthLXowLTktXXswLDYxfVthLXowLTldKT8oPzpcXC5bYS16MC05XSg/OlstMC05YS16XXswLDYxfVswLTlhLXpdKT8pKlxcLj8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh2YWx1ZSk7XG4gIHJldHVybiAoXG4gICAgaG9zdG5hbWUucmVwbGFjZSgvXFwuJC8sIFwiXCIpLmxlbmd0aCA8PSAyNTMgJiYgaG9zdG5hbWVSZWdleC50ZXN0KGhvc3RuYW1lKVxuICApO1xufTtcbiIsCiAgICAiaW1wb3J0IHsgcGFyc2UsIHR5cGUgVVJJQ29tcG9uZW50cyB9IGZyb20gXCJ1cmktanMtcmVwbGFjZVwiO1xuaW1wb3J0IHsgcGFyc2UgYXMgYWRkcmVzc1BhcnNlciB9IGZyb20gXCJzbXRwLWFkZHJlc3MtcGFyc2VyXCI7XG5pbXBvcnQgc2NoZW1lcyBmcm9tIFwiQHNpbHZlcmJ1Y2tldC9pYW5hLXNjaGVtZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBMb2NhbFVSSUNvbXBvbmVudHMgZXh0ZW5kcyBVUklDb21wb25lbnRzIHtcbiAgc2NoZW1lOiBzdHJpbmc7XG4gIHJlZmVyZW5jZTogc3RyaW5nO1xuICBwYXRoOiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKGFkZHJlc3M6IHN0cmluZyk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIGFkZHJlc3NQYXJzZXIoYWRkcmVzcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlcnkob2JqOiBVUklDb21wb25lbnRzKSB7XG4gIGZvciAoY29uc3QgcHJvcCBpbiBvYmopIHtcbiAgICBpZiAoIXZhbGlkYXRlKG9ialtwcm9wIGFzIGtleW9mIFVSSUNvbXBvbmVudHNdIGFzIHN0cmluZykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgaXJpID0gcGFyc2UodmFsdWUpIGFzIExvY2FsVVJJQ29tcG9uZW50cztcbiAgLy8gQWxsIHZhbGlkIElSSXMgYXJlIHZhbGlkIElSSS1yZWZlcmVuY2VzXG4gIGlmIChpcmkuc2NoZW1lID09PSBcIm1haWx0b1wiICYmIGV2ZXJ5KGlyaSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIENoZWNrIGZvciB2YWxpZCBJUkktcmVmZXJlbmNlXG4gIGlmIChcbiAgICBpcmkucmVmZXJlbmNlID09PSBcImFic29sdXRlXCIgJiZcbiAgICBpcmkucGF0aCAhPT0gdW5kZWZpbmVkICYmXG4gICAgc2NoZW1lcy5hbGxCeU5hbWVbaXJpLnNjaGVtZV1cbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBDaGVjayBmb3IgdmFsaWQgSVJJLXJlZmVyZW5jZVxuXG4gIC8vIElmIHRoZXJlIGlzIGEgc2NoZW1lLCBpdCBtdXN0IGJlIHZhbGlkXG4gIGlmIChpcmkuc2NoZW1lICYmICFzY2hlbWVzLmFsbEJ5TmFtZVtpcmkuc2NoZW1lXSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIENoZWNrIHRoZXJlJ3MgYSBwYXRoIGFuZCBmb3IgYSBwcm9wZXIgdHlwZSBvZiByZWZlcmVuY2VcbiAgcmV0dXJuIChcbiAgICBpcmkucGF0aCAhPT0gdW5kZWZpbmVkICYmXG4gICAgKGlyaS5yZWZlcmVuY2UgPT09IFwicmVsYXRpdmVcIiB8fFxuICAgICAgaXJpLnJlZmVyZW5jZSA9PT0gXCJzYW1lLWRvY3VtZW50XCIgfHxcbiAgICAgIGlyaS5yZWZlcmVuY2UgPT09IFwidXJpXCIpXG4gICk7XG59O1xuIiwKICAgICJpbXBvcnQgaXJpIGZyb20gXCIuL2Zvcm1hdHMvaXJpLnRzXCI7XG5pbXBvcnQgaWRuRW1haWwgZnJvbSBcIi4vZm9ybWF0cy9pZG4tZW1haWwudHNcIjtcbmltcG9ydCBpZG5Ib3N0bmFtZSBmcm9tIFwiLi9mb3JtYXRzL2lkbi1ob3N0bmFtZS50c1wiO1xuaW1wb3J0IGlyaVJlZmVyZW5jZSBmcm9tIFwiLi9mb3JtYXRzL2lyaS1yZWZlcmVuY2UudHNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpcmk6IGlyaSxcbiAgXCJpZG4tZW1haWxcIjogaWRuRW1haWwsXG4gIFwiaWRuLWhvc3RuYW1lXCI6IGlkbkhvc3RuYW1lLFxuICBcImlyaS1yZWZlcmVuY2VcIjogaXJpUmVmZXJlbmNlLFxufTtcbiIsCiAgICAiLy8gUmVnZXggZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMjA0NDg0Ni9yZWdleC1mb3ItaXNvLTg2MDEtZHVyYXRpb25zXG5leHBvcnQgZGVmYXVsdCAvXlAoPyEkKShcXGQrKD86XFwuXFxkKyk/WSk/KFxcZCsoPzpcXC5cXGQrKT9NKT8oXFxkKyg/OlxcLlxcZCspP1cpPyhcXGQrKD86XFwuXFxkKyk/RCk/KFQoPz1cXGQpKFxcZCsoPzpcXC5cXGQrKT9IKT8oXFxkKyg/OlxcLlxcZCspP00pPyhcXGQrKD86XFwuXFxkKyk/Uyk/KT8kLztcbiIsCiAgICAiaW1wb3J0IGlyaSBmcm9tIFwiLi9pcmkudHNcIjtcbmltcG9ydCBkdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi50c1wiO1xuaW1wb3J0IGlkbkVtYWlsIGZyb20gXCIuL2lkbi1lbWFpbC50c1wiO1xuaW1wb3J0IGlkbkhvc3RuYW1lIGZyb20gXCIuL2lkbi1ob3N0bmFtZS50c1wiO1xuaW1wb3J0IGlyaVJlZmVyZW5jZSBmcm9tIFwiLi9pcmktcmVmZXJlbmNlLnRzXCI7XG5pbXBvcnQgdHlwZSB7IEZvcm1hdCB9IGZyb20gXCJhanZcIjtcblxuZXhwb3J0IHR5cGUgQWp2MjAxOUZvcm1hdHMgPSB7XG4gIFtrZXlzOiBzdHJpbmddOiBGb3JtYXQ7XG59O1xuXG5jb25zdCBmb3JtYXRzOiBBanYyMDE5Rm9ybWF0cyA9IHtcbiAgaXJpOiBpcmksXG4gIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgXCJpZG4tZW1haWxcIjogaWRuRW1haWwsXG4gIFwiaWRuLWhvc3RuYW1lXCI6IGlkbkhvc3RuYW1lLFxuICBcImlyaS1yZWZlcmVuY2VcIjogaXJpUmVmZXJlbmNlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0cztcbiIsCiAgICAiaW1wb3J0IGZvcm1hdHMsIHsgdHlwZSBBanYyMDE5Rm9ybWF0cyB9IGZyb20gXCIuL2Zvcm1hdHMvaW5kZXgudHNcIjtcbmltcG9ydCB0eXBlIHsgQWp2IH0gZnJvbSBcImFqdlwiO1xuXG50eXBlIE9wdGlvbnMgPSB7XG4gIGZvcm1hdHM/OiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChhanY6IEFqdiwgb3B0aW9uczogT3B0aW9ucyA9IHt9KTogQWp2ID0+IHtcbiAgY29uc3QgYWxsRm9ybWF0cyA9IE9iamVjdC5rZXlzKGZvcm1hdHMpO1xuICBsZXQgZm9ybWF0c1RvSW5zdGFsbCA9IGFsbEZvcm1hdHM7XG5cbiAgaWYgKG9wdGlvbnMuZm9ybWF0cykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShvcHRpb25zLmZvcm1hdHMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvcHRpb25zLmZvcm1hdHMgbXVzdCBiZSBhbiBhcnJheVwiKTtcbiAgICB9XG4gICAgZm9ybWF0c1RvSW5zdGFsbCA9IG9wdGlvbnMuZm9ybWF0cztcbiAgfVxuXG4gIGFsbEZvcm1hdHNcbiAgICAuZmlsdGVyKChmb3JtYXQpID0+IGZvcm1hdHNUb0luc3RhbGwuaW5jbHVkZXMoZm9ybWF0KSlcbiAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBhanYuYWRkRm9ybWF0KGtleSwgZm9ybWF0c1trZXkgYXMga2V5b2YgQWp2MjAxOUZvcm1hdHNdKTtcbiAgICB9KTtcblxuICByZXR1cm4gYWp2O1xufTtcbiIsCiAgICAiaW1wb3J0IHsgZGVzY3JpYmUsIGV4cGVjdCwgaXQgfSBmcm9tIFwiYnVuOnRlc3RcIjtcbmltcG9ydCBmb3JtYXRzIGZyb20gXCIuL2Zvcm1hdHMvaW5kZXgudHNcIjtcbmltcG9ydCBpZG4gZnJvbSBcIi4vaWRuLnRzXCI7XG5pbXBvcnQgeyBBanYgfSBmcm9tIFwiYWp2XCI7XG5cbmltcG9ydCBhcHBseSBmcm9tIFwiLi9pbmRleC50c1wiO1xuXG5pdChcImFkZCB0aGUgdHlwZXMgdG8gYWp2IHdpdGggdGhlIGFwcGx5IGZ1bmN0aW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWp2ID0gbmV3IEFqdigpO1xuICBhcHBseShhanYpO1xuICBleHBlY3QoYWp2LmZvcm1hdHMuZHVyYXRpb24pLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGFqdi5mb3JtYXRzLmlyaSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoYWp2LmZvcm1hdHNbXCJpZG4tZW1haWxcIl0pLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGFqdi5mb3JtYXRzW1wiaWRuLWhvc3RuYW1lXCJdKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChhanYuZm9ybWF0c1tcImlyaS1yZWZlcmVuY2VcIl0pLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG5pdChcImFkZCB0aGUgdHlwZXMgdG8gYWp2IGFzIG9wdGlvbnMgdG8gQWp2IGluc3RhbmNlc1wiLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFqdiA9IG5ldyBBanYoeyBmb3JtYXRzIH0pO1xuICBleHBlY3QoYWp2LmZvcm1hdHMuZHVyYXRpb24pLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGFqdi5mb3JtYXRzLmlyaSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoYWp2LmZvcm1hdHNbXCJpZG4tZW1haWxcIl0pLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGFqdi5mb3JtYXRzW1wiaWRuLWhvc3RuYW1lXCJdKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChhanYuZm9ybWF0c1tcImlyaS1yZWZlcmVuY2VcIl0pLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG5pdChcImFjY2VwdCB2YWxpZCBJUklzXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWp2ID0gbmV3IEFqdigpO1xuICBhcHBseShhanYpO1xuICBjb25zdCBzY2hlbWEgPSB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBmb3JtYXQ6IFwiaXJpXCIsXG4gIH07XG4gIGNvbnN0IHZhbGlkYXRlID0gYWp2LmNvbXBpbGUoc2NoZW1hKTtcblxuICAvLyBleGFtcGxlcyBmcm9tIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyMzk2I3NlY3Rpb24tMS4zXG4gIGV4cGVjdCh2YWxpZGF0ZShcImh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzIzOTYudHh0XCIpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdCh2YWxpZGF0ZShcImh0dHBzOi8v0L/QvtGI0YLQsC7Rg9C60YAvcnVzc2lhblwiKSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QodmFsaWRhdGUoXCJsZGFwOi8vWzIwMDE6ZGI4Ojo3XS9jPUdCP29iamVjdENsYXNzP29uZVwiKSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QodmFsaWRhdGUoXCJtYWlsdG86Sm9obi5Eb2VAZXhhbXBsZS5jb21cIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHZhbGlkYXRlKFwibmV3czpjb21wLmluZm9zeXN0ZW1zLnd3dy5zZXJ2ZXJzLnVuaXhcIikpLnRvQmVUcnV0aHkoKTs7XG4gIGV4cGVjdCh2YWxpZGF0ZShcInRlbDorMS04MTYtNTU1LTEyMTJcIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHZhbGlkYXRlKFwidGVsbmV0Oi8vMTkyLjAuMi4xNjo4MC9cIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHZhbGlkYXRlKFwidXJuOm9hc2lzOm5hbWVzOnNwZWNpZmljYXRpb246ZG9jYm9vazpkdGQ6eG1sOjQuMS4yXCIpKS50b0JlVHJ1dGh5KCk7XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2x1emxhYi9hanYtZm9ybWF0cy1kcmFmdDIwMTkvaXNzdWVzLzExXG4gIGV4cGVjdCh2YWxpZGF0ZShcIm1vZGJ1cyt0Y3A6Ly8xLjIuMy40L3BhdGhcIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHZhbGlkYXRlKFwibXF0dDovLzEuMi4zLjQvcGF0aFwiKSkudG9CZVRydXRoeSgpO1xuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9sdXpsYWIvYWp2LWZvcm1hdHMtZHJhZnQyMDE5L2lzc3Vlcy8xNlxuICBleHBlY3QodmFsaWRhdGUoXCJodHRwOi8vd3d3LnczLm9yZy8yMDA0LzAyL3Nrb3MvY29yZSNDb25jZXB0XCIpKS50b0JlVHJ1dGh5KCk7XG59KTtcblxuaXQoXCJyZWplY3QgaW52YWxpZCBJUklzXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWp2ID0gbmV3IEFqdigpO1xuICBhcHBseShhanYpO1xuXG4gIGNvbnN0IHNjaGVtYSA9IHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIGZvcm1hdDogXCJpcmlcIixcbiAgfTtcbiAgY29uc3QgdmFsaWRhdGUgPSBhanYuY29tcGlsZShzY2hlbWEpO1xuICBleHBlY3QoIXZhbGlkYXRlKFwiZXhhbXBsZS5jb21cIikpLnRvQmVUcnV0aHkoKTsgLy8gbWlzc2luZyBhIHNjaGVtZVxuICBleHBlY3QoIXZhbGlkYXRlKFwiaW52YWxpZFNjaGVtZTovL2V4YW1wbGUuY29tXCIpKS50b0JlVHJ1dGh5KCk7IC8vIGFuIGludmFsaWQgc2NoZW1lXG4gIGV4cGVjdCghdmFsaWRhdGUoXCJ0aGlzOnRoYXRcIikpLnRvQmVUcnV0aHkoKTtcblxuICAvLyBUaGVzZSBhcmUgSVJJLVJlZmVyZW5jZXMgbm90IElSSVxuICBleHBlY3QoIXZhbGlkYXRlKFwiI3NvbWVlbGVtZW50XCIpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdCghdmFsaWRhdGUoXCJhZmlsZS5zdmcjYW5lbGVtZW50XCIpKS50b0JlVHJ1dGh5KCk7XG59KTtcblxuaXQoXCJhY2NlcHQgYSB2YWxpZCBkdXJhdGlvblwiLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFqdiA9IG5ldyBBanYoKTtcbiAgYXBwbHkoYWp2KTtcblxuICBjb25zdCBzY2hlbWEgPSB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBmb3JtYXQ6IFwiZHVyYXRpb25cIixcbiAgfTtcbiAgY29uc3QgdmFsaWRhdGUgPSBhanYuY29tcGlsZShzY2hlbWEpO1xuICBleHBlY3QodmFsaWRhdGUoXCJQMVkyTTREVDIwSDQ0TTEyLjY3U1wiKSkudG9CZVRydXRoeSgpO1xufSk7XG5cbml0KFwicmVqZWN0IGFuIGludmFsaWQgZHVyYXRpb25cIiwgZnVuY3Rpb24gKCkge1xuICBjb25zdCBhanYgPSBuZXcgQWp2KCk7XG4gIGFwcGx5KGFqdik7XG5cbiAgY29uc3Qgc2NoZW1hID0ge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgZm9ybWF0OiBcImR1cmF0aW9uXCIsXG4gIH07XG4gIGNvbnN0IHZhbGlkYXRlID0gYWp2LmNvbXBpbGUoc2NoZW1hKTtcbiAgZXhwZWN0KCF2YWxpZGF0ZShcIjEwIHNlY29uZHNcIikpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG5pdChcImFjY2VwdCB2YWxpZCBpZG4tZW1haWxzXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWp2ID0gbmV3IEFqdigpO1xuICBhcHBseShhanYpO1xuXG4gIGNvbnN0IHNjaGVtYSA9IHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIGZvcm1hdDogXCJpZG4tZW1haWxcIixcbiAgfTtcbiAgY29uc3QgdmFsaWRhdGUgPSBhanYuY29tcGlsZShzY2hlbWEpO1xuXG4gIC8vIGV4YW1wbGVzIGZyb20gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9lbWFpbFxuICBleHBlY3QodmFsaWRhdGUoXCLQutCy0ZbRgtC+0YfQutCwQNC/0L7RiNGC0LAu0YPQutGAXCIpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdCh2YWxpZGF0ZShcIkTDtnJ0ZUBTw7ZyZW5zZW4uZXhhbXBsZS5jb21cIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHZhbGlkYXRlKFwiSm9obi5Eb2VAZXhhbXBsZS5jb21cIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHZhbGlkYXRlKCdcIkpvaG4gRG9lXCJAZXhhbXBsZS5jb20nKSkudG9CZVRydXRoeSgpO1xufSk7XG5cbml0KFwicmVqZWN0IGludmFsaWQgaWRuLWVtYWlsc1wiLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFqdiA9IG5ldyBBanYoKTtcbiAgYXBwbHkoYWp2KTtcblxuICBjb25zdCBzY2hlbWEgPSB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBmb3JtYXQ6IFwiaWRuLWVtYWlsXCIsXG4gIH07XG4gIGNvbnN0IHZhbGlkYXRlID0gYWp2LmNvbXBpbGUoc2NoZW1hKTtcbiAgZXhwZWN0KCF2YWxpZGF0ZShcImpvaG5kb2VcIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KCF2YWxpZGF0ZShcInZhbGlkQHNvbWV3aGVyZS5jb20/YXNkZlwiKSkudG9CZVRydXRoeSgpO1xufSk7XG5cbml0KFwiYWNjZXB0IHZhbGlkIGludGVybmF0aW9uYWwgZG9tYWluc1wiLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFqdiA9IG5ldyBBanYoKTtcbiAgYXBwbHkoYWp2KTtcblxuICBjb25zdCBzY2hlbWEgPSB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBmb3JtYXQ6IFwiaWRuLWhvc3RuYW1lXCIsXG4gIH07XG4gIGNvbnN0IHZhbGlkYXRlID0gYWp2LmNvbXBpbGUoc2NoZW1hKTtcblxuICBleHBlY3QodmFsaWRhdGUoXCJnb29nbGUuY29tXCIpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdCh2YWxpZGF0ZShcIjEyMy5leGFtcGxlLmNvbS5cIikpLnRvQmVUcnV0aHkoKTtcblxuICAvLyBleGFtcGxlIGZyb20gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbGl6ZWRfZG9tYWluX25hbWUjRXhhbXBsZV9vZl9JRE5BX2VuY29kaW5nXG4gIGV4cGVjdCh2YWxpZGF0ZShcIuOCuOOCp+ODvOODlOODvOODi+ODg+OCry5qcFwiKSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QodmFsaWRhdGUoXCLOv8+Fz4TOv8+Azq/OsS7OtM+AzrguZ3JcIikpLnRvQmVUcnV0aHkoKTtcblxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNTg5MCNzZWN0aW9uLTIuMy4yLjNcbiAgLy8gLS0gQW4gXCJpbnRlcm5hdGlvbmFsaXplZCBkb21haW4gbmFtZVwiIChJRE4pIGlzIGEgZG9tYWluIG5hbWUgdGhhdCBjb250YWluc1xuICAvLyAgICBhdCBsZWFzdCBPTkUgQS1sYWJlbCBvciBVLWxhYmVsXG4gIGV4cGVjdCh2YWxpZGF0ZShcImxvY2FsaG9zdFwiKSkudG9CZVRydXRoeSgpO1xuXG4gIC8vIGZyb20gQUpWIHRlc3Qgc3VpdGVcbiAgLy8gdmFsaWQgaG9zdG5hbWUgLSBtYXhpbXVtIGxlbmd0aCBob3N0bmFtZSAoMjU1IG9jdGV0cykgd2l0aCB0cmFpbGluZyBkb3RcbiAgZXhwZWN0KFxuICAgIHZhbGlkYXRlKFxuICAgICAgXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5LmV4YW1wbGUuY29tLlwiLFxuICAgICksXG4gICkudG9CZVRydXRoeSgpO1xuICAvLyB2YWxpZCBob3N0bmFtZSAtIG1heGltdW0gbGVuZ3RoIGhvc3RuYW1lICgyNTUgb2N0ZXRzKVxuICBleHBlY3QoXG4gICAgdmFsaWRhdGUoXG4gICAgICBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHkuZXhhbXBsZS5jb21cIixcbiAgICApLFxuICApLnRvQmVUcnV0aHkoKTtcbiAgLy8gdmFsaWQgaG9zdG5hbWUgLSBtYXhpbXVtIGxlbmd0aCBsYWJlbCAoNjMgY2hhcnMpXG4gIGV4cGVjdChcbiAgICB2YWxpZGF0ZShcbiAgICAgIFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprLmV4YW1wbGUuY29tXCIsXG4gICAgKSxcbiAgKS50b0JlVHJ1dGh5KCk7XG5cbiAgLy8gZXhhbXBsZSBmcm9tIGh0dHBzOi8vdW5pY29kZS5vcmcvZmFxL2lkbi5odG1sIzExXG4gIGV4cGVjdCh2YWxpZGF0ZShcIsO2YmIuYXRcIikpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG5pdChcInJlamVjdCBpbnZhbGlkIGludGVybmF0aW9uYWwgZG9tYWluc1wiLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFqdiA9IG5ldyBBanYoKTtcbiAgYXBwbHkoYWp2KTtcblxuICBjb25zdCBzY2hlbWEgPSB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBmb3JtYXQ6IFwiaWRuLWhvc3RuYW1lXCIsXG4gIH07XG4gIGNvbnN0IHZhbGlkYXRlID0gYWp2LmNvbXBpbGUoc2NoZW1hKTtcblxuICAvLyBiYWQgdGxkXG5cbiAgLy8gZnJvbSBhanYgdGVzdCBzdWl0ZVxuICAvLyBpbnZhbGlkIGhvc3RuYW1lIC0gbGFiZWwgdG9vIGxvbmcgKDY0IGNoYXJzKVxuICBleHBlY3QoXG4gICAgIXZhbGlkYXRlKFxuICAgICAgXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpamtsLmV4YW1wbGUuY29tXCIsXG4gICAgKSxcbiAgKS50b0JlVHJ1dGh5KCk7XG4gIC8vIGludmFsaWQgaG9zdG5hbWUgLSBob3N0bmFtZSB0b28gbG9uZyAoMjU2IG9jdGV0cylcbiAgZXhwZWN0KFxuICAgICF2YWxpZGF0ZShcbiAgICAgIFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXouYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXouYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXouYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXouYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXouYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXouYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXouYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXouYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXouZXhhbXBsZS5jb21cIixcbiAgICApLFxuICApLnRvQmVUcnV0aHkoKTtcbiAgLy8gaW52YWxpZCBob3N0bmFtZSAtIGhvc3RuYW1lIHRvbyBsb25nICgyNTYgb2N0ZXRzKVxuICBleHBlY3QoXG4gICAgIXZhbGlkYXRlKFxuICAgICAgXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei5leGFtcGxlLmNvbS5cIixcbiAgICApLFxuICApLnRvQmVUcnV0aHkoKTtcblxuICAvLyBhIFVSTCwgbm90IGEgaG9zdG5hbWVcbiAgZXhwZWN0KCF2YWxpZGF0ZShcImh0dHA6Ly9nb29nbGUuY29tXCIpKS50b0JlVHJ1dGh5KCk7XG59KTtcblxuaXQoXCJhY2NlcHQgdmFsaWQgSVJJLXJlZmVyZW5jZVwiLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFqdiA9IG5ldyBBanYoKTtcbiAgYXBwbHkoYWp2KTtcblxuICBjb25zdCBzY2hlbWEgPSB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBmb3JtYXQ6IFwiaXJpLXJlZmVyZW5jZVwiLFxuICB9O1xuICBjb25zdCB2YWxpZGF0ZSA9IGFqdi5jb21waWxlKHNjaGVtYSk7XG5cbiAgZXhwZWN0KHZhbGlkYXRlKFwiaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi00LjJcIikpLnRvQmVUcnV0aHkoKTtcblxuICAvLyBleGFtcGxlcyBmcm9tIGh0dHBzOi8vZGV2LnczLm9yZy9TVkcvcHJvZmlsZXMvMS4yVC9wdWJsaXNoL2RpZmYvbGlua2luZy5odG1sI0lSSWZvcm1zXG4gIGV4cGVjdCh2YWxpZGF0ZShcIiNzb21lZWxlbWVudFwiKSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QodmFsaWRhdGUoXCJhZmlsZS5zdmcjYW5lbGVtZW50XCIpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdCh2YWxpZGF0ZShcImFmaWxlLnN2Z1wiKSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QodmFsaWRhdGUoXCJzb21lY29udGFpbmVyI2ZyYWdtZW50XCIpKS50b0JlVHJ1dGh5KCk7XG5cbiAgLy8gZnJvbSBodHRwOi8vaG9tZXBhZ2UuZGl2bXMudWlvd2EuZWR1L35ydXMvQ291cnNlcy9XZWJQcm8vdXJpLnBkZlxuICBleHBlY3QoXG4gICAgdmFsaWRhdGUoXG4gICAgICBcImh0dHA6Ly9leGFtcGxlLm9yZy9hYnNvbHV0ZS9VUkkvd2l0aC9hYnNvbHV0ZS9wYXRoL3RvL3Jlc291cmNlLnR4dFwiLFxuICAgICksXG4gICkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoXG4gICAgdmFsaWRhdGUoXG4gICAgICBcIi8vZXhhbXBsZS5vcmcvc2NoZW1lLXJlbGF0aXZlL1VSSS93aXRoL2Fic29sdXRlL3BhdGgvdG8vcmVzb3VyY2UudHh0XCIsXG4gICAgKSxcbiAgKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdCh2YWxpZGF0ZShcIi9yZWxhdGl2ZS9VUkkvd2l0aC9hYnNvbHV0ZS9wYXRoL3RvL3Jlc291cmNlLnR4dFwiKSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QodmFsaWRhdGUoXCJyZWxhdGl2ZS9wYXRoL3RvL3Jlc291cmNlLnR4dFwiKSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QodmFsaWRhdGUoXCIuLi8uLi8uLi9yZXNvdXJjZS50eHRcIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHZhbGlkYXRlKFwiLi9yZXNvdXJjZS50eHQjZnJhZzAxXCIpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdCh2YWxpZGF0ZShcInJlc291cmNlLnR4dFwiKSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QodmFsaWRhdGUoXCIjZnJhZzAxXCIpKS50b0JlVHJ1dGh5KCk7XG5cbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi00LjJcbiAgZXhwZWN0KHZhbGlkYXRlKFwiLy9uZXR3b3JrL3Rlc3RcIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHZhbGlkYXRlKFwiLi90aGlzOnRoYXRcIikpLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KHZhbGlkYXRlKFwiLi9wYXRoXCIpKS50b0JlVHJ1dGh5KCk7IC8vIHJlbGF0aXZlLXBhdGggcmVmZXJlbmNlXG4gIGV4cGVjdCh2YWxpZGF0ZShcIi9wYXRoXCIpKS50b0JlVHJ1dGh5KCk7IC8vIGFic29sdXRlLXBhdGggcmVmZXJlbmNlXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2x1emxhYi9hanYtZm9ybWF0cy1kcmFmdDIwMTkvaXNzdWVzLzlcbiAgZXhwZWN0KHZhbGlkYXRlKFwidmFsaWRAZW1haWwuZm9ybWF0XCIpKS50b0JlVHJ1dGh5KCk7XG59KTtcblxuaXQoXCJyZWplY3QgaW52YWxpZCBJUkktcmVmZXJlbmNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWp2ID0gbmV3IEFqdigpO1xuICBhcHBseShhanYpO1xuXG4gIGNvbnN0IHNjaGVtYSA9IHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIGZvcm1hdDogXCJpcmktcmVmZXJlbmNlXCIsXG4gIH07XG4gIGNvbnN0IHZhbGlkYXRlID0gYWp2LmNvbXBpbGUoc2NoZW1hKTtcblxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTQuMlxuICBleHBlY3QoIXZhbGlkYXRlKFwidGhpczp0aGF0XCIpKS50b0JlVHJ1dGh5KCk7XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2x1emxhYi9hanYtZm9ybWF0cy1kcmFmdDIwMTkvaXNzdWVzLzlcbiAgLy8gRklYTUVcbiAgLy9leHBlY3QoIXZhbGlkYXRlKFwibWFpbHRvOmludmFsaWQuZm9ybWF0XCIpKTtcbn0pO1xuXG5pdChcImRyYWZ0MDcgc2hvdWxkIGluY2x1ZGUgdGhlIGNvcnJlY3QgZm9ybWF0c1wiLCBmdW5jdGlvbiAoKSB7XG4gIGV4cGVjdChpZG5bXCJpZG4taG9zdG5hbWVcIl0pLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGlkbltcImlkbi1lbWFpbFwiXSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoaWRuW1wiaXJpXCJdKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChpZG5bXCJpcmktcmVmZXJlbmNlXCJdKS50b0JlVHJ1dGh5KCk7XG59KTtcblxuaXQoXCJhZGQgdGhlIGlkbiB0eXBlcyB0byBhanYgYXMgb3B0aW9ucyB0byBBanYgaW5zdGFuY2VzXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWp2ID0gbmV3IEFqdih7IGZvcm1hdHM6IGlkbiB9KTtcbiAgZXhwZWN0KCFhanYuZm9ybWF0cy5kdXJhdGlvbikudG9CZVRydXRoeSgpO1xuICBleHBlY3QoYWp2LmZvcm1hdHMuaXJpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChhanYuZm9ybWF0c1tcImlkbi1lbWFpbFwiXSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoYWp2LmZvcm1hdHNbXCJpZG4taG9zdG5hbWVcIl0pLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGFqdi5mb3JtYXRzW1wiaXJpLXJlZmVyZW5jZVwiXSkudG9CZVRydXRoeSgpO1xufSk7XG5cbml0KFwiaXQgc2hvdWxkIGJlIHBvc3NpYmxlIHRvIGNoZXJyeSBwaWNrIGZvcm1hdHMgdG8gaW5zdGFsbFwiLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFqdiA9IG5ldyBBanYoe1xuICAgIGZvcm1hdHM6IHtcbiAgICAgIGR1cmF0aW9uOiBmb3JtYXRzLmR1cmF0aW9uLFxuICAgICAgaXJpOiBmb3JtYXRzLmlyaSxcbiAgICB9LFxuICB9KTtcblxuICBleHBlY3QoYWp2LmZvcm1hdHMuZHVyYXRpb24pLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KGFqdi5mb3JtYXRzLmlyaSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoIWFqdi5mb3JtYXRzW1wiaWRuLWVtYWlsXCJdKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdCghYWp2LmZvcm1hdHNbXCJpZG4taG9zdG5hbWVcIl0pLnRvQmVUcnV0aHkoKTtcbiAgZXhwZWN0KCFhanYuZm9ybWF0c1tcImlyaS1yZWZlcmVuY2VcIl0pLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG5pdChcIml0IHNob3VsZCBiZSBwb3NzaWJsZSB0byBzcGVjaWZ5IGZvcm1hdHMgdG8gaW5zdGFsbFwiLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFqdiA9IG5ldyBBanYoKTtcbiAgYXBwbHkoYWp2LCB7IGZvcm1hdHM6IFtcImlkbi1lbWFpbFwiLCBcImlyaVwiXSB9KTtcbiAgZXhwZWN0KCFhanYuZm9ybWF0cy5kdXJhdGlvbikudG9CZVRydXRoeSgpO1xuICBleHBlY3QoYWp2LmZvcm1hdHMuaXJpKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChhanYuZm9ybWF0c1tcImlkbi1lbWFpbFwiXSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoIWFqdi5mb3JtYXRzW1wiaWRuLWhvc3RuYW1lXCJdKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdCghYWp2LmZvcm1hdHNbXCJpcmktcmVmZXJlbmNlXCJdKS50b0JlVHJ1dGh5KCk7XG59KTtcbiIKICBdLAogICJtYXBwaW5ncyI6ICI7aVpBQ0EsT0FBTyxlQUFlLEdBQVMsYUFBYyxDQUFFLE1BQU8sRUFBSyxDQUFDLEVBQ3BELGFBQWlCLE9BQ3pCLFNBQVMsRUFBUyxDQUFDLEVBQVksQ0FDM0IsSUFBSSxFQUFjLEdBQWMsQ0FBVSxFQUN0QyxFQUNKLEdBQUksQ0FDQSxFQUFhLElBQUksSUFBSSxFQUFZLFFBQVEsRUFFN0MsTUFBTyxFQUFPLENBQ1YsR0FBSSxFQUFNLFFBQ04sUUFBUSxNQUFNLEVBQU0sUUFBVSxJQUFNLEVBQVksUUFBUSxFQUU1RCxNQUFPLEdBRVgsR0FBSSxFQUFXLFNBQVcsU0FBYyxFQUFZLDZCQUErQixFQUFZLG9CQUMzRixFQUFXLFNBQVcsRUFBVyxPQUFPLFlBQVksRUFHcEQsT0FBVyxTQUFXLEdBRTFCLEdBQUksRUFBVyxPQUFTLFNBQWMsRUFBWSw2QkFBK0IsRUFBWSxrQkFDekYsRUFBVyxLQUFPLEVBQVcsS0FHN0IsT0FBVyxLQUFPLEdBRXRCLEdBQUksRUFBVyxLQUNYLEVBQVcsS0FBTyxPQUFPLEVBQVcsSUFBSSxFQUU1QyxHQUFJLEVBQVcsS0FDWCxFQUFXLFNBQVcsRUFBVyxL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LEVBQUksUUFBUSxHQUFHLEVBQUUsV0FBVyxFQUNuQyxHQUFRLEVBQUksUUFBUSxZQUFZLEVBQUUsV0FBVyxFQUM3QyxHQUFRLEVBQUksUUFBUSxlQUFlLEVBQUUsV0FBVyxFQUNoRCxHQUFRLEVBQUksUUFBUSxnQkFBZ0IsRUFBRSxXQUFXLEVBQ2xELEVBRUQsRUFBRyxzREFBdUQsUUFBUyxFQUFHLENBQ3BFLElBQU0sRUFBTSxJQUFJLE1BQ2hCLEVBQU0sRUFBSyxDQUFFLFFBQVMsQ0FBQyxZQUFhLEtBQUssQ0FBRSxDQUFDLEVBQzVDLEdBQVEsRUFBSSxRQUFRLFFBQVEsRUFBRSxXQUFXLEVBQ3pDLEVBQU8sRUFBSSxRQUFRLEdBQUcsRUFBRSxXQUFXLEVBQ25DLEVBQU8sRUFBSSxRQUFRLFlBQVksRUFBRSxXQUFXLEVBQzVDLEdBQVEsRUFBSSxRQUFRLGVBQWUsRUFBRSxXQUFXLEVBQ2hELEdBQVEsRUFBSSxRQUFRLGdCQUFnQixFQUFFLFdBQVcsRUFDbEQiLAogICJkZWJ1Z0lkIjogIjQ3QTFEMERCRTlFNThENEQ2NDc1NkUyMTY0NzU2RTIxIiwKICAibmFtZXMiOiBbXQp9
